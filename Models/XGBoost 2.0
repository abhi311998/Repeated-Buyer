{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"XGBoost 2.0","provenance":[],"machine_shape":"hm","authorship_tag":"ABX9TyOJ6hMSTI4YzdKK9fcF31Z6"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"R2QQkRHrFS5W","colab_type":"code","outputId":"6b92a183-5d1a-46f6-b0ee-7248bb7f53df","executionInfo":{"status":"ok","timestamp":1586897243381,"user_tz":-330,"elapsed":27676,"user":{"displayName":"Abhishek Keshari","photoUrl":"","userId":"08321311573619930656"}},"colab":{"base_uri":"https://localhost:8080/","height":125}},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&response_type=code&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly\n","\n","Enter your authorization code:\n","··········\n","Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"xkrQwI4jUlPY","colab_type":"code","outputId":"b9941d25-b445-4b41-e5b7-5e26762462f9","executionInfo":{"status":"ok","timestamp":1586897249208,"user_tz":-330,"elapsed":2097,"user":{"displayName":"Abhishek Keshari","photoUrl":"","userId":"08321311573619930656"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["cd drive/My Drive/Project/Project_repeat_buyer"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/content/drive/My Drive/Project/Project_repeat_buyer\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"VgTW-1xm8vih","colab_type":"text"},"source":["# Run this"]},{"cell_type":"code","metadata":{"id":"e0PF2FOTwV4x","colab_type":"code","outputId":"b2c4624d-c304-442f-eab8-62cb95277193","executionInfo":{"status":"ok","timestamp":1586897285874,"user_tz":-330,"elapsed":33851,"user":{"displayName":"Abhishek Keshari","photoUrl":"","userId":"08321311573619930656"}},"colab":{"base_uri":"https://localhost:8080/","height":480}},"source":["import time\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","%matplotlib inline\n","\n","from Utility import *\n","\n","from sklearn.preprocessing import OneHotEncoder\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler\n","\n","import xgboost as xgb\n","from xgboost import XGBClassifier\n","\n","from sklearn.model_selection import cross_val_score\n","from sklearn.model_selection import GridSearchCV\n","\n","\n","from sklearn import metrics\n","from sklearn.metrics import confusion_matrix\n","from sklearn.metrics import classification_report\n","from sklearn.metrics import roc_auc_score\n","from sklearn.metrics import roc_curve\n","\n","# --------------------------------------------------------------------------------------#\n","\n","user = pd.read_csv('Data/user.csv')\n","merchant = pd.read_csv('Data/merchant.csv')\n","user_mer = pd.read_csv('Data/user_mer.csv')\n","um = pd.read_csv('Data/um.csv')\n","\n","# Filling missing values\n","user.fillna(0,inplace=True)\n","merchant.fillna(0,inplace=True)\n","\n","data = pd.merge(um,user,on='user_id')\n","data = pd.merge(data,merchant,on='merchant_id')\n","data = pd.merge(data,user_mer,on=['user_id','merchant_id'])\n","del user\n","del merchant\n","del user_mer\n","del um\n","\n","temp = data.copy(deep=True)\n","\n","data\n","\n","# --------------------------------------------------------------------------------------#\n","\n","encoder = data[['user_id','merchant_id','gender','age_range']]\n","encoder1 = np.array(encoder[['gender','age_range']])\n","print(len(encoder1))\n","# encoder1\n","enc = OneHotEncoder(sparse=False)\n","encoder1 = enc.fit_transform(encoder1)\n","encoder1 = pd.DataFrame(encoder1)\n","# encoder1\n","encoder1 = encoder[['user_id','merchant_id']].join(encoder1)\n","encoder1\n","\n","data = pd.merge(encoder1,data,on=['user_id','merchant_id'])\n","del encoder\n","del encoder1\n","data\n","\n","# --------------------------------------------------------------------------------------#\n","\n","predictors = [x for x in data.columns if x not in ['user_id', 'gender', 'age_range', 'merchant_id','label']]\n","target = [x for x in data.columns if x in ['label']]\n","\n","Train = data[(data.label==0) | (data.label==1)]\n","Train = Train.reset_index()\n","Train.drop('index',axis=1,inplace=True)\n","\n","Test = data[(data.label!=0) & (data.label!=1)]\n","Test = Test.reset_index()\n","Test.drop('index',axis=1,inplace=True)\n","Train\n","\n","# Train/Test split \n","X_train, X_test, y_train, y_test = train_test_split(Train[predictors],Train[target],test_size=0.3,random_state=123)\n","X_train"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","  import pandas.util.testing as tm\n"],"name":"stderr"},{"output_type":"stream","text":["522341\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","      <th>5</th>\n","      <th>6</th>\n","      <th>7</th>\n","      <th>8</th>\n","      <th>9</th>\n","      <th>10</th>\n","      <th>11</th>\n","      <th>#act_0_nor_U</th>\n","      <th>#act_1_nor_U</th>\n","      <th>#act_2_nor_U</th>\n","      <th>#act_3_nor_U</th>\n","      <th>tot_acts_nor_U</th>\n","      <th>#brands_click_nor_U</th>\n","      <th>#brands_pur_nor_U</th>\n","      <th>#cats_click_nor_U</th>\n","      <th>#cats_pur_nor_U</th>\n","      <th>#items_click_nor_U</th>\n","      <th>#items_pur_nor_U</th>\n","      <th>#days_click_nor_U</th>\n","      <th>#days_pur_nor_U</th>\n","      <th>brands_p_c_ratio_nor_U</th>\n","      <th>cats_p_c_ratio_nor_U</th>\n","      <th>items_p_c_ratio_nor_U</th>\n","      <th>days_p_c_ratio_nor_U</th>\n","      <th>#act_0_sales_U</th>\n","      <th>#act_1_sales_U</th>\n","      <th>#act_2_sales_U</th>\n","      <th>#act_3_sales_U</th>\n","      <th>tot_acts_sales_U</th>\n","      <th>#brands_click_sales_U</th>\n","      <th>#brands_pur_sales_U</th>\n","      <th>#cats_click_sales_U</th>\n","      <th>#cats_pur_sales_U</th>\n","      <th>#items_click_sales_U</th>\n","      <th>#items_pur_sales_U</th>\n","      <th>...</th>\n","      <th>items_p_c_ratio_UM</th>\n","      <th>#days_click_UM</th>\n","      <th>#days_pur_UM</th>\n","      <th>#days_fav_UM</th>\n","      <th>days_p_c_ratio_UM</th>\n","      <th>act_0_last_7_30_days_UM</th>\n","      <th>act_1_last_7_30_days_UM</th>\n","      <th>act_2_last_7_30_days_UM</th>\n","      <th>act_3_last_7_30_days_UM</th>\n","      <th>tot_acts_last_7_30_days_UM</th>\n","      <th>act_0_last_7_60_days_UM</th>\n","      <th>act_1_last_7_60_days_UM</th>\n","      <th>act_2_last_7_60_days_UM</th>\n","      <th>act_3_last_7_60_days_UM</th>\n","      <th>tot_acts_last_7_60_days_UM</th>\n","      <th>act_0_last_7_180_days_UM</th>\n","      <th>act_1_last_7_180_days_UM</th>\n","      <th>act_2_last_7_180_days_UM</th>\n","      <th>act_3_last_7_180_days_UM</th>\n","      <th>tot_acts_last_7_180_days_UM</th>\n","      <th>M_mkt_share_mean_C</th>\n","      <th>M_user_share_mean_C</th>\n","      <th>C_mkt_share_mean_M</th>\n","      <th>C_user_share_mean_M</th>\n","      <th>sim_score_mean_UMC</th>\n","      <th>M_mkt_share_max_C</th>\n","      <th>M_user_share_max_C</th>\n","      <th>C_mkt_share_max_M</th>\n","      <th>C_user_share_max_M</th>\n","      <th>sim_score_max_UMC</th>\n","      <th>M_mkt_share_mean_B</th>\n","      <th>M_user_share_mean_B</th>\n","      <th>B_mkt_share_mean_M</th>\n","      <th>B_user_share_mean_M</th>\n","      <th>sim_score_mean_UMB</th>\n","      <th>M_mkt_share_max_B</th>\n","      <th>M_user_share_max_B</th>\n","      <th>B_mkt_share_max_M</th>\n","      <th>B_user_share_max_M</th>\n","      <th>sim_score_max_UMB</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>117658</th>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.830287</td>\n","      <td>0.0</td>\n","      <td>0.060052</td>\n","      <td>0.109661</td>\n","      <td>383.0</td>\n","      <td>72.0</td>\n","      <td>9.0</td>\n","      <td>44.0</td>\n","      <td>13.0</td>\n","      <td>231.0</td>\n","      <td>23.0</td>\n","      <td>39.0</td>\n","      <td>8.0</td>\n","      <td>0.125000</td>\n","      <td>0.295455</td>\n","      <td>0.099567</td>\n","      <td>0.205128</td>\n","      <td>0.802469</td>\n","      <td>0.0</td>\n","      <td>0.111111</td>\n","      <td>0.08642</td>\n","      <td>81</td>\n","      <td>10</td>\n","      <td>4</td>\n","      <td>19</td>\n","      <td>7</td>\n","      <td>36</td>\n","      <td>9</td>\n","      <td>...</td>\n","      <td>0.500000</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0.25</td>\n","      <td>0.250000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.230769</td>\n","      <td>0.250000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.230769</td>\n","      <td>0.250000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.230769</td>\n","      <td>0.383300</td>\n","      <td>0.251325</td>\n","      <td>0.962121</td>\n","      <td>0.950899</td>\n","      <td>0.999413</td>\n","      <td>0.383300</td>\n","      <td>0.251325</td>\n","      <td>0.962121</td>\n","      <td>0.950899</td>\n","      <td>0.999413</td>\n","      <td>0.336824</td>\n","      <td>0.402893</td>\n","      <td>0.974747</td>\n","      <td>0.953320</td>\n","      <td>0.998647</td>\n","      <td>0.336824</td>\n","      <td>0.402893</td>\n","      <td>0.974747</td>\n","      <td>0.953320</td>\n","      <td>0.998647</td>\n","    </tr>\n","    <tr>\n","      <th>63511</th>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.500000</td>\n","      <td>0.0</td>\n","      <td>0.500000</td>\n","      <td>0.000000</td>\n","      <td>2.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>0.500000</td>\n","      <td>0.0</td>\n","      <td>0.500000</td>\n","      <td>0.00000</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>...</td>\n","      <td>1.000000</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1.00</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.079732</td>\n","      <td>0.108854</td>\n","      <td>0.309218</td>\n","      <td>0.495510</td>\n","      <td>0.963772</td>\n","      <td>0.115969</td>\n","      <td>0.132595</td>\n","      <td>0.315053</td>\n","      <td>0.501394</td>\n","      <td>0.984733</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>0.999531</td>\n","      <td>0.984732</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>0.999531</td>\n","      <td>0.984732</td>\n","    </tr>\n","    <tr>\n","      <th>5225</th>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.800000</td>\n","      <td>0.0</td>\n","      <td>0.160000</td>\n","      <td>0.040000</td>\n","      <td>25.0</td>\n","      <td>13.0</td>\n","      <td>3.0</td>\n","      <td>12.0</td>\n","      <td>4.0</td>\n","      <td>16.0</td>\n","      <td>4.0</td>\n","      <td>10.0</td>\n","      <td>3.0</td>\n","      <td>0.230769</td>\n","      <td>0.333333</td>\n","      <td>0.250000</td>\n","      <td>0.300000</td>\n","      <td>0.947368</td>\n","      <td>0.0</td>\n","      <td>0.052632</td>\n","      <td>0.00000</td>\n","      <td>38</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>7</td>\n","      <td>2</td>\n","      <td>23</td>\n","      <td>2</td>\n","      <td>...</td>\n","      <td>0.105263</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0.25</td>\n","      <td>0.846154</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.846154</td>\n","      <td>0.846154</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.846154</td>\n","      <td>0.733333</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.733333</td>\n","      <td>0.013698</td>\n","      <td>0.028509</td>\n","      <td>0.074835</td>\n","      <td>0.103753</td>\n","      <td>0.887663</td>\n","      <td>0.076469</td>\n","      <td>0.168340</td>\n","      <td>0.655861</td>\n","      <td>0.555753</td>\n","      <td>0.999136</td>\n","      <td>0.858589</td>\n","      <td>0.870971</td>\n","      <td>1.000000</td>\n","      <td>0.999873</td>\n","      <td>0.999594</td>\n","      <td>0.858589</td>\n","      <td>0.870971</td>\n","      <td>1.000000</td>\n","      <td>0.999873</td>\n","      <td>0.999594</td>\n","    </tr>\n","    <tr>\n","      <th>47781</th>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.816667</td>\n","      <td>0.0</td>\n","      <td>0.066667</td>\n","      <td>0.116667</td>\n","      <td>60.0</td>\n","      <td>20.0</td>\n","      <td>3.0</td>\n","      <td>17.0</td>\n","      <td>2.0</td>\n","      <td>36.0</td>\n","      <td>3.0</td>\n","      <td>17.0</td>\n","      <td>3.0</td>\n","      <td>0.150000</td>\n","      <td>0.117647</td>\n","      <td>0.083333</td>\n","      <td>0.176471</td>\n","      <td>0.937500</td>\n","      <td>0.0</td>\n","      <td>0.031250</td>\n","      <td>0.03125</td>\n","      <td>32</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>6</td>\n","      <td>1</td>\n","      <td>19</td>\n","      <td>1</td>\n","      <td>...</td>\n","      <td>0.500000</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1.00</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.026810</td>\n","      <td>0.045550</td>\n","      <td>0.077717</td>\n","      <td>0.142690</td>\n","      <td>0.920407</td>\n","      <td>0.107254</td>\n","      <td>0.122076</td>\n","      <td>0.272035</td>\n","      <td>0.290826</td>\n","      <td>0.999092</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>0.999701</td>\n","      <td>0.981023</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>0.999701</td>\n","      <td>0.981023</td>\n","    </tr>\n","    <tr>\n","      <th>193470</th>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.787879</td>\n","      <td>0.0</td>\n","      <td>0.106061</td>\n","      <td>0.106061</td>\n","      <td>66.0</td>\n","      <td>23.0</td>\n","      <td>6.0</td>\n","      <td>15.0</td>\n","      <td>6.0</td>\n","      <td>44.0</td>\n","      <td>6.0</td>\n","      <td>14.0</td>\n","      <td>5.0</td>\n","      <td>0.260870</td>\n","      <td>0.400000</td>\n","      <td>0.136364</td>\n","      <td>0.357143</td>\n","      <td>0.944444</td>\n","      <td>0.0</td>\n","      <td>0.055556</td>\n","      <td>0.00000</td>\n","      <td>18</td>\n","      <td>12</td>\n","      <td>1</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>16</td>\n","      <td>1</td>\n","      <td>...</td>\n","      <td>1.000000</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1.00</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.002099</td>\n","      <td>0.001492</td>\n","      <td>0.056616</td>\n","      <td>0.065545</td>\n","      <td>0.865441</td>\n","      <td>0.004689</td>\n","      <td>0.003377</td>\n","      <td>0.199679</td>\n","      <td>0.207532</td>\n","      <td>0.981579</td>\n","      <td>0.300592</td>\n","      <td>0.418869</td>\n","      <td>0.814755</td>\n","      <td>0.914263</td>\n","      <td>0.942848</td>\n","      <td>0.300592</td>\n","      <td>0.418869</td>\n","      <td>0.814755</td>\n","      <td>0.914263</td>\n","      <td>0.942848</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>192476</th>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.846626</td>\n","      <td>0.0</td>\n","      <td>0.049080</td>\n","      <td>0.104294</td>\n","      <td>163.0</td>\n","      <td>64.0</td>\n","      <td>7.0</td>\n","      <td>35.0</td>\n","      <td>6.0</td>\n","      <td>97.0</td>\n","      <td>7.0</td>\n","      <td>31.0</td>\n","      <td>7.0</td>\n","      <td>0.109375</td>\n","      <td>0.171429</td>\n","      <td>0.072165</td>\n","      <td>0.225806</td>\n","      <td>0.750000</td>\n","      <td>0.0</td>\n","      <td>0.175000</td>\n","      <td>0.07500</td>\n","      <td>40</td>\n","      <td>8</td>\n","      <td>4</td>\n","      <td>8</td>\n","      <td>4</td>\n","      <td>17</td>\n","      <td>5</td>\n","      <td>...</td>\n","      <td>1.000000</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1.00</td>\n","      <td>1.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.000000</td>\n","      <td>0.027308</td>\n","      <td>0.020823</td>\n","      <td>0.262014</td>\n","      <td>0.189391</td>\n","      <td>0.977843</td>\n","      <td>0.050724</td>\n","      <td>0.038344</td>\n","      <td>0.469108</td>\n","      <td>0.329571</td>\n","      <td>0.984764</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>0.999549</td>\n","      <td>0.984746</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>0.999549</td>\n","      <td>0.984746</td>\n","    </tr>\n","    <tr>\n","      <th>17730</th>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.898089</td>\n","      <td>0.0</td>\n","      <td>0.089172</td>\n","      <td>0.012739</td>\n","      <td>157.0</td>\n","      <td>37.0</td>\n","      <td>10.0</td>\n","      <td>23.0</td>\n","      <td>9.0</td>\n","      <td>57.0</td>\n","      <td>11.0</td>\n","      <td>27.0</td>\n","      <td>11.0</td>\n","      <td>0.270270</td>\n","      <td>0.391304</td>\n","      <td>0.192982</td>\n","      <td>0.407407</td>\n","      <td>0.913043</td>\n","      <td>0.0</td>\n","      <td>0.086957</td>\n","      <td>0.00000</td>\n","      <td>23</td>\n","      <td>4</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>6</td>\n","      <td>2</td>\n","      <td>...</td>\n","      <td>1.000000</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0.50</td>\n","      <td>1.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.000000</td>\n","      <td>0.149971</td>\n","      <td>0.094414</td>\n","      <td>0.956610</td>\n","      <td>0.991327</td>\n","      <td>0.993955</td>\n","      <td>0.149971</td>\n","      <td>0.094414</td>\n","      <td>0.956610</td>\n","      <td>0.991327</td>\n","      <td>0.993955</td>\n","      <td>0.492515</td>\n","      <td>0.483852</td>\n","      <td>0.485392</td>\n","      <td>0.511721</td>\n","      <td>0.944603</td>\n","      <td>0.985031</td>\n","      <td>0.965775</td>\n","      <td>0.970784</td>\n","      <td>0.998828</td>\n","      <td>0.993955</td>\n","    </tr>\n","    <tr>\n","      <th>28030</th>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>6.0</td>\n","      <td>4.0</td>\n","      <td>0.0</td>\n","      <td>4.0</td>\n","      <td>0.0</td>\n","      <td>4.0</td>\n","      <td>0.0</td>\n","      <td>3.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.846154</td>\n","      <td>0.0</td>\n","      <td>0.153846</td>\n","      <td>0.00000</td>\n","      <td>13</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>6</td>\n","      <td>2</td>\n","      <td>8</td>\n","      <td>2</td>\n","      <td>...</td>\n","      <td>0.166667</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0.50</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.211623</td>\n","      <td>0.186282</td>\n","      <td>0.100790</td>\n","      <td>0.161744</td>\n","      <td>0.778483</td>\n","      <td>0.337957</td>\n","      <td>0.251006</td>\n","      <td>0.117297</td>\n","      <td>0.225246</td>\n","      <td>0.992391</td>\n","      <td>0.882945</td>\n","      <td>0.871155</td>\n","      <td>1.000000</td>\n","      <td>0.999542</td>\n","      <td>0.995926</td>\n","      <td>0.882945</td>\n","      <td>0.871155</td>\n","      <td>1.000000</td>\n","      <td>0.999542</td>\n","      <td>0.995926</td>\n","    </tr>\n","    <tr>\n","      <th>15725</th>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.686047</td>\n","      <td>0.0</td>\n","      <td>0.029070</td>\n","      <td>0.284884</td>\n","      <td>172.0</td>\n","      <td>45.0</td>\n","      <td>1.0</td>\n","      <td>45.0</td>\n","      <td>5.0</td>\n","      <td>87.0</td>\n","      <td>5.0</td>\n","      <td>36.0</td>\n","      <td>1.0</td>\n","      <td>0.022222</td>\n","      <td>0.111111</td>\n","      <td>0.057471</td>\n","      <td>0.027778</td>\n","      <td>0.550000</td>\n","      <td>0.0</td>\n","      <td>0.250000</td>\n","      <td>0.20000</td>\n","      <td>20</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>5</td>\n","      <td>3</td>\n","      <td>10</td>\n","      <td>4</td>\n","      <td>...</td>\n","      <td>0.666667</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1.00</td>\n","      <td>1.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.5</td>\n","      <td>0.888889</td>\n","      <td>1.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.5</td>\n","      <td>0.888889</td>\n","      <td>1.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.5</td>\n","      <td>0.888889</td>\n","      <td>0.021203</td>\n","      <td>0.025076</td>\n","      <td>0.032075</td>\n","      <td>0.061239</td>\n","      <td>0.934726</td>\n","      <td>0.082030</td>\n","      <td>0.064613</td>\n","      <td>0.307146</td>\n","      <td>0.477725</td>\n","      <td>0.999911</td>\n","      <td>0.735951</td>\n","      <td>0.640245</td>\n","      <td>0.999822</td>\n","      <td>0.998703</td>\n","      <td>0.998987</td>\n","      <td>0.735951</td>\n","      <td>0.640245</td>\n","      <td>0.999822</td>\n","      <td>0.998703</td>\n","      <td>0.998987</td>\n","    </tr>\n","    <tr>\n","      <th>249342</th>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.900000</td>\n","      <td>0.0</td>\n","      <td>0.100000</td>\n","      <td>0.000000</td>\n","      <td>50.0</td>\n","      <td>20.0</td>\n","      <td>4.0</td>\n","      <td>22.0</td>\n","      <td>5.0</td>\n","      <td>33.0</td>\n","      <td>5.0</td>\n","      <td>14.0</td>\n","      <td>4.0</td>\n","      <td>0.200000</td>\n","      <td>0.227273</td>\n","      <td>0.151515</td>\n","      <td>0.285714</td>\n","      <td>0.928571</td>\n","      <td>0.0</td>\n","      <td>0.071429</td>\n","      <td>0.00000</td>\n","      <td>14</td>\n","      <td>6</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>7</td>\n","      <td>1</td>\n","      <td>...</td>\n","      <td>1.000000</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1.00</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.003571</td>\n","      <td>0.003459</td>\n","      <td>0.604061</td>\n","      <td>0.714744</td>\n","      <td>0.995971</td>\n","      <td>0.003571</td>\n","      <td>0.003459</td>\n","      <td>0.604061</td>\n","      <td>0.714744</td>\n","      <td>0.995971</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>0.986718</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>0.986718</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>182604 rows × 287 columns</p>\n","</div>"],"text/plain":["          0    1    2  ...  B_mkt_share_max_M  B_user_share_max_M  sim_score_max_UMB\n","117658  1.0  0.0  0.0  ...           0.974747            0.953320           0.998647\n","63511   1.0  0.0  0.0  ...           1.000000            0.999531           0.984732\n","5225    1.0  0.0  0.0  ...           1.000000            0.999873           0.999594\n","47781   0.0  1.0  0.0  ...           1.000000            0.999701           0.981023\n","193470  1.0  0.0  0.0  ...           0.814755            0.914263           0.942848\n","...     ...  ...  ...  ...                ...                 ...                ...\n","192476  1.0  0.0  0.0  ...           1.000000            0.999549           0.984746\n","17730   0.0  1.0  0.0  ...           0.970784            0.998828           0.993955\n","28030   1.0  0.0  0.0  ...           1.000000            0.999542           0.995926\n","15725   1.0  0.0  0.0  ...           0.999822            0.998703           0.998987\n","249342  1.0  0.0  0.0  ...           1.000000            1.000000           0.986718\n","\n","[182604 rows x 287 columns]"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"code","metadata":{"id":"XstfFJupxIuR","colab_type":"code","outputId":"1619e2f8-2b96-4805-af96-292d2844ce5b","executionInfo":{"status":"ok","timestamp":1586852307170,"user_tz":-330,"elapsed":1614,"user":{"displayName":"Abhishek Keshari","photoUrl":"","userId":"08321311573619930656"}},"colab":{"base_uri":"https://localhost:8080/","height":426}},"source":["Test"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>user_id</th>\n","      <th>merchant_id</th>\n","      <th>0</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","      <th>5</th>\n","      <th>6</th>\n","      <th>7</th>\n","      <th>8</th>\n","      <th>9</th>\n","      <th>10</th>\n","      <th>11</th>\n","      <th>label</th>\n","      <th>gender</th>\n","      <th>age_range</th>\n","      <th>#act_0_nor_U</th>\n","      <th>#act_1_nor_U</th>\n","      <th>#act_2_nor_U</th>\n","      <th>#act_3_nor_U</th>\n","      <th>tot_acts_nor_U</th>\n","      <th>#brands_click_nor_U</th>\n","      <th>#brands_pur_nor_U</th>\n","      <th>#cats_click_nor_U</th>\n","      <th>#cats_pur_nor_U</th>\n","      <th>#items_click_nor_U</th>\n","      <th>#items_pur_nor_U</th>\n","      <th>#days_click_nor_U</th>\n","      <th>#days_pur_nor_U</th>\n","      <th>brands_p_c_ratio_nor_U</th>\n","      <th>cats_p_c_ratio_nor_U</th>\n","      <th>items_p_c_ratio_nor_U</th>\n","      <th>days_p_c_ratio_nor_U</th>\n","      <th>#act_0_sales_U</th>\n","      <th>#act_1_sales_U</th>\n","      <th>#act_2_sales_U</th>\n","      <th>#act_3_sales_U</th>\n","      <th>tot_acts_sales_U</th>\n","      <th>#brands_click_sales_U</th>\n","      <th>...</th>\n","      <th>items_p_c_ratio_UM</th>\n","      <th>#days_click_UM</th>\n","      <th>#days_pur_UM</th>\n","      <th>#days_fav_UM</th>\n","      <th>days_p_c_ratio_UM</th>\n","      <th>act_0_last_7_30_days_UM</th>\n","      <th>act_1_last_7_30_days_UM</th>\n","      <th>act_2_last_7_30_days_UM</th>\n","      <th>act_3_last_7_30_days_UM</th>\n","      <th>tot_acts_last_7_30_days_UM</th>\n","      <th>act_0_last_7_60_days_UM</th>\n","      <th>act_1_last_7_60_days_UM</th>\n","      <th>act_2_last_7_60_days_UM</th>\n","      <th>act_3_last_7_60_days_UM</th>\n","      <th>tot_acts_last_7_60_days_UM</th>\n","      <th>act_0_last_7_180_days_UM</th>\n","      <th>act_1_last_7_180_days_UM</th>\n","      <th>act_2_last_7_180_days_UM</th>\n","      <th>act_3_last_7_180_days_UM</th>\n","      <th>tot_acts_last_7_180_days_UM</th>\n","      <th>M_mkt_share_mean_C</th>\n","      <th>M_user_share_mean_C</th>\n","      <th>C_mkt_share_mean_M</th>\n","      <th>C_user_share_mean_M</th>\n","      <th>sim_score_mean_UMC</th>\n","      <th>M_mkt_share_max_C</th>\n","      <th>M_user_share_max_C</th>\n","      <th>C_mkt_share_max_M</th>\n","      <th>C_user_share_max_M</th>\n","      <th>sim_score_max_UMC</th>\n","      <th>M_mkt_share_mean_B</th>\n","      <th>M_user_share_mean_B</th>\n","      <th>B_mkt_share_mean_M</th>\n","      <th>B_user_share_mean_M</th>\n","      <th>sim_score_mean_UMB</th>\n","      <th>M_mkt_share_max_B</th>\n","      <th>M_user_share_max_B</th>\n","      <th>B_mkt_share_max_M</th>\n","      <th>B_user_share_max_M</th>\n","      <th>sim_score_max_UMB</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>365987</td>\n","      <td>2579</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>1</td>\n","      <td>4</td>\n","      <td>0.936170</td>\n","      <td>0.000000</td>\n","      <td>0.063830</td>\n","      <td>0.000000</td>\n","      <td>141.0</td>\n","      <td>39.0</td>\n","      <td>5.0</td>\n","      <td>34.0</td>\n","      <td>6.0</td>\n","      <td>75.0</td>\n","      <td>9.0</td>\n","      <td>31.0</td>\n","      <td>5.0</td>\n","      <td>0.128205</td>\n","      <td>0.176471</td>\n","      <td>0.120000</td>\n","      <td>0.161290</td>\n","      <td>0.833333</td>\n","      <td>0.0</td>\n","      <td>0.100000</td>\n","      <td>0.066667</td>\n","      <td>30</td>\n","      <td>5</td>\n","      <td>...</td>\n","      <td>0.200000</td>\n","      <td>6</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>0.166667</td>\n","      <td>0.857143</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.5</td>\n","      <td>0.8125</td>\n","      <td>0.857143</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.5</td>\n","      <td>0.8125</td>\n","      <td>0.857143</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.5</td>\n","      <td>0.8125</td>\n","      <td>0.182267</td>\n","      <td>0.183033</td>\n","      <td>0.417972</td>\n","      <td>0.442146</td>\n","      <td>0.992954</td>\n","      <td>0.292019</td>\n","      <td>0.310351</td>\n","      <td>0.769167</td>\n","      <td>0.834738</td>\n","      <td>0.999065</td>\n","      <td>0.522227</td>\n","      <td>0.701685</td>\n","      <td>0.997527</td>\n","      <td>0.999745</td>\n","      <td>0.999376</td>\n","      <td>0.522227</td>\n","      <td>0.701685</td>\n","      <td>0.997527</td>\n","      <td>0.999745</td>\n","      <td>0.999376</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>24209</td>\n","      <td>2579</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0.808511</td>\n","      <td>0.042553</td>\n","      <td>0.127660</td>\n","      <td>0.021277</td>\n","      <td>47.0</td>\n","      <td>14.0</td>\n","      <td>3.0</td>\n","      <td>16.0</td>\n","      <td>3.0</td>\n","      <td>29.0</td>\n","      <td>5.0</td>\n","      <td>13.0</td>\n","      <td>3.0</td>\n","      <td>0.214286</td>\n","      <td>0.187500</td>\n","      <td>0.172414</td>\n","      <td>0.230769</td>\n","      <td>0.933333</td>\n","      <td>0.0</td>\n","      <td>0.066667</td>\n","      <td>0.000000</td>\n","      <td>15</td>\n","      <td>8</td>\n","      <td>...</td>\n","      <td>0.333333</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0000</td>\n","      <td>0.292019</td>\n","      <td>0.310351</td>\n","      <td>0.769167</td>\n","      <td>0.834738</td>\n","      <td>0.986680</td>\n","      <td>0.292019</td>\n","      <td>0.310351</td>\n","      <td>0.769167</td>\n","      <td>0.834738</td>\n","      <td>0.986680</td>\n","      <td>0.261217</td>\n","      <td>0.351122</td>\n","      <td>0.500000</td>\n","      <td>0.502427</td>\n","      <td>0.948136</td>\n","      <td>0.522227</td>\n","      <td>0.701685</td>\n","      <td>0.997527</td>\n","      <td>0.999745</td>\n","      <td>0.986678</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>191712</td>\n","      <td>2579</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>4</td>\n","      <td>0.739130</td>\n","      <td>0.000000</td>\n","      <td>0.260870</td>\n","      <td>0.000000</td>\n","      <td>23.0</td>\n","      <td>7.0</td>\n","      <td>3.0</td>\n","      <td>8.0</td>\n","      <td>4.0</td>\n","      <td>12.0</td>\n","      <td>5.0</td>\n","      <td>8.0</td>\n","      <td>2.0</td>\n","      <td>0.428571</td>\n","      <td>0.500000</td>\n","      <td>0.416667</td>\n","      <td>0.250000</td>\n","      <td>0.950000</td>\n","      <td>0.0</td>\n","      <td>0.050000</td>\n","      <td>0.000000</td>\n","      <td>40</td>\n","      <td>8</td>\n","      <td>...</td>\n","      <td>0.333333</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0.250000</td>\n","      <td>1.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0000</td>\n","      <td>1.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0000</td>\n","      <td>1.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0000</td>\n","      <td>0.292019</td>\n","      <td>0.310351</td>\n","      <td>0.769167</td>\n","      <td>0.834738</td>\n","      <td>0.998873</td>\n","      <td>0.292019</td>\n","      <td>0.310351</td>\n","      <td>0.769167</td>\n","      <td>0.834738</td>\n","      <td>0.998873</td>\n","      <td>0.522227</td>\n","      <td>0.701685</td>\n","      <td>0.997527</td>\n","      <td>0.999745</td>\n","      <td>0.998873</td>\n","      <td>0.522227</td>\n","      <td>0.701685</td>\n","      <td>0.997527</td>\n","      <td>0.999745</td>\n","      <td>0.998873</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>48987</td>\n","      <td>2579</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>4</td>\n","      <td>0.555556</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.444444</td>\n","      <td>9.0</td>\n","      <td>4.0</td>\n","      <td>0.0</td>\n","      <td>4.0</td>\n","      <td>0.0</td>\n","      <td>5.0</td>\n","      <td>0.0</td>\n","      <td>3.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.333333</td>\n","      <td>0.666667</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>1.000000</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0000</td>\n","      <td>0.292019</td>\n","      <td>0.310351</td>\n","      <td>0.769167</td>\n","      <td>0.834738</td>\n","      <td>0.970496</td>\n","      <td>0.292019</td>\n","      <td>0.310351</td>\n","      <td>0.769167</td>\n","      <td>0.834738</td>\n","      <td>0.970496</td>\n","      <td>0.522227</td>\n","      <td>0.701685</td>\n","      <td>0.997527</td>\n","      <td>0.999745</td>\n","      <td>0.970496</td>\n","      <td>0.522227</td>\n","      <td>0.701685</td>\n","      <td>0.997527</td>\n","      <td>0.999745</td>\n","      <td>0.970496</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>86273</td>\n","      <td>2579</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>1</td>\n","      <td>6</td>\n","      <td>0.857143</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.142857</td>\n","      <td>49.0</td>\n","      <td>9.0</td>\n","      <td>0.0</td>\n","      <td>11.0</td>\n","      <td>0.0</td>\n","      <td>24.0</td>\n","      <td>0.0</td>\n","      <td>8.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.869565</td>\n","      <td>0.0</td>\n","      <td>0.043478</td>\n","      <td>0.086957</td>\n","      <td>23</td>\n","      <td>5</td>\n","      <td>...</td>\n","      <td>0.333333</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0.500000</td>\n","      <td>1.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0000</td>\n","      <td>1.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0000</td>\n","      <td>1.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0000</td>\n","      <td>0.292019</td>\n","      <td>0.310351</td>\n","      <td>0.769167</td>\n","      <td>0.834738</td>\n","      <td>0.998535</td>\n","      <td>0.292019</td>\n","      <td>0.310351</td>\n","      <td>0.769167</td>\n","      <td>0.834738</td>\n","      <td>0.998535</td>\n","      <td>0.522227</td>\n","      <td>0.701685</td>\n","      <td>0.997527</td>\n","      <td>0.999745</td>\n","      <td>0.998534</td>\n","      <td>0.522227</td>\n","      <td>0.701685</td>\n","      <td>0.997527</td>\n","      <td>0.999745</td>\n","      <td>0.998534</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>261472</th>\n","      <td>176438</td>\n","      <td>3487</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>37.0</td>\n","      <td>11.0</td>\n","      <td>0.0</td>\n","      <td>7.0</td>\n","      <td>0.0</td>\n","      <td>25.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.956522</td>\n","      <td>0.0</td>\n","      <td>0.043478</td>\n","      <td>0.000000</td>\n","      <td>46</td>\n","      <td>20</td>\n","      <td>...</td>\n","      <td>0.500000</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0.500000</td>\n","      <td>1.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0000</td>\n","      <td>1.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0000</td>\n","      <td>1.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0000</td>\n","      <td>0.000165</td>\n","      <td>0.000584</td>\n","      <td>0.125000</td>\n","      <td>0.165714</td>\n","      <td>0.854233</td>\n","      <td>0.000266</td>\n","      <td>0.000962</td>\n","      <td>0.216667</td>\n","      <td>0.289524</td>\n","      <td>0.998915</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>0.992490</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>0.992490</td>\n","    </tr>\n","    <tr>\n","      <th>261473</th>\n","      <td>318692</td>\n","      <td>3487</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0.975207</td>\n","      <td>0.000000</td>\n","      <td>0.024793</td>\n","      <td>0.000000</td>\n","      <td>121.0</td>\n","      <td>25.0</td>\n","      <td>2.0</td>\n","      <td>27.0</td>\n","      <td>2.0</td>\n","      <td>94.0</td>\n","      <td>3.0</td>\n","      <td>10.0</td>\n","      <td>2.0</td>\n","      <td>0.080000</td>\n","      <td>0.074074</td>\n","      <td>0.031915</td>\n","      <td>0.200000</td>\n","      <td>0.945455</td>\n","      <td>0.0</td>\n","      <td>0.054545</td>\n","      <td>0.000000</td>\n","      <td>55</td>\n","      <td>11</td>\n","      <td>...</td>\n","      <td>1.000000</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0000</td>\n","      <td>0.000995</td>\n","      <td>0.002012</td>\n","      <td>0.119048</td>\n","      <td>0.129796</td>\n","      <td>0.912263</td>\n","      <td>0.006459</td>\n","      <td>0.012121</td>\n","      <td>0.483333</td>\n","      <td>0.310476</td>\n","      <td>0.999761</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>0.990239</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>0.990239</td>\n","    </tr>\n","    <tr>\n","      <th>261474</th>\n","      <td>174237</td>\n","      <td>2350</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>8.0</td>\n","      <td>7.0</td>\n","      <td>0.0</td>\n","      <td>5.0</td>\n","      <td>0.0</td>\n","      <td>7.0</td>\n","      <td>0.0</td>\n","      <td>5.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.729730</td>\n","      <td>0.0</td>\n","      <td>0.108108</td>\n","      <td>0.162162</td>\n","      <td>37</td>\n","      <td>16</td>\n","      <td>...</td>\n","      <td>1.000000</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0000</td>\n","      <td>0.000514</td>\n","      <td>0.001318</td>\n","      <td>0.246914</td>\n","      <td>0.274262</td>\n","      <td>0.981981</td>\n","      <td>0.001153</td>\n","      <td>0.002823</td>\n","      <td>0.500000</td>\n","      <td>0.424051</td>\n","      <td>0.990505</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>0.986825</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>0.986825</td>\n","    </tr>\n","    <tr>\n","      <th>261475</th>\n","      <td>66667</td>\n","      <td>2350</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>5</td>\n","      <td>0.960663</td>\n","      <td>0.000000</td>\n","      <td>0.012422</td>\n","      <td>0.026915</td>\n","      <td>483.0</td>\n","      <td>179.0</td>\n","      <td>5.0</td>\n","      <td>79.0</td>\n","      <td>5.0</td>\n","      <td>323.0</td>\n","      <td>6.0</td>\n","      <td>53.0</td>\n","      <td>6.0</td>\n","      <td>0.027933</td>\n","      <td>0.063291</td>\n","      <td>0.018576</td>\n","      <td>0.113208</td>\n","      <td>0.946809</td>\n","      <td>0.0</td>\n","      <td>0.031915</td>\n","      <td>0.021277</td>\n","      <td>94</td>\n","      <td>40</td>\n","      <td>...</td>\n","      <td>1.000000</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0000</td>\n","      <td>0.005098</td>\n","      <td>0.003249</td>\n","      <td>0.129630</td>\n","      <td>0.113397</td>\n","      <td>0.947587</td>\n","      <td>0.020000</td>\n","      <td>0.011765</td>\n","      <td>0.500000</td>\n","      <td>0.424051</td>\n","      <td>0.998401</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>0.970709</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>0.970709</td>\n","    </tr>\n","    <tr>\n","      <th>261476</th>\n","      <td>3123</td>\n","      <td>2350</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.666667</td>\n","      <td>0.0</td>\n","      <td>0.333333</td>\n","      <td>0.000000</td>\n","      <td>6</td>\n","      <td>4</td>\n","      <td>...</td>\n","      <td>1.000000</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0000</td>\n","      <td>0.001153</td>\n","      <td>0.002823</td>\n","      <td>0.240741</td>\n","      <td>0.392405</td>\n","      <td>0.943502</td>\n","      <td>0.001153</td>\n","      <td>0.002823</td>\n","      <td>0.240741</td>\n","      <td>0.392405</td>\n","      <td>0.943502</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>0.943051</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>0.943051</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>261477 rows × 292 columns</p>\n","</div>"],"text/plain":["        user_id  merchant_id  ...  B_user_share_max_M  sim_score_max_UMB\n","0        365987         2579  ...            0.999745           0.999376\n","1         24209         2579  ...            0.999745           0.986678\n","2        191712         2579  ...            0.999745           0.998873\n","3         48987         2579  ...            0.999745           0.970496\n","4         86273         2579  ...            0.999745           0.998534\n","...         ...          ...  ...                 ...                ...\n","261472   176438         3487  ...            1.000000           0.992490\n","261473   318692         3487  ...            1.000000           0.990239\n","261474   174237         2350  ...            1.000000           0.986825\n","261475    66667         2350  ...            1.000000           0.970709\n","261476     3123         2350  ...            1.000000           0.943051\n","\n","[261477 rows x 292 columns]"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"markdown","metadata":{"id":"BVDTgN6ExgWy","colab_type":"text"},"source":["# Bayesian parameter tuning"]},{"cell_type":"code","metadata":{"id":"hlhUBZTCxbua","colab_type":"code","outputId":"4826017c-a7fb-446c-a2e1-3a6275c85ead","executionInfo":{"status":"error","timestamp":1586853678709,"user_tz":-330,"elapsed":529642,"user":{"displayName":"Abhishek Keshari","photoUrl":"","userId":"08321311573619930656"}},"colab":{"base_uri":"https://localhost:8080/","height":933}},"source":["start = time.time()\n","params = xg1.get_params()\n","params['eval_metric'] = [\"auc\"]\n","del params['seed']\n","del params['nthread']\n","del params['silent']\n","#     'base_score': 0.5,\n","#     'booster': 'gbtree', 'colsample_bylevel': 1,\n","#               'colsample_bynode': 1, 'colsample_bytree': 1, 'gamma': 0,\n","#               'learning_rate': 0.1, 'max_delta_step': 0, 'max_depth': 3,\n","#               'min_child_weight': 1, 'n_estimators': 100, 'n_jobs': 1,\n","#               'objective': 'binary:logistic', 'random_state': 0,\n","#               'reg_alpha': 0, 'reg_lambda': 1, 'scale_pos_weight': 1, 'seed': 123,\n","#               'subsample': 1,'silent':True, 'verbosity': 3, 'eval_metric': [\"auc\",\"logloss\"]\n","# }\n","\n","dtrain = xgb.DMatrix(data=X_train,label=y_train)\n","dtest = xgb.DMatrix(data=X_test,label=y_test)\n","\n","xg2 =  xgb.train(\n","    params,\n","    dtrain,\n","    num_boost_round=999,\n","    evals=[(dtrain,\"Train\"),(dtest, \"Validation\")],\n","    early_stopping_rounds=50,verbose_eval=10,\n",")\n","print('Time taken:',time.time()-start)\n","print('Test AUC:',roc_auc_score(y_test, xg2.predict(X_test)))\n","print('Train AUC:',roc_auc_score(y_train, xg2.predict(X_train)))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["[0]\tTrain-auc:0.635722\tValidation-auc:0.6309\n","Multiple eval metrics have been passed: 'Validation-auc' will be used for early stopping.\n","\n","Will train until Validation-auc hasn't improved in 50 rounds.\n","[10]\tTrain-auc:0.654561\tValidation-auc:0.647411\n","[20]\tTrain-auc:0.659791\tValidation-auc:0.650072\n","[30]\tTrain-auc:0.668499\tValidation-auc:0.656929\n","[40]\tTrain-auc:0.676474\tValidation-auc:0.664319\n","[50]\tTrain-auc:0.683757\tValidation-auc:0.669421\n","[60]\tTrain-auc:0.689883\tValidation-auc:0.672688\n","[70]\tTrain-auc:0.694558\tValidation-auc:0.673887\n","[80]\tTrain-auc:0.698018\tValidation-auc:0.675463\n","[90]\tTrain-auc:0.701877\tValidation-auc:0.677207\n","[100]\tTrain-auc:0.70529\tValidation-auc:0.678498\n","[110]\tTrain-auc:0.708053\tValidation-auc:0.679182\n","[120]\tTrain-auc:0.710292\tValidation-auc:0.679486\n","[130]\tTrain-auc:0.712698\tValidation-auc:0.680366\n","[140]\tTrain-auc:0.715189\tValidation-auc:0.681114\n","[150]\tTrain-auc:0.717284\tValidation-auc:0.681334\n","[160]\tTrain-auc:0.719185\tValidation-auc:0.681424\n","[170]\tTrain-auc:0.721045\tValidation-auc:0.681778\n","[180]\tTrain-auc:0.722857\tValidation-auc:0.682074\n","[190]\tTrain-auc:0.724814\tValidation-auc:0.68254\n","[200]\tTrain-auc:0.726691\tValidation-auc:0.682986\n","[210]\tTrain-auc:0.728595\tValidation-auc:0.683017\n","[220]\tTrain-auc:0.730402\tValidation-auc:0.68327\n","[230]\tTrain-auc:0.73194\tValidation-auc:0.6833\n","[240]\tTrain-auc:0.734008\tValidation-auc:0.683639\n","[250]\tTrain-auc:0.735282\tValidation-auc:0.683651\n","[260]\tTrain-auc:0.736738\tValidation-auc:0.683988\n","[270]\tTrain-auc:0.737972\tValidation-auc:0.684206\n","[280]\tTrain-auc:0.738789\tValidation-auc:0.684044\n","[290]\tTrain-auc:0.740306\tValidation-auc:0.683957\n","[300]\tTrain-auc:0.741907\tValidation-auc:0.683908\n","[310]\tTrain-auc:0.743134\tValidation-auc:0.684032\n","[320]\tTrain-auc:0.744468\tValidation-auc:0.683998\n","Stopping. Best iteration:\n","[270]\tTrain-auc:0.737972\tValidation-auc:0.684206\n","\n","Time taken: 528.0244469642639\n"],"name":"stdout"},{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-15-4834ee1f8272>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     26\u001b[0m )\n\u001b[1;32m     27\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Time taken:'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0mstart\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 28\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Test AUC:'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mroc_auc_score\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mxgtrain\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     29\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Train AUC:'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mroc_auc_score\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mxgtrain\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'xgtrain' is not defined"]}]},{"cell_type":"code","metadata":{"id":"Uom2mM6J1d8U","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Qc1fQcRq1d3r","colab_type":"code","outputId":"f2d69d2e-cfb7-4a53-8463-282dc75b8289","colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["# Hyperparameters tuning\n","from hyperopt import STATUS_OK, Trials, fmin, hp, tpe\n","\n","# Some constants\n","\n","SEED = 123\n","VALID_SIZE = 0.2\n","TARGET = 'outcome'\n","\n","#-------------------------------------------------#\n","\n","# Scoring and optimization functions\n","\n","def score(params):\n","    print(\"Training with params: \")\n","    print(params)\n","    num_round = int(params['n_estimators'])\n","    del params['n_estimators']\n","    dtrain = xgb.DMatrix(X_train, label=y_train)\n","    dvalid = xgb.DMatrix(X_test, label=y_test)\n","    watchlist = [(dvalid, 'eval'), (dtrain, 'train')]\n","    gbm_model = xgb.train(params, dtrain, num_round,\n","                          evals=watchlist,\n","                          verbose_eval=50)\n","    predictions = gbm_model.predict(dvalid,\n","                                    ntree_limit=gbm_model.best_iteration + 1)\n","    score = roc_auc_score(y_test, predictions)\n","    # TODO: Add the importance for the selected features\n","    print(\"\\tScore {0}\\n\\n\".format(score))\n","    # The score function should return the loss (1-score)\n","    # since the optimize function looks for the minimum\n","    loss = 1 - score\n","    return {'loss': loss, 'status': STATUS_OK}\n","\n","\n","def optimize(\n","             #trials, \n","             random_state=SEED):\n","    \"\"\"\n","    This is the optimization function that given a space (space here) of \n","    hyperparameters and a scoring function (score here), finds the best hyperparameters.\n","    \"\"\"\n","    # To learn more about XGBoost parameters, head to this page: \n","    # https://github.com/dmlc/xgboost/blob/master/doc/parameter.md\n","    space = {\n","        'n_estimators': hp.quniform('n_estimators', 100, 1000, 1),\n","        'eta': hp.quniform('eta', 0.025, 0.5, 0.025),\n","        # A problem with max_depth casted to float instead of int with\n","        # the hp.quniform method.\n","        'max_depth':  hp.choice('max_depth', np.arange(1, 14, dtype=int)),\n","        'min_child_weight': hp.quniform('min_child_weight', 1, 6, 1),\n","        'subsample': hp.quniform('subsample', 0.5, 1, 0.05),\n","        'gamma': hp.quniform('gamma', 0.5, 1, 0.05),\n","        'colsample_bytree': hp.quniform('colsample_bytree', 0.5, 1, 0.05),\n","        \n","        # Increase this number if you have more cores. Otherwise, remove it and it will default \n","        # to the maxium number. \n","        'n_jobs': 4,\n","        'booster': 'gbtree',\n","        'eval_metric': 'auc',\n","        'objective': 'binary:logistic',\n","        'learning_rate': 0.1,\n","        'class_weight': 'balanced',\n","        'silent': 1,\n","        'seed': random_state\n","    }\n","    # Use the fmin function from Hyperopt to find the best hyperparameters\n","    best = fmin(score, space, algo=tpe.suggest, \n","                # trials=trials, \n","                max_evals=100)\n","    return best\n","\n","#-------------------------------------------------#\n","\n","best_hyperparams = optimize(\n","                            #trials\n","                            )\n","print(\"The best hyperparameters are: \", \"\\n\")\n","print(best_hyperparams)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Training with params: \n","{'booster': 'gbtree', 'class_weight': 'balanced', 'colsample_bytree': 0.8500000000000001, 'eta': 0.35000000000000003, 'eval_metric': 'auc', 'gamma': 0.55, 'learning_rate': 0.1, 'max_depth': 6, 'min_child_weight': 3.0, 'n_estimators': 813.0, 'n_jobs': 4, 'objective': 'binary:logistic', 'seed': 123, 'silent': 1, 'subsample': 1.0}\n","[0]\teval-auc:0.641004\ttrain-auc:0.653496\n","\n","[50]\teval-auc:0.67906\ttrain-auc:0.75371\n","\n","[100]\teval-auc:0.683446\ttrain-auc:0.79941\n","\n","[150]\teval-auc:0.682784\ttrain-auc:0.828546\n","\n","[200]\teval-auc:0.680301\ttrain-auc:0.849344\n","\n","[250]\teval-auc:0.678653\ttrain-auc:0.86728\n","\n","[300]\teval-auc:0.676443\ttrain-auc:0.886356\n","\n","[350]\teval-auc:0.674468\ttrain-auc:0.899799\n","\n","[400]\teval-auc:0.673725\ttrain-auc:0.911656\n","\n","[450]\teval-auc:0.672912\ttrain-auc:0.923072\n","\n","[500]\teval-auc:0.671039\ttrain-auc:0.93366\n","\n","[550]\teval-auc:0.668644\ttrain-auc:0.943211\n","\n","[600]\teval-auc:0.667221\ttrain-auc:0.952496\n","\n","[650]\teval-auc:0.665345\ttrain-auc:0.959815\n","\n","[700]\teval-auc:0.663816\ttrain-auc:0.964659\n","\n","[750]\teval-auc:0.661344\ttrain-auc:0.969862\n","\n","[800]\teval-auc:0.660445\ttrain-auc:0.973256\n","\n","[812]\teval-auc:0.66005\ttrain-auc:0.974528\n","\n","\tScore 0.6600497038642279\n","\n","\n","Training with params: \n","{'booster': 'gbtree', 'class_weight': 'balanced', 'colsample_bytree': 0.8, 'eta': 0.325, 'eval_metric': 'auc', 'gamma': 0.7000000000000001, 'learning_rate': 0.1, 'max_depth': 11, 'min_child_weight': 5.0, 'n_estimators': 724.0, 'n_jobs': 4, 'objective': 'binary:logistic', 'seed': 123, 'silent': 1, 'subsample': 0.75}\n","[0]\teval-auc:0.637293\ttrain-auc:0.674388\n","\n","[50]\teval-auc:0.673902\ttrain-auc:0.918568\n","\n","[100]\teval-auc:0.671132\ttrain-auc:0.969486\n","\n","[150]\teval-auc:0.664893\ttrain-auc:0.987897\n","\n","[200]\teval-auc:0.658638\ttrain-auc:0.995996\n","\n","[250]\teval-auc:0.654111\ttrain-auc:0.999099\n","\n","[300]\teval-auc:0.650823\ttrain-auc:0.999846\n","\n","[350]\teval-auc:0.649212\ttrain-auc:0.999976\n","\n","[400]\teval-auc:0.647789\ttrain-auc:0.999997\n","\n","[450]\teval-auc:0.646305\ttrain-auc:1\n","\n","[500]\teval-auc:0.645034\ttrain-auc:1\n","\n","[550]\teval-auc:0.645105\ttrain-auc:1\n","\n","[600]\teval-auc:0.644056\ttrain-auc:1\n","\n","[650]\teval-auc:0.645132\ttrain-auc:1\n","\n","[700]\teval-auc:0.644606\ttrain-auc:1\n","\n","[723]\teval-auc:0.644791\ttrain-auc:1\n","\n","\tScore 0.6447906675441731\n","\n","\n","Training with params: \n","{'booster': 'gbtree', 'class_weight': 'balanced', 'colsample_bytree': 0.75, 'eta': 0.07500000000000001, 'eval_metric': 'auc', 'gamma': 0.75, 'learning_rate': 0.1, 'max_depth': 5, 'min_child_weight': 5.0, 'n_estimators': 479.0, 'n_jobs': 4, 'objective': 'binary:logistic', 'seed': 123, 'silent': 1, 'subsample': 0.9}\n","[0]\teval-auc:0.6367\ttrain-auc:0.646874\n","\n","[50]\teval-auc:0.675837\ttrain-auc:0.721729\n","\n","[100]\teval-auc:0.681513\ttrain-auc:0.758559\n","\n","[150]\teval-auc:0.682074\ttrain-auc:0.781341\n","\n","[200]\teval-auc:0.681588\ttrain-auc:0.799705\n","\n","[250]\teval-auc:0.680095\ttrain-auc:0.815349\n","\n","[300]\teval-auc:0.678355\ttrain-auc:0.830873\n","\n","[350]\teval-auc:0.67735\ttrain-auc:0.845378\n","\n","[400]\teval-auc:0.675745\ttrain-auc:0.858175\n","\n","[450]\teval-auc:0.674967\ttrain-auc:0.868709\n","\n","[478]\teval-auc:0.673931\ttrain-auc:0.874483\n","\n","\tScore 0.6739309548416936\n","\n","\n","Training with params: \n","{'booster': 'gbtree', 'class_weight': 'balanced', 'colsample_bytree': 0.8500000000000001, 'eta': 0.42500000000000004, 'eval_metric': 'auc', 'gamma': 0.8, 'learning_rate': 0.1, 'max_depth': 12, 'min_child_weight': 3.0, 'n_estimators': 972.0, 'n_jobs': 4, 'objective': 'binary:logistic', 'seed': 123, 'silent': 1, 'subsample': 0.65}\n","[0]\teval-auc:0.631511\ttrain-auc:0.671662\n","\n","[50]\teval-auc:0.66693\ttrain-auc:0.949472\n","\n","[100]\teval-auc:0.662049\ttrain-auc:0.989852\n","\n","[150]\teval-auc:0.656029\ttrain-auc:0.998545\n","\n","[200]\teval-auc:0.649335\ttrain-auc:0.999851\n","\n","[250]\teval-auc:0.647026\ttrain-auc:0.999986\n","\n","[300]\teval-auc:0.64475\ttrain-auc:0.999999\n","\n","[350]\teval-auc:0.643107\ttrain-auc:1\n","\n","[400]\teval-auc:0.643162\ttrain-auc:1\n","\n","[450]\teval-auc:0.642112\ttrain-auc:1\n","\n","[500]\teval-auc:0.642214\ttrain-auc:1\n","\n","[550]\teval-auc:0.642544\ttrain-auc:1\n","\n","[600]\teval-auc:0.641848\ttrain-auc:1\n","\n","[650]\teval-auc:0.641758\ttrain-auc:1\n","\n","[700]\teval-auc:0.64202\ttrain-auc:1\n","\n","[750]\teval-auc:0.641865\ttrain-auc:1\n","\n","[800]\teval-auc:0.641833\ttrain-auc:1\n","\n","[850]\teval-auc:0.641743\ttrain-auc:1\n","\n","[900]\teval-auc:0.641649\ttrain-auc:1\n","\n","[950]\teval-auc:0.64145\ttrain-auc:1\n","\n","[971]\teval-auc:0.641383\ttrain-auc:1\n","\n","\tScore 0.6413830224293453\n","\n","\n","Training with params: \n","{'booster': 'gbtree', 'class_weight': 'balanced', 'colsample_bytree': 0.8500000000000001, 'eta': 0.05, 'eval_metric': 'auc', 'gamma': 0.8500000000000001, 'learning_rate': 0.1, 'max_depth': 10, 'min_child_weight': 5.0, 'n_estimators': 401.0, 'n_jobs': 4, 'objective': 'binary:logistic', 'seed': 123, 'silent': 1, 'subsample': 0.65}\n","[0]\teval-auc:0.636349\ttrain-auc:0.6689\n","\n","[50]\teval-auc:0.678007\ttrain-auc:0.884146\n","\n","[100]\teval-auc:0.674525\ttrain-auc:0.939604\n","\n","[150]\teval-auc:0.667228\ttrain-auc:0.970856\n","\n","[200]\teval-auc:0.662276\ttrain-auc:0.986656\n","\n","[250]\teval-auc:0.658037\ttrain-auc:0.994795\n","\n","[300]\teval-auc:0.652025\ttrain-auc:0.998322\n","\n","[350]\teval-auc:0.6487\ttrain-auc:0.999458\n","\n","[400]\teval-auc:0.647308\ttrain-auc:0.999843\n","\n","\tScore 0.6473084768506999\n","\n","\n","Training with params: \n","{'booster': 'gbtree', 'class_weight': 'balanced', 'colsample_bytree': 0.8500000000000001, 'eta': 0.17500000000000002, 'eval_metric': 'auc', 'gamma': 0.8, 'learning_rate': 0.1, 'max_depth': 2, 'min_child_weight': 6.0, 'n_estimators': 567.0, 'n_jobs': 4, 'objective': 'binary:logistic', 'seed': 123, 'silent': 1, 'subsample': 0.7000000000000001}\n","[0]\teval-auc:0.612505\ttrain-auc:0.616204\n","\n","[50]\teval-auc:0.6618\ttrain-auc:0.669897\n","\n","[100]\teval-auc:0.672407\ttrain-auc:0.686336\n","\n","[150]\teval-auc:0.677725\ttrain-auc:0.695783\n","\n","[200]\teval-auc:0.679857\ttrain-auc:0.701823\n","\n","[250]\teval-auc:0.681409\ttrain-auc:0.706847\n","\n","[300]\teval-auc:0.682486\ttrain-auc:0.711377\n","\n","[350]\teval-auc:0.683331\ttrain-auc:0.715269\n","\n","[400]\teval-auc:0.684002\ttrain-auc:0.718767\n","\n","[450]\teval-auc:0.684886\ttrain-auc:0.721894\n","\n","[500]\teval-auc:0.684953\ttrain-auc:0.724591\n","\n","[550]\teval-auc:0.68515\ttrain-auc:0.727302\n","\n","[566]\teval-auc:0.685295\ttrain-auc:0.728223\n","\n","\tScore 0.685294764226668\n","\n","\n","Training with params: \n","{'booster': 'gbtree', 'class_weight': 'balanced', 'colsample_bytree': 0.7000000000000001, 'eta': 0.125, 'eval_metric': 'auc', 'gamma': 0.75, 'learning_rate': 0.1, 'max_depth': 2, 'min_child_weight': 3.0, 'n_estimators': 754.0, 'n_jobs': 4, 'objective': 'binary:logistic', 'seed': 123, 'silent': 1, 'subsample': 0.75}\n","[0]\teval-auc:0.612505\ttrain-auc:0.616204\n","\n","[50]\teval-auc:0.661964\ttrain-auc:0.669383\n","\n","[100]\teval-auc:0.673375\ttrain-auc:0.686218\n","\n","[150]\teval-auc:0.677948\ttrain-auc:0.695176\n","\n","[200]\teval-auc:0.680622\ttrain-auc:0.701314\n","\n","[250]\teval-auc:0.682134\ttrain-auc:0.706266\n","\n","[300]\teval-auc:0.683626\ttrain-auc:0.710926\n","\n","[350]\teval-auc:0.6848\ttrain-auc:0.714803\n","\n","[400]\teval-auc:0.685626\ttrain-auc:0.718257\n","\n","[450]\teval-auc:0.68578\ttrain-auc:0.721313\n","\n","[500]\teval-auc:0.686006\ttrain-auc:0.724586\n","\n","[550]\teval-auc:0.686602\ttrain-auc:0.727485\n","\n","[600]\teval-auc:0.686765\ttrain-auc:0.73059\n","\n","[650]\teval-auc:0.687228\ttrain-auc:0.733295\n","\n","[700]\teval-auc:0.68677\ttrain-auc:0.735722\n","\n","[750]\teval-auc:0.686699\ttrain-auc:0.737977\n","\n","[753]\teval-auc:0.686652\ttrain-auc:0.738063\n","\n","\tScore 0.6866521673061056\n","\n","\n","Training with params: \n","{'booster': 'gbtree', 'class_weight': 'balanced', 'colsample_bytree': 0.7000000000000001, 'eta': 0.07500000000000001, 'eval_metric': 'auc', 'gamma': 0.6000000000000001, 'learning_rate': 0.1, 'max_depth': 7, 'min_child_weight': 5.0, 'n_estimators': 915.0, 'n_jobs': 4, 'objective': 'binary:logistic', 'seed': 123, 'silent': 1, 'subsample': 0.8500000000000001}\n","[0]\teval-auc:0.64263\ttrain-auc:0.661437\n","\n","[50]\teval-auc:0.681355\ttrain-auc:0.788032\n","\n","[100]\teval-auc:0.682054\ttrain-auc:0.837929\n","\n","[150]\teval-auc:0.67849\ttrain-auc:0.869528\n","\n","[200]\teval-auc:0.675151\ttrain-auc:0.892937\n","\n","[250]\teval-auc:0.673289\ttrain-auc:0.912721\n","\n","[300]\teval-auc:0.670247\ttrain-auc:0.932338\n","\n","[350]\teval-auc:0.668438\ttrain-auc:0.947015\n","\n","[400]\teval-auc:0.666823\ttrain-auc:0.958923\n","\n","[450]\teval-auc:0.663923\ttrain-auc:0.967207\n","\n","[500]\teval-auc:0.662202\ttrain-auc:0.975131\n","\n","[550]\teval-auc:0.660219\ttrain-auc:0.980958\n","\n","[600]\teval-auc:0.658271\ttrain-auc:0.985924\n","\n","[650]\teval-auc:0.655918\ttrain-auc:0.989821\n","\n","[700]\teval-auc:0.654045\ttrain-auc:0.992682\n","\n","[750]\teval-auc:0.652716\ttrain-auc:0.994553\n","\n","[800]\teval-auc:0.651035\ttrain-auc:0.996211\n","\n","[850]\teval-auc:0.650722\ttrain-auc:0.997505\n","\n","[900]\teval-auc:0.649375\ttrain-auc:0.998253\n","\n","[914]\teval-auc:0.648792\ttrain-auc:0.99846\n","\n","\tScore 0.6487915416577597\n","\n","\n","Training with params: \n","{'booster': 'gbtree', 'class_weight': 'balanced', 'colsample_bytree': 0.9, 'eta': 0.17500000000000002, 'eval_metric': 'auc', 'gamma': 1.0, 'learning_rate': 0.1, 'max_depth': 10, 'min_child_weight': 2.0, 'n_estimators': 327.0, 'n_jobs': 4, 'objective': 'binary:logistic', 'seed': 123, 'silent': 1, 'subsample': 0.9}\n","[0]\teval-auc:0.649656\ttrain-auc:0.674422\n","\n","[50]\teval-auc:0.673564\ttrain-auc:0.92755\n","\n","[100]\teval-auc:0.668829\ttrain-auc:0.973135\n","\n","[150]\teval-auc:0.664222\ttrain-auc:0.990135\n","\n","[200]\teval-auc:0.658918\ttrain-auc:0.996467\n","\n","[250]\teval-auc:0.65452\ttrain-auc:0.999161\n","\n","[300]\teval-auc:0.65236\ttrain-auc:0.999808\n","\n","[326]\teval-auc:0.651176\ttrain-auc:0.999921\n","\n","\tScore 0.651176037149531\n","\n","\n","Training with params: \n","{'booster': 'gbtree', 'class_weight': 'balanced', 'colsample_bytree': 1.0, 'eta': 0.35000000000000003, 'eval_metric': 'auc', 'gamma': 0.65, 'learning_rate': 0.1, 'max_depth': 1, 'min_child_weight': 4.0, 'n_estimators': 915.0, 'n_jobs': 4, 'objective': 'binary:logistic', 'seed': 123, 'silent': 1, 'subsample': 0.5}\n","[0]\teval-auc:0.563287\ttrain-auc:0.56618\n","\n","[50]\teval-auc:0.648369\ttrain-auc:0.652974\n","\n","[100]\teval-auc:0.660424\ttrain-auc:0.667344\n","\n","[150]\teval-auc:0.666748\ttrain-auc:0.674888\n","\n","[200]\teval-auc:0.670925\ttrain-auc:0.680263\n","\n","[250]\teval-auc:0.672702\ttrain-auc:0.683425\n","\n","[300]\teval-auc:0.674829\ttrain-auc:0.686435\n","\n","[350]\teval-auc:0.676534\ttrain-auc:0.688963\n","\n","[400]\teval-auc:0.677519\ttrain-auc:0.691034\n","\n","[450]\teval-auc:0.678588\ttrain-auc:0.692956\n","\n","[500]\teval-auc:0.679111\ttrain-auc:0.694542\n","\n","[550]\teval-auc:0.67944\ttrain-auc:0.695899\n","\n","[600]\teval-auc:0.679811\ttrain-auc:0.697191\n","\n","[650]\teval-auc:0.680308\ttrain-auc:0.698417\n","\n","[700]\teval-auc:0.68078\ttrain-auc:0.699327\n","\n","[750]\teval-auc:0.68092\ttrain-auc:0.700384\n","\n","[800]\teval-auc:0.68095\ttrain-auc:0.701564\n","\n","[850]\teval-auc:0.681162\ttrain-auc:0.70235\n","\n","[900]\teval-auc:0.681203\ttrain-auc:0.703273\n","\n","[914]\teval-auc:0.681191\ttrain-auc:0.703482\n","\n","\tScore 0.6811905834414018\n","\n","\n","Training with params: \n","{'booster': 'gbtree', 'class_weight': 'balanced', 'colsample_bytree': 0.8500000000000001, 'eta': 0.05, 'eval_metric': 'auc', 'gamma': 0.6000000000000001, 'learning_rate': 0.1, 'max_depth': 7, 'min_child_weight': 3.0, 'n_estimators': 504.0, 'n_jobs': 4, 'objective': 'binary:logistic', 'seed': 123, 'silent': 1, 'subsample': 0.6000000000000001}\n","[0]\teval-auc:0.636912\ttrain-auc:0.652492\n","\n","[50]\teval-auc:0.678225\ttrain-auc:0.782263\n","\n","[100]\teval-auc:0.675018\ttrain-auc:0.83644\n","\n","[150]\teval-auc:0.672489\ttrain-auc:0.876688\n","\n","[200]\teval-auc:0.668397\ttrain-auc:0.907429\n","\n","[250]\teval-auc:0.664617\ttrain-auc:0.9287\n","\n","[300]\teval-auc:0.660768\ttrain-auc:0.94612\n","\n","[350]\teval-auc:0.659\ttrain-auc:0.959083\n","\n","[400]\teval-auc:0.655739\ttrain-auc:0.969766\n","\n","[450]\teval-auc:0.652546\ttrain-auc:0.978158\n","\n","[500]\teval-auc:0.651767\ttrain-auc:0.984135\n","\n","[503]\teval-auc:0.651786\ttrain-auc:0.984451\n","\n","\tScore 0.6517860118175014\n","\n","\n","Training with params: \n","{'booster': 'gbtree', 'class_weight': 'balanced', 'colsample_bytree': 0.6000000000000001, 'eta': 0.375, 'eval_metric': 'auc', 'gamma': 1.0, 'learning_rate': 0.1, 'max_depth': 2, 'min_child_weight': 3.0, 'n_estimators': 564.0, 'n_jobs': 4, 'objective': 'binary:logistic', 'seed': 123, 'silent': 1, 'subsample': 0.55}\n","[0]\teval-auc:0.595115\ttrain-auc:0.600477\n","\n","[50]\teval-auc:0.66298\ttrain-auc:0.670631\n","\n","[100]\teval-auc:0.674482\ttrain-auc:0.68739\n","\n","[150]\teval-auc:0.678145\ttrain-auc:0.695712\n","\n","[200]\teval-auc:0.680978\ttrain-auc:0.701482\n","\n","[250]\teval-auc:0.682399\ttrain-auc:0.706065\n","\n","[300]\teval-auc:0.683425\ttrain-auc:0.711185\n","\n","[350]\teval-auc:0.684636\ttrain-auc:0.715167\n","\n","[400]\teval-auc:0.684101\ttrain-auc:0.718277\n","\n","[450]\teval-auc:0.684603\ttrain-auc:0.721444\n","\n","[500]\teval-auc:0.685165\ttrain-auc:0.724352\n","\n","[550]\teval-auc:0.686032\ttrain-auc:0.726978\n","\n","[563]\teval-auc:0.686022\ttrain-auc:0.727575\n","\n","\tScore 0.6860218089768313\n","\n","\n","Training with params: \n","{'booster': 'gbtree', 'class_weight': 'balanced', 'colsample_bytree': 0.8500000000000001, 'eta': 0.47500000000000003, 'eval_metric': 'auc', 'gamma': 0.6000000000000001, 'learning_rate': 0.1, 'max_depth': 11, 'min_child_weight': 5.0, 'n_estimators': 970.0, 'n_jobs': 4, 'objective': 'binary:logistic', 'seed': 123, 'silent': 1, 'subsample': 0.55}\n","[0]\teval-auc:0.636606\ttrain-auc:0.664137\n","\n","[50]\teval-auc:0.673667\ttrain-auc:0.890287\n","\n","[100]\teval-auc:0.669037\ttrain-auc:0.949441\n","\n","[150]\teval-auc:0.660755\ttrain-auc:0.97934\n","\n","[200]\teval-auc:0.655801\ttrain-auc:0.992611\n","\n","[250]\teval-auc:0.651037\ttrain-auc:0.997429\n","\n","[300]\teval-auc:0.648445\ttrain-auc:0.999332\n","\n","[350]\teval-auc:0.646928\ttrain-auc:0.999849\n","\n","[400]\teval-auc:0.644361\ttrain-auc:0.999977\n","\n","[450]\teval-auc:0.644226\ttrain-auc:0.999997\n","\n","[500]\teval-auc:0.642295\ttrain-auc:1\n","\n","[550]\teval-auc:0.641339\ttrain-auc:1\n","\n","[600]\teval-auc:0.640601\ttrain-auc:1\n","\n","[650]\teval-auc:0.641012\ttrain-auc:1\n","\n","[700]\teval-auc:0.641445\ttrain-auc:1\n","\n","[750]\teval-auc:0.641154\ttrain-auc:1\n","\n","[800]\teval-auc:0.640815\ttrain-auc:1\n","\n","[850]\teval-auc:0.640344\ttrain-auc:1\n","\n","[900]\teval-auc:0.640454\ttrain-auc:1\n","\n","[950]\teval-auc:0.639759\ttrain-auc:1\n","\n","[969]\teval-auc:0.640205\ttrain-auc:1\n","\n","\tScore 0.6402048359003972\n","\n","\n","Training with params: \n","{'booster': 'gbtree', 'class_weight': 'balanced', 'colsample_bytree': 0.55, 'eta': 0.42500000000000004, 'eval_metric': 'auc', 'gamma': 0.65, 'learning_rate': 0.1, 'max_depth': 1, 'min_child_weight': 4.0, 'n_estimators': 734.0, 'n_jobs': 4, 'objective': 'binary:logistic', 'seed': 123, 'silent': 1, 'subsample': 0.6000000000000001}\n","[0]\teval-auc:0.563287\ttrain-auc:0.56618\n","\n","[50]\teval-auc:0.650168\ttrain-auc:0.653387\n","\n","[100]\teval-auc:0.661782\ttrain-auc:0.667015\n","\n","[150]\teval-auc:0.667452\ttrain-auc:0.67416\n","\n","[200]\teval-auc:0.670922\ttrain-auc:0.679209\n","\n","[250]\teval-auc:0.673089\ttrain-auc:0.682954\n","\n","[300]\teval-auc:0.67467\ttrain-auc:0.685408\n","\n","[350]\teval-auc:0.676461\ttrain-auc:0.687862\n","\n","[400]\teval-auc:0.677149\ttrain-auc:0.689649\n","\n","[450]\teval-auc:0.678294\ttrain-auc:0.691702\n","\n","[500]\teval-auc:0.678917\ttrain-auc:0.693305\n","\n","[550]\teval-auc:0.679679\ttrain-auc:0.694655\n","\n","[600]\teval-auc:0.68005\ttrain-auc:0.695856\n","\n","[650]\teval-auc:0.680419\ttrain-auc:0.697034\n","\n","[700]\teval-auc:0.681119\ttrain-auc:0.698112\n","\n","[733]\teval-auc:0.681265\ttrain-auc:0.698966\n","\n","\tScore 0.6812649791213508\n","\n","\n","Training with params: \n","{'booster': 'gbtree', 'class_weight': 'balanced', 'colsample_bytree': 0.9, 'eta': 0.5, 'eval_metric': 'auc', 'gamma': 0.75, 'learning_rate': 0.1, 'max_depth': 12, 'min_child_weight': 5.0, 'n_estimators': 518.0, 'n_jobs': 4, 'objective': 'binary:logistic', 'seed': 123, 'silent': 1, 'subsample': 1.0}\n","[0]\teval-auc:0.644615\ttrain-auc:0.691881\n","\n","[50]\teval-auc:0.667946\ttrain-auc:0.962735\n","\n","[100]\teval-auc:0.668971\ttrain-auc:0.985603\n","\n","[150]\teval-auc:0.663049\ttrain-auc:0.994508\n","\n","[200]\teval-auc:0.659784\ttrain-auc:0.998152\n","\n","[250]\teval-auc:0.657026\ttrain-auc:0.999464\n","\n","[300]\teval-auc:0.655239\ttrain-auc:0.999878\n","\n","[350]\teval-auc:0.651325\ttrain-auc:0.99997\n","\n","[400]\teval-auc:0.649228\ttrain-auc:0.999993\n","\n","[450]\teval-auc:0.64722\ttrain-auc:0.999999\n","\n","[500]\teval-auc:0.645919\ttrain-auc:1\n","\n","[517]\teval-auc:0.645079\ttrain-auc:1\n","\n","\tScore 0.6450792587470031\n","\n","\n","Training with params: \n","{'booster': 'gbtree', 'class_weight': 'balanced', 'colsample_bytree': 0.7000000000000001, 'eta': 0.225, 'eval_metric': 'auc', 'gamma': 0.75, 'learning_rate': 0.1, 'max_depth': 2, 'min_child_weight': 3.0, 'n_estimators': 757.0, 'n_jobs': 4, 'objective': 'binary:logistic', 'seed': 123, 'silent': 1, 'subsample': 0.9500000000000001}\n","[0]\teval-auc:0.61315\ttrain-auc:0.616006\n","\n","[50]\teval-auc:0.661382\ttrain-auc:0.668716\n","\n","[100]\teval-auc:0.672485\ttrain-auc:0.685784\n","\n","[150]\teval-auc:0.677208\ttrain-auc:0.694658\n","\n","[200]\teval-auc:0.680015\ttrain-auc:0.701192\n","\n","[250]\teval-auc:0.681438\ttrain-auc:0.705725\n","\n","[300]\teval-auc:0.682557\ttrain-auc:0.709976\n","\n","[350]\teval-auc:0.682873\ttrain-auc:0.713673\n","\n","[400]\teval-auc:0.683085\ttrain-auc:0.716606\n","\n","[450]\teval-auc:0.683725\ttrain-auc:0.719753\n","\n","[500]\teval-auc:0.684592\ttrain-auc:0.722938\n","\n","[550]\teval-auc:0.684724\ttrain-auc:0.725909\n","\n","[600]\teval-auc:0.684957\ttrain-auc:0.728788\n","\n","[650]\teval-auc:0.684947\ttrain-auc:0.731083\n","\n","[700]\teval-auc:0.685024\ttrain-auc:0.733683\n","\n","[750]\teval-auc:0.685235\ttrain-auc:0.735752\n","\n","[756]\teval-auc:0.685227\ttrain-auc:0.73603\n","\n","\tScore 0.6852268489822868\n","\n","\n","Training with params: \n","{'booster': 'gbtree', 'class_weight': 'balanced', 'colsample_bytree': 0.65, 'eta': 0.25, 'eval_metric': 'auc', 'gamma': 0.7000000000000001, 'learning_rate': 0.1, 'max_depth': 10, 'min_child_weight': 5.0, 'n_estimators': 988.0, 'n_jobs': 4, 'objective': 'binary:logistic', 'seed': 123, 'silent': 1, 'subsample': 0.9}\n","[0]\teval-auc:0.643582\ttrain-auc:0.679423\n","\n","[50]\teval-auc:0.674103\ttrain-auc:0.903229\n","\n","[100]\teval-auc:0.671456\ttrain-auc:0.952518\n","\n","[150]\teval-auc:0.669682\ttrain-auc:0.972389\n","\n","[200]\teval-auc:0.664144\ttrain-auc:0.98608\n","\n","[250]\teval-auc:0.660457\ttrain-auc:0.993951\n","\n","[300]\teval-auc:0.65573\ttrain-auc:0.997773\n","\n","[350]\teval-auc:0.652644\ttrain-auc:0.999261\n","\n","[400]\teval-auc:0.650605\ttrain-auc:0.999734\n","\n","[450]\teval-auc:0.649101\ttrain-auc:0.999923\n","\n","[500]\teval-auc:0.648263\ttrain-auc:0.999982\n","\n","[550]\teval-auc:0.646722\ttrain-auc:0.999997\n","\n","[600]\teval-auc:0.645821\ttrain-auc:0.999999\n","\n","[650]\teval-auc:0.645015\ttrain-auc:1\n","\n","[700]\teval-auc:0.644911\ttrain-auc:1\n","\n","[750]\teval-auc:0.644048\ttrain-auc:1\n","\n","[800]\teval-auc:0.643517\ttrain-auc:1\n","\n","[850]\teval-auc:0.643056\ttrain-auc:1\n","\n","[900]\teval-auc:0.643497\ttrain-auc:1\n","\n","[950]\teval-auc:0.643794\ttrain-auc:1\n","\n","[987]\teval-auc:0.643453\ttrain-auc:1\n","\n","\tScore 0.6434534677644022\n","\n","\n","Training with params: \n","{'booster': 'gbtree', 'class_weight': 'balanced', 'colsample_bytree': 0.6000000000000001, 'eta': 0.2, 'eval_metric': 'auc', 'gamma': 0.55, 'learning_rate': 0.1, 'max_depth': 5, 'min_child_weight': 3.0, 'n_estimators': 417.0, 'n_jobs': 4, 'objective': 'binary:logistic', 'seed': 123, 'silent': 1, 'subsample': 0.55}\n","[0]\teval-auc:0.63095\ttrain-auc:0.642108\n","\n","[50]\teval-auc:0.678171\ttrain-auc:0.720277\n","\n","[100]\teval-auc:0.68209\ttrain-auc:0.754418\n","\n","[150]\teval-auc:0.681872\ttrain-auc:0.77879\n","\n","[200]\teval-auc:0.680619\ttrain-auc:0.799166\n","\n","[250]\teval-auc:0.679051\ttrain-auc:0.81522\n","\n","[300]\teval-auc:0.678679\ttrain-auc:0.832049\n","\n","[350]\teval-auc:0.677612\ttrain-auc:0.845037\n","\n","[400]\teval-auc:0.676121\ttrain-auc:0.857403\n","\n","[416]\teval-auc:0.675651\ttrain-auc:0.860904\n","\n","\tScore 0.6756511043217274\n","\n","\n","Training with params: \n","{'booster': 'gbtree', 'class_weight': 'balanced', 'colsample_bytree': 0.9, 'eta': 0.375, 'eval_metric': 'auc', 'gamma': 0.8, 'learning_rate': 0.1, 'max_depth': 8, 'min_child_weight': 2.0, 'n_estimators': 414.0, 'n_jobs': 4, 'objective': 'binary:logistic', 'seed': 123, 'silent': 1, 'subsample': 0.65}\n","[0]\teval-auc:0.645665\ttrain-auc:0.663285\n","\n","[50]\teval-auc:0.677832\ttrain-auc:0.83094\n","\n","[100]\teval-auc:0.675759\ttrain-auc:0.892779\n","\n","[150]\teval-auc:0.672397\ttrain-auc:0.930763\n","\n","[200]\teval-auc:0.666328\ttrain-auc:0.958043\n","\n","[250]\teval-auc:0.662214\ttrain-auc:0.974282\n","\n","[300]\teval-auc:0.657198\ttrain-auc:0.985569\n","\n","[350]\teval-auc:0.654632\ttrain-auc:0.992189\n","\n","[400]\teval-auc:0.652397\ttrain-auc:0.996042\n","\n","[413]\teval-auc:0.651593\ttrain-auc:0.996624\n","\n","\tScore 0.6515933981723818\n","\n","\n","Training with params: \n","{'booster': 'gbtree', 'class_weight': 'balanced', 'colsample_bytree': 0.65, 'eta': 0.025, 'eval_metric': 'auc', 'gamma': 0.9, 'learning_rate': 0.1, 'max_depth': 3, 'min_child_weight': 1.0, 'n_estimators': 686.0, 'n_jobs': 4, 'objective': 'binary:logistic', 'seed': 123, 'silent': 1, 'subsample': 0.8}\n","[0]\teval-auc:0.620839\ttrain-auc:0.629065\n","\n","[50]\teval-auc:0.669114\ttrain-auc:0.683279\n","\n","[100]\teval-auc:0.678399\ttrain-auc:0.704167\n","\n","[150]\teval-auc:0.681785\ttrain-auc:0.71687\n","\n","[200]\teval-auc:0.682922\ttrain-auc:0.725911\n","\n","[250]\teval-auc:0.68389\ttrain-auc:0.734504\n","\n","[300]\teval-auc:0.684382\ttrain-auc:0.742244\n","\n","[350]\teval-auc:0.68597\ttrain-auc:0.749728\n","\n","[400]\teval-auc:0.686376\ttrain-auc:0.756063\n","\n","[450]\teval-auc:0.686255\ttrain-auc:0.762198\n","\n","[500]\teval-auc:0.686158\ttrain-auc:0.767823\n","\n","[550]\teval-auc:0.685734\ttrain-auc:0.772448\n","\n","[600]\teval-auc:0.685634\ttrain-auc:0.7782\n","\n","[650]\teval-auc:0.685299\ttrain-auc:0.783346\n","\n","[685]\teval-auc:0.685092\ttrain-auc:0.786135\n","\n","\tScore 0.6850922418767222\n","\n","\n","Training with params: \n","{'booster': 'gbtree', 'class_weight': 'balanced', 'colsample_bytree': 0.5, 'eta': 0.125, 'eval_metric': 'auc', 'gamma': 1.0, 'learning_rate': 0.1, 'max_depth': 2, 'min_child_weight': 2.0, 'n_estimators': 612.0, 'n_jobs': 4, 'objective': 'binary:logistic', 'seed': 123, 'silent': 1, 'subsample': 0.75}\n","[0]\teval-auc:0.612505\ttrain-auc:0.616204\n","\n","[50]\teval-auc:0.661219\ttrain-auc:0.669008\n","\n","[100]\teval-auc:0.673155\ttrain-auc:0.686737\n","\n","[150]\teval-auc:0.678007\ttrain-auc:0.695413\n","\n","[200]\teval-auc:0.679931\ttrain-auc:0.701379\n","\n","[250]\teval-auc:0.681604\ttrain-auc:0.70635\n","\n","[300]\teval-auc:0.682599\ttrain-auc:0.710568\n","\n","[350]\teval-auc:0.683127\ttrain-auc:0.714526\n","\n","[400]\teval-auc:0.683748\ttrain-auc:0.717993\n","\n","[450]\teval-auc:0.684093\ttrain-auc:0.721287\n","\n","[500]\teval-auc:0.684607\ttrain-auc:0.72426\n","\n","[550]\teval-auc:0.685004\ttrain-auc:0.727605\n","\n","[600]\teval-auc:0.685078\ttrain-auc:0.730588\n","\n","[611]\teval-auc:0.685228\ttrain-auc:0.731238\n","\n","\tScore 0.6852284051257144\n","\n","\n","Training with params: \n","{'booster': 'gbtree', 'class_weight': 'balanced', 'colsample_bytree': 0.5, 'eta': 0.30000000000000004, 'eval_metric': 'auc', 'gamma': 0.9500000000000001, 'learning_rate': 0.1, 'max_depth': 13, 'min_child_weight': 4.0, 'n_estimators': 628.0, 'n_jobs': 4, 'objective': 'binary:logistic', 'seed': 123, 'silent': 1, 'subsample': 0.8}\n","[0]\teval-auc:0.630032\ttrain-auc:0.67912\n","\n","[50]\teval-auc:0.66844\ttrain-auc:0.964939\n","\n","[100]\teval-auc:0.663263\ttrain-auc:0.994039\n","\n","[150]\teval-auc:0.657923\ttrain-auc:0.998914\n","\n","[200]\teval-auc:0.65414\ttrain-auc:0.99992\n","\n","[250]\teval-auc:0.651791\ttrain-auc:0.999995\n","\n","[300]\teval-auc:0.651482\ttrain-auc:1\n","\n","[350]\teval-auc:0.650465\ttrain-auc:1\n","\n","[400]\teval-auc:0.649963\ttrain-auc:1\n","\n","[450]\teval-auc:0.650122\ttrain-auc:1\n","\n","[500]\teval-auc:0.649375\ttrain-auc:1\n","\n","[550]\teval-auc:0.649407\ttrain-auc:1\n","\n","[600]\teval-auc:0.649032\ttrain-auc:1\n","\n","[627]\teval-auc:0.649018\ttrain-auc:1\n","\n","\tScore 0.6490182883931741\n","\n","\n","Training with params: \n","{'booster': 'gbtree', 'class_weight': 'balanced', 'colsample_bytree': 0.6000000000000001, 'eta': 0.275, 'eval_metric': 'auc', 'gamma': 0.9, 'learning_rate': 0.1, 'max_depth': 4, 'min_child_weight': 1.0, 'n_estimators': 828.0, 'n_jobs': 4, 'objective': 'binary:logistic', 'seed': 123, 'silent': 1, 'subsample': 0.8}\n","[0]\teval-auc:0.628622\ttrain-auc:0.638665\n","\n","[50]\teval-auc:0.673094\ttrain-auc:0.698577\n","\n","[100]\teval-auc:0.680544\ttrain-auc:0.726829\n","\n","[150]\teval-auc:0.68371\ttrain-auc:0.745693\n","\n","[200]\teval-auc:0.684541\ttrain-auc:0.761415\n","\n","[250]\teval-auc:0.684545\ttrain-auc:0.774044\n","\n","[300]\teval-auc:0.684607\ttrain-auc:0.785882\n","\n","[350]\teval-auc:0.684545\ttrain-auc:0.79663\n","\n","[400]\teval-auc:0.68393\ttrain-auc:0.806961\n","\n","[450]\teval-auc:0.682816\ttrain-auc:0.815516\n","\n","[500]\teval-auc:0.682028\ttrain-auc:0.825129\n","\n","[550]\teval-auc:0.681488\ttrain-auc:0.833489\n","\n","[600]\teval-auc:0.680113\ttrain-auc:0.842321\n","\n","[650]\teval-auc:0.679848\ttrain-auc:0.850003\n","\n","[700]\teval-auc:0.679284\ttrain-auc:0.85695\n","\n","[750]\teval-auc:0.678606\ttrain-auc:0.863196\n","\n","[800]\teval-auc:0.677568\ttrain-auc:0.86924\n","\n","[827]\teval-auc:0.677332\ttrain-auc:0.873149\n","\n","\tScore 0.6773315406859319\n","\n","\n","Training with params: \n","{'booster': 'gbtree', 'class_weight': 'balanced', 'colsample_bytree': 0.55, 'eta': 0.125, 'eval_metric': 'auc', 'gamma': 0.5, 'learning_rate': 0.1, 'max_depth': 2, 'min_child_weight': 2.0, 'n_estimators': 147.0, 'n_jobs': 4, 'objective': 'binary:logistic', 'seed': 123, 'silent': 1, 'subsample': 0.7000000000000001}\n","[0]\teval-auc:0.612505\ttrain-auc:0.616204\n","\n","[50]\teval-auc:0.661435\ttrain-auc:0.669414\n","\n","[100]\teval-auc:0.67288\ttrain-auc:0.686126\n","\n","[146]\teval-auc:0.67739\ttrain-auc:0.694491\n","\n","\tScore 0.6773901414401831\n","\n","\n","Training with params: \n","{'booster': 'gbtree', 'class_weight': 'balanced', 'colsample_bytree': 0.75, 'eta': 0.42500000000000004, 'eval_metric': 'auc', 'gamma': 0.9500000000000001, 'learning_rate': 0.1, 'max_depth': 9, 'min_child_weight': 4.0, 'n_estimators': 197.0, 'n_jobs': 4, 'objective': 'binary:logistic', 'seed': 123, 'silent': 1, 'subsample': 0.7000000000000001}\n","[0]\teval-auc:0.631584\ttrain-auc:0.66072\n","\n","[50]\teval-auc:0.677125\ttrain-auc:0.855935\n","\n","[100]\teval-auc:0.673146\ttrain-auc:0.914483\n","\n","[150]\teval-auc:0.668261\ttrain-auc:0.951767\n","\n","[196]\teval-auc:0.663344\ttrain-auc:0.970509\n","\n","\tScore 0.6633444537794096\n","\n","\n","Training with params: \n","{'booster': 'gbtree', 'class_weight': 'balanced', 'colsample_bytree': 0.65, 'eta': 0.125, 'eval_metric': 'auc', 'gamma': 0.8500000000000001, 'learning_rate': 0.1, 'max_depth': 2, 'min_child_weight': 2.0, 'n_estimators': 317.0, 'n_jobs': 4, 'objective': 'binary:logistic', 'seed': 123, 'silent': 1, 'subsample': 0.55}\n","[0]\teval-auc:0.595115\ttrain-auc:0.600477\n","\n","[50]\teval-auc:0.663362\ttrain-auc:0.670372\n","\n","[100]\teval-auc:0.674783\ttrain-auc:0.686966\n","\n","[150]\teval-auc:0.678532\ttrain-auc:0.695235\n","\n","[200]\teval-auc:0.681123\ttrain-auc:0.701401\n","\n","[250]\teval-auc:0.68242\ttrain-auc:0.706224\n","\n","[300]\teval-auc:0.683432\ttrain-auc:0.711337\n","\n","[316]\teval-auc:0.683956\ttrain-auc:0.71257\n","\n","\tScore 0.6839559649607505\n","\n","\n","Training with params: \n","{'booster': 'gbtree', 'class_weight': 'balanced', 'colsample_bytree': 0.7000000000000001, 'eta': 0.4, 'eval_metric': 'auc', 'gamma': 0.9, 'learning_rate': 0.1, 'max_depth': 2, 'min_child_weight': 1.0, 'n_estimators': 649.0, 'n_jobs': 4, 'objective': 'binary:logistic', 'seed': 123, 'silent': 1, 'subsample': 0.8500000000000001}\n","[0]\teval-auc:0.612713\ttrain-auc:0.614956\n","\n","[50]\teval-auc:0.663029\ttrain-auc:0.670328\n","\n","[100]\teval-auc:0.673939\ttrain-auc:0.687146\n","\n","[150]\teval-auc:0.677945\ttrain-auc:0.695441\n","\n","[200]\teval-auc:0.680016\ttrain-auc:0.701289\n","\n","[250]\teval-auc:0.681658\ttrain-auc:0.706458\n","\n","[300]\teval-auc:0.682973\ttrain-auc:0.710814\n","\n","[350]\teval-auc:0.684366\ttrain-auc:0.714731\n","\n","[400]\teval-auc:0.684953\ttrain-auc:0.718251\n","\n","[450]\teval-auc:0.685137\ttrain-auc:0.721112\n","\n","[500]\teval-auc:0.684964\ttrain-auc:0.724292\n","\n","[550]\teval-auc:0.684853\ttrain-auc:0.727205\n","\n","[600]\teval-auc:0.684795\ttrain-auc:0.729838\n","\n","[648]\teval-auc:0.685478\ttrain-auc:0.732213\n","\n","\tScore 0.6854782437432947\n","\n","\n","Training with params: \n","{'booster': 'gbtree', 'class_weight': 'balanced', 'colsample_bytree': 0.6000000000000001, 'eta': 0.47500000000000003, 'eval_metric': 'auc', 'gamma': 0.9500000000000001, 'learning_rate': 0.1, 'max_depth': 6, 'min_child_weight': 3.0, 'n_estimators': 871.0, 'n_jobs': 4, 'objective': 'binary:logistic', 'seed': 123, 'silent': 1, 'subsample': 0.5}\n","[0]\teval-auc:0.630016\ttrain-auc:0.641704\n","\n","[50]\teval-auc:0.677106\ttrain-auc:0.743273\n","\n","[100]\teval-auc:0.678502\ttrain-auc:0.787288\n","\n","[150]\teval-auc:0.675849\ttrain-auc:0.820999\n","\n","[200]\teval-auc:0.673569\ttrain-auc:0.845277\n","\n","[250]\teval-auc:0.671871\ttrain-auc:0.86579\n","\n","[300]\teval-auc:0.668213\ttrain-auc:0.88506\n","\n","[350]\teval-auc:0.667024\ttrain-auc:0.898994\n","\n","[400]\teval-auc:0.664173\ttrain-auc:0.912502\n","\n","[450]\teval-auc:0.662272\ttrain-auc:0.924604\n","\n","[500]\teval-auc:0.659899\ttrain-auc:0.935359\n","\n","[550]\teval-auc:0.658278\ttrain-auc:0.944117\n","\n","[600]\teval-auc:0.657164\ttrain-auc:0.952559\n","\n","[650]\teval-auc:0.655266\ttrain-auc:0.958981\n","\n","[700]\teval-auc:0.65341\ttrain-auc:0.964845\n","\n","[750]\teval-auc:0.652041\ttrain-auc:0.970073\n","\n","[800]\teval-auc:0.649544\ttrain-auc:0.97461\n","\n","[850]\teval-auc:0.648808\ttrain-auc:0.978637\n","\n","[870]\teval-auc:0.648249\ttrain-auc:0.980022\n","\n","\tScore 0.6482488083247975\n","\n","\n","Training with params: \n","{'booster': 'gbtree', 'class_weight': 'balanced', 'colsample_bytree': 0.55, 'eta': 0.325, 'eval_metric': 'auc', 'gamma': 0.8500000000000001, 'learning_rate': 0.1, 'max_depth': 9, 'min_child_weight': 4.0, 'n_estimators': 775.0, 'n_jobs': 4, 'objective': 'binary:logistic', 'seed': 123, 'silent': 1, 'subsample': 0.6000000000000001}\n","[0]\teval-auc:0.630486\ttrain-auc:0.656193\n","\n","[50]\teval-auc:0.677554\ttrain-auc:0.84469\n","\n","[100]\teval-auc:0.672366\ttrain-auc:0.908456\n","\n","[150]\teval-auc:0.668984\ttrain-auc:0.945281\n","\n","[200]\teval-auc:0.664405\ttrain-auc:0.967725\n","\n","[250]\teval-auc:0.658772\ttrain-auc:0.982325\n","\n","[300]\teval-auc:0.653618\ttrain-auc:0.990311\n","\n","[350]\teval-auc:0.649817\ttrain-auc:0.994961\n","\n","[400]\teval-auc:0.64823\ttrain-auc:0.997626\n","\n","[450]\teval-auc:0.646604\ttrain-auc:0.998952\n","\n","[500]\teval-auc:0.644947\ttrain-auc:0.999576\n","\n","[550]\teval-auc:0.643827\ttrain-auc:0.99982\n","\n","[600]\teval-auc:0.642897\ttrain-auc:0.999941\n","\n","[650]\teval-auc:0.642063\ttrain-auc:0.999984\n","\n","[700]\teval-auc:0.641664\ttrain-auc:0.999997\n","\n","[750]\teval-auc:0.641556\ttrain-auc:1\n","\n","[774]\teval-auc:0.640938\ttrain-auc:1\n","\n","\tScore 0.640937653621102\n","\n","\n","Training with params: \n","{'booster': 'gbtree', 'class_weight': 'balanced', 'colsample_bytree': 0.8, 'eta': 0.275, 'eval_metric': 'auc', 'gamma': 0.5, 'learning_rate': 0.1, 'max_depth': 13, 'min_child_weight': 2.0, 'n_estimators': 577.0, 'n_jobs': 4, 'objective': 'binary:logistic', 'seed': 123, 'silent': 1, 'subsample': 0.75}\n","[0]\teval-auc:0.632283\ttrain-auc:0.676831\n","\n","[50]\teval-auc:0.663916\ttrain-auc:0.984536\n","\n","[100]\teval-auc:0.658879\ttrain-auc:0.998599\n","\n","[150]\teval-auc:0.652295\ttrain-auc:0.999966\n","\n","[200]\teval-auc:0.650617\ttrain-auc:1\n","\n","[250]\teval-auc:0.650928\ttrain-auc:1\n","\n","[300]\teval-auc:0.649251\ttrain-auc:1\n","\n","[350]\teval-auc:0.648702\ttrain-auc:1\n","\n","[400]\teval-auc:0.648971\ttrain-auc:1\n","\n","[450]\teval-auc:0.64844\ttrain-auc:1\n","\n","[500]\teval-auc:0.648674\ttrain-auc:1\n","\n","[550]\teval-auc:0.648482\ttrain-auc:1\n","\n","[576]\teval-auc:0.648377\ttrain-auc:1\n","\n","\tScore 0.6483774187554644\n","\n","\n","Training with params: \n","{'booster': 'gbtree', 'class_weight': 'balanced', 'colsample_bytree': 0.7000000000000001, 'eta': 0.35000000000000003, 'eval_metric': 'auc', 'gamma': 0.7000000000000001, 'learning_rate': 0.1, 'max_depth': 3, 'min_child_weight': 3.0, 'n_estimators': 820.0, 'n_jobs': 4, 'objective': 'binary:logistic', 'seed': 123, 'silent': 1, 'subsample': 0.7000000000000001}\n","[0]\teval-auc:0.620697\ttrain-auc:0.629807\n","\n","[50]\teval-auc:0.668699\ttrain-auc:0.683358\n","\n","[100]\teval-auc:0.678104\ttrain-auc:0.703213\n","\n","[150]\teval-auc:0.683006\ttrain-auc:0.717179\n","\n","[200]\teval-auc:0.684389\ttrain-auc:0.726578\n","\n","[250]\teval-auc:0.685737\ttrain-auc:0.734637\n","\n","[300]\teval-auc:0.685494\ttrain-auc:0.742176\n","\n","[350]\teval-auc:0.685503\ttrain-auc:0.749473\n","\n","[400]\teval-auc:0.685238\ttrain-auc:0.755657\n","\n","[450]\teval-auc:0.685022\ttrain-auc:0.761685\n","\n","[500]\teval-auc:0.684891\ttrain-auc:0.766889\n","\n","[550]\teval-auc:0.684874\ttrain-auc:0.772095\n","\n","[600]\teval-auc:0.684631\ttrain-auc:0.776918\n","\n","[650]\teval-auc:0.683942\ttrain-auc:0.781844\n","\n","[700]\teval-auc:0.683223\ttrain-auc:0.786424\n","\n","[750]\teval-auc:0.682847\ttrain-auc:0.791168\n","\n","[800]\teval-auc:0.682481\ttrain-auc:0.795649\n","\n","[819]\teval-auc:0.682507\ttrain-auc:0.796805\n","\n","\tScore 0.6825068640675664\n","\n","\n","Training with params: \n","{'booster': 'gbtree', 'class_weight': 'balanced', 'colsample_bytree': 0.8, 'eta': 0.225, 'eval_metric': 'auc', 'gamma': 0.55, 'learning_rate': 0.1, 'max_depth': 4, 'min_child_weight': 6.0, 'n_estimators': 690.0, 'n_jobs': 4, 'objective': 'binary:logistic', 'seed': 123, 'silent': 1, 'subsample': 0.8500000000000001}\n","[0]\teval-auc:0.634165\ttrain-auc:0.638887\n","\n","[50]\teval-auc:0.674085\ttrain-auc:0.700226\n","\n","[100]\teval-auc:0.682269\ttrain-auc:0.727216\n","\n","[150]\teval-auc:0.684407\ttrain-auc:0.743634\n","\n","[200]\teval-auc:0.68468\ttrain-auc:0.757126\n","\n","[250]\teval-auc:0.684846\ttrain-auc:0.769379\n","\n","[300]\teval-auc:0.685048\ttrain-auc:0.780307\n","\n","[350]\teval-auc:0.685055\ttrain-auc:0.790628\n","\n","[400]\teval-auc:0.683972\ttrain-auc:0.80027\n","\n","[450]\teval-auc:0.682497\ttrain-auc:0.808552\n","\n","[500]\teval-auc:0.682011\ttrain-auc:0.8163\n","\n","[550]\teval-auc:0.681293\ttrain-auc:0.824042\n","\n","[600]\teval-auc:0.680181\ttrain-auc:0.831991\n","\n","[650]\teval-auc:0.678852\ttrain-auc:0.839113\n","\n","[689]\teval-auc:0.678116\ttrain-auc:0.844259\n","\n","\tScore 0.6781158369734481\n","\n","\n","Training with params: \n","{'booster': 'gbtree', 'class_weight': 'balanced', 'colsample_bytree': 0.75, 'eta': 0.15000000000000002, 'eval_metric': 'auc', 'gamma': 0.7000000000000001, 'learning_rate': 0.1, 'max_depth': 8, 'min_child_weight': 3.0, 'n_estimators': 301.0, 'n_jobs': 4, 'objective': 'binary:logistic', 'seed': 123, 'silent': 1, 'subsample': 0.75}\n","[0]\teval-auc:0.638217\ttrain-auc:0.660305\n","\n","[50]\teval-auc:0.675789\ttrain-auc:0.82873\n","\n","[100]\teval-auc:0.678109\ttrain-auc:0.884555\n","\n","[150]\teval-auc:0.675298\ttrain-auc:0.919927\n","\n","[200]\teval-auc:0.672692\ttrain-auc:0.946614\n","\n","[250]\teval-auc:0.669673\ttrain-auc:0.965122\n","\n","[300]\teval-auc:0.665982\ttrain-auc:0.978213\n","\n","\tScore 0.6659820330000781\n","\n","\n","Training with params: \n","{'booster': 'gbtree', 'class_weight': 'balanced', 'colsample_bytree': 0.65, 'eta': 0.30000000000000004, 'eval_metric': 'auc', 'gamma': 0.65, 'learning_rate': 0.1, 'max_depth': 6, 'min_child_weight': 4.0, 'n_estimators': 477.0, 'n_jobs': 4, 'objective': 'binary:logistic', 'seed': 123, 'silent': 1, 'subsample': 0.65}\n","[0]\teval-auc:0.629723\ttrain-auc:0.646158\n","\n","[50]\teval-auc:0.678587\ttrain-auc:0.748432\n","\n","[100]\teval-auc:0.681146\ttrain-auc:0.790521\n","\n","[150]\teval-auc:0.679309\ttrain-auc:0.822258\n","\n","[200]\teval-auc:0.677113\ttrain-auc:0.847069\n","\n","[250]\teval-auc:0.675213\ttrain-auc:0.867758\n","\n","[300]\teval-auc:0.673799\ttrain-auc:0.886615\n","\n","[350]\teval-auc:0.670518\ttrain-auc:0.901711\n","\n","[400]\teval-auc:0.669301\ttrain-auc:0.914131\n","\n","[450]\teval-auc:0.667637\ttrain-auc:0.925857\n","\n","[476]\teval-auc:0.66588\ttrain-auc:0.93169\n","\n","\tScore 0.6658804376667231\n","\n","\n","Training with params: \n","{'booster': 'gbtree', 'class_weight': 'balanced', 'colsample_bytree': 0.6000000000000001, 'eta': 0.1, 'eval_metric': 'auc', 'gamma': 0.8, 'learning_rate': 0.1, 'max_depth': 11, 'min_child_weight': 2.0, 'n_estimators': 679.0, 'n_jobs': 4, 'objective': 'binary:logistic', 'seed': 123, 'silent': 1, 'subsample': 0.8}\n","[0]\teval-auc:0.6382\ttrain-auc:0.673236\n","\n","[50]\teval-auc:0.672754\ttrain-auc:0.949155\n","\n","[100]\teval-auc:0.665188\ttrain-auc:0.986938\n","\n","[150]\teval-auc:0.660839\ttrain-auc:0.99675\n","\n","[200]\teval-auc:0.657532\ttrain-auc:0.999548\n","\n","[250]\teval-auc:0.65302\ttrain-auc:0.999961\n","\n","[300]\teval-auc:0.650091\ttrain-auc:0.999998\n","\n","[350]\teval-auc:0.649035\ttrain-auc:1\n","\n","[400]\teval-auc:0.648058\ttrain-auc:1\n","\n"," 34%|███▍      | 34/100 [6:53:26<10:21:43, 565.21s/it, best loss: 0.31334783269389443]"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"XRUiTBPB1dzH","colab_type":"code","outputId":"2da8d37f-7ea1-4136-ca5b-f66543233cd6","colab":{"base_uri":"https://localhost:8080/"}},"source":["# Hyperparameters tuning\n","from hyperopt import STATUS_OK, Trials, fmin, hp, tpe\n","\n","# Some constants\n","\n","SEED = 123\n","VALID_SIZE = 0.2\n","TARGET = 'outcome'\n","\n","#-------------------------------------------------#\n","\n","# Scoring and optimization functions\n","\n","def score(params):\n","    print(\"Training with params: \")\n","    print(params)\n","    num_round = int(params['n_estimators'])\n","    del params['n_estimators']\n","    dtrain = xgb.DMatrix(X_train, label=y_train)\n","    dvalid = xgb.DMatrix(X_test, label=y_test)\n","    watchlist = [(dvalid, 'eval'), (dtrain, 'train')]\n","    gbm_model = xgb.train(params, dtrain, num_round,\n","                          evals=watchlist,\n","                          verbose_eval=50)\n","    predictions = gbm_model.predict(dvalid,\n","                                    ntree_limit=gbm_model.best_iteration + 1)\n","    score = roc_auc_score(y_test, predictions)\n","    # TODO: Add the importance for the selected features\n","    print(\"\\tScore {0}\\n\\n\".format(score))\n","    # The score function should return the loss (1-score)\n","    # since the optimize function looks for the minimum\n","    loss = 1 - score\n","    return {'loss': loss, 'status': STATUS_OK}\n","\n","\n","def optimize(\n","             #trials, \n","             random_state=SEED):\n","    \"\"\"\n","    This is the optimization function that given a space (space here) of \n","    hyperparameters and a scoring function (score here), finds the best hyperparameters.\n","    \"\"\"\n","    # To learn more about XGBoost parameters, head to this page: \n","    # https://github.com/dmlc/xgboost/blob/master/doc/parameter.md\n","    space = {\n","        'n_estimators': hp.quniform('n_estimators', 100, 1000, 1),\n","        'eta': hp.quniform('eta', 0.025, 0.5, 0.025),\n","        # A problem with max_depth casted to float instead of int with\n","        # the hp.quniform method.\n","        'max_depth':  hp.choice('max_depth', np.arange(1, 14, dtype=int)),\n","        'min_child_weight': hp.quniform('min_child_weight', 1, 6, 1),\n","        'subsample': hp.quniform('subsample', 0.5, 1, 0.05),\n","        'gamma': hp.quniform('gamma', 0.5, 1, 0.05),\n","        'colsample_bytree': hp.quniform('colsample_bytree', 0.5, 1, 0.05),\n","        \n","        # Increase this number if you have more cores. Otherwise, remove it and it will default \n","        # to the maxium number. \n","        'n_jobs': 4,\n","        'booster': 'gbtree',\n","        'eval_metric': 'auc',\n","        'objective': 'binary:logistic',\n","        'learning_rate': 0.1,\n","        'class_weight': 'balanced',\n","        'silent': 1,\n","        'seed': random_state\n","    }\n","    # Use the fmin function from Hyperopt to find the best hyperparameters\n","    best = fmin(score, space, algo=tpe.suggest, \n","                # trials=trials, \n","                max_evals=50)\n","    return best\n","\n","#-------------------------------------------------#\n","\n","best_hyperparams = optimize(\n","                            #trials\n","                            )\n","print(\"The best hyperparameters are: \", \"\\n\")\n","print(best_hyperparams)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Training with params: \n","{'booster': 'gbtree', 'class_weight': 'balanced', 'colsample_bytree': 0.75, 'eta': 0.225, 'eval_metric': 'auc', 'gamma': 0.5, 'learning_rate': 0.1, 'max_depth': 9, 'min_child_weight': 4.0, 'n_estimators': 442.0, 'n_jobs': 4, 'objective': 'binary:logistic', 'seed': 123, 'silent': 1, 'subsample': 0.9500000000000001}\n","[0]\teval-auc:0.640031\ttrain-auc:0.67315\n","\n","[50]\teval-auc:0.678351\ttrain-auc:0.87673\n","\n","[100]\teval-auc:0.677535\ttrain-auc:0.924562\n","\n","[150]\teval-auc:0.674102\ttrain-auc:0.952279\n","\n","[200]\teval-auc:0.669197\ttrain-auc:0.9721\n","\n","[250]\teval-auc:0.665821\ttrain-auc:0.984498\n","\n","[300]\teval-auc:0.662251\ttrain-auc:0.991405\n","\n","[350]\teval-auc:0.660235\ttrain-auc:0.995592\n","\n","[400]\teval-auc:0.656782\ttrain-auc:0.997675\n","\n","[441]\teval-auc:0.655131\ttrain-auc:0.998716\n","\n","\tScore 0.6551307624525917\n","\n","\n","Training with params: \n","{'booster': 'gbtree', 'class_weight': 'balanced', 'colsample_bytree': 0.6000000000000001, 'eta': 0.47500000000000003, 'eval_metric': 'auc', 'gamma': 0.6000000000000001, 'learning_rate': 0.1, 'max_depth': 10, 'min_child_weight': 3.0, 'n_estimators': 985.0, 'n_jobs': 4, 'objective': 'binary:logistic', 'seed': 123, 'silent': 1, 'subsample': 0.5}\n","[0]\teval-auc:0.635246\ttrain-auc:0.656508\n","\n","[50]\teval-auc:0.67266\ttrain-auc:0.873236\n","\n","[100]\teval-auc:0.665375\ttrain-auc:0.935791\n","\n","[150]\teval-auc:0.65651\ttrain-auc:0.971739\n","\n","[200]\teval-auc:0.650699\ttrain-auc:0.98801\n","\n","[250]\teval-auc:0.645063\ttrain-auc:0.995617\n","\n","[300]\teval-auc:0.642347\ttrain-auc:0.998595\n","\n","[350]\teval-auc:0.640541\ttrain-auc:0.999528\n","\n","[400]\teval-auc:0.639477\ttrain-auc:0.999863\n","\n","[450]\teval-auc:0.638363\ttrain-auc:0.999958\n","\n","[500]\teval-auc:0.63758\ttrain-auc:0.999994\n","\n","[550]\teval-auc:0.63819\ttrain-auc:0.999998\n","\n","[600]\teval-auc:0.637062\ttrain-auc:1\n","\n","[650]\teval-auc:0.637748\ttrain-auc:1\n","\n","[700]\teval-auc:0.637328\ttrain-auc:1\n","\n","[750]\teval-auc:0.637976\ttrain-auc:1\n","\n","[800]\teval-auc:0.637787\ttrain-auc:1\n","\n","[850]\teval-auc:0.636809\ttrain-auc:1\n","\n","[900]\teval-auc:0.636683\ttrain-auc:1\n","\n","[950]\teval-auc:0.63644\ttrain-auc:1\n","\n","[984]\teval-auc:0.636464\ttrain-auc:1\n","\n","\tScore 0.6364644039908735\n","\n","\n","Training with params: \n","{'booster': 'gbtree', 'class_weight': 'balanced', 'colsample_bytree': 0.65, 'eta': 0.375, 'eval_metric': 'auc', 'gamma': 0.9500000000000001, 'learning_rate': 0.1, 'max_depth': 7, 'min_child_weight': 6.0, 'n_estimators': 656.0, 'n_jobs': 4, 'objective': 'binary:logistic', 'seed': 123, 'silent': 1, 'subsample': 0.9}\n","[0]\teval-auc:0.642974\ttrain-auc:0.6619\n","\n","[50]\teval-auc:0.680279\ttrain-auc:0.785001\n","\n","[100]\teval-auc:0.682968\ttrain-auc:0.832122\n","\n","[150]\teval-auc:0.681943\ttrain-auc:0.863572\n","\n","[200]\teval-auc:0.680831\ttrain-auc:0.888\n","\n","[250]\teval-auc:0.679283\ttrain-auc:0.905489\n","\n","[300]\teval-auc:0.67685\ttrain-auc:0.922335\n","\n","[350]\teval-auc:0.674117\ttrain-auc:0.937616\n","\n","[400]\teval-auc:0.672384\ttrain-auc:0.950093\n","\n","[450]\teval-auc:0.668913\ttrain-auc:0.960362\n","\n","[500]\teval-auc:0.66662\ttrain-auc:0.96811\n","\n","[550]\teval-auc:0.664031\ttrain-auc:0.9754\n","\n","[600]\teval-auc:0.662225\ttrain-auc:0.981059\n","\n","[650]\teval-auc:0.660548\ttrain-auc:0.984645\n","\n","[655]\teval-auc:0.660082\ttrain-auc:0.985308\n","\n","\tScore 0.6600820165603245\n","\n","\n","Training with params: \n","{'booster': 'gbtree', 'class_weight': 'balanced', 'colsample_bytree': 0.6000000000000001, 'eta': 0.07500000000000001, 'eval_metric': 'auc', 'gamma': 0.65, 'learning_rate': 0.1, 'max_depth': 8, 'min_child_weight': 3.0, 'n_estimators': 229.0, 'n_jobs': 4, 'objective': 'binary:logistic', 'seed': 123, 'silent': 1, 'subsample': 0.7000000000000001}\n","[0]\teval-auc:0.634019\ttrain-auc:0.658263\n","\n","[50]\teval-auc:0.676976\ttrain-auc:0.825907\n","\n","[100]\teval-auc:0.676251\ttrain-auc:0.884732\n","\n","[150]\teval-auc:0.672802\ttrain-auc:0.921757\n","\n","[200]\teval-auc:0.668661\ttrain-auc:0.945778\n","\n","[228]\teval-auc:0.667906\ttrain-auc:0.957647\n","\n","\tScore 0.6679063043162041\n","\n","\n","Training with params: \n","{'booster': 'gbtree', 'class_weight': 'balanced', 'colsample_bytree': 0.65, 'eta': 0.2, 'eval_metric': 'auc', 'gamma': 1.0, 'learning_rate': 0.1, 'max_depth': 7, 'min_child_weight': 2.0, 'n_estimators': 322.0, 'n_jobs': 4, 'objective': 'binary:logistic', 'seed': 123, 'silent': 1, 'subsample': 0.8500000000000001}\n","[0]\teval-auc:0.642554\ttrain-auc:0.659067\n","\n","[50]\teval-auc:0.68165\ttrain-auc:0.794355\n","\n","[100]\teval-auc:0.683613\ttrain-auc:0.854178\n","\n","[150]\teval-auc:0.681199\ttrain-auc:0.886782\n","\n","[200]\teval-auc:0.678778\ttrain-auc:0.912398\n","\n","[250]\teval-auc:0.676782\ttrain-auc:0.932262\n","\n","[300]\teval-auc:0.674261\ttrain-auc:0.948152\n","\n","[321]\teval-auc:0.672519\ttrain-auc:0.954261\n","\n","\tScore 0.6725186896670575\n","\n","\n","Training with params: \n","{'booster': 'gbtree', 'class_weight': 'balanced', 'colsample_bytree': 0.9, 'eta': 0.1, 'eval_metric': 'auc', 'gamma': 0.7000000000000001, 'learning_rate': 0.1, 'max_depth': 5, 'min_child_weight': 4.0, 'n_estimators': 516.0, 'n_jobs': 4, 'objective': 'binary:logistic', 'seed': 123, 'silent': 1, 'subsample': 0.8500000000000001}\n","[0]\teval-auc:0.643463\ttrain-auc:0.653698\n","\n","[50]\teval-auc:0.677612\ttrain-auc:0.721906\n","\n","[100]\teval-auc:0.684319\ttrain-auc:0.759588\n","\n","[150]\teval-auc:0.685019\ttrain-auc:0.783207\n","\n","[200]\teval-auc:0.684255\ttrain-auc:0.80344\n","\n","[250]\teval-auc:0.683428\ttrain-auc:0.819835\n","\n","[300]\teval-auc:0.682521\ttrain-auc:0.834667\n","\n","[350]\teval-auc:0.681304\ttrain-auc:0.84701\n","\n","[400]\teval-auc:0.680202\ttrain-auc:0.86101\n","\n","[450]\teval-auc:0.678549\ttrain-auc:0.872137\n","\n","[500]\teval-auc:0.677791\ttrain-auc:0.882005\n","\n","[515]\teval-auc:0.677584\ttrain-auc:0.885\n","\n","\tScore 0.6775840036352405\n","\n","\n","Training with params: \n","{'booster': 'gbtree', 'class_weight': 'balanced', 'colsample_bytree': 0.9, 'eta': 0.4, 'eval_metric': 'auc', 'gamma': 0.75, 'learning_rate': 0.1, 'max_depth': 12, 'min_child_weight': 2.0, 'n_estimators': 364.0, 'n_jobs': 4, 'objective': 'binary:logistic', 'seed': 123, 'silent': 1, 'subsample': 0.55}\n","[0]\teval-auc:0.640678\ttrain-auc:0.666375\n","\n","[50]\teval-auc:0.663922\ttrain-auc:0.949552\n","\n","[100]\teval-auc:0.654164\ttrain-auc:0.991594\n","\n","[150]\teval-auc:0.64952\ttrain-auc:0.998867\n","\n","[200]\teval-auc:0.645026\ttrain-auc:0.999931\n","\n","[250]\teval-auc:0.643739\ttrain-auc:0.999998\n","\n","[300]\teval-auc:0.641301\ttrain-auc:1\n","\n","[350]\teval-auc:0.641393\ttrain-auc:1\n","\n","[363]\teval-auc:0.641456\ttrain-auc:1\n","\n","\tScore 0.6414558731510845\n","\n","\n","Training with params: \n","{'booster': 'gbtree', 'class_weight': 'balanced', 'colsample_bytree': 0.6000000000000001, 'eta': 0.17500000000000002, 'eval_metric': 'auc', 'gamma': 0.65, 'learning_rate': 0.1, 'max_depth': 8, 'min_child_weight': 6.0, 'n_estimators': 832.0, 'n_jobs': 4, 'objective': 'binary:logistic', 'seed': 123, 'silent': 1, 'subsample': 0.7000000000000001}\n","[0]\teval-auc:0.637698\ttrain-auc:0.660635\n","\n","[50]\teval-auc:0.681945\ttrain-auc:0.812713\n","\n","[100]\teval-auc:0.678952\ttrain-auc:0.870095\n","\n","[150]\teval-auc:0.675215\ttrain-auc:0.90643\n","\n","[200]\teval-auc:0.670561\ttrain-auc:0.932009\n","\n","[250]\teval-auc:0.666856\ttrain-auc:0.949541\n","\n","[300]\teval-auc:0.661881\ttrain-auc:0.964083\n","\n","[350]\teval-auc:0.659293\ttrain-auc:0.975168\n","\n","[400]\teval-auc:0.655735\ttrain-auc:0.983308\n","\n","[450]\teval-auc:0.652884\ttrain-auc:0.988431\n","\n","[500]\teval-auc:0.651522\ttrain-auc:0.992653\n","\n","[550]\teval-auc:0.650383\ttrain-auc:0.995437\n","\n","[600]\teval-auc:0.649668\ttrain-auc:0.997182\n","\n","[650]\teval-auc:0.646938\ttrain-auc:0.998394\n","\n","[700]\teval-auc:0.64468\ttrain-auc:0.999035\n","\n","[750]\teval-auc:0.643005\ttrain-auc:0.999468\n","\n","[800]\teval-auc:0.642128\ttrain-auc:0.99971\n","\n","[831]\teval-auc:0.641772\ttrain-auc:0.999803\n","\n","\tScore 0.6417718513597188\n","\n","\n","Training with params: \n","{'booster': 'gbtree', 'class_weight': 'balanced', 'colsample_bytree': 0.9, 'eta': 0.42500000000000004, 'eval_metric': 'auc', 'gamma': 1.0, 'learning_rate': 0.1, 'max_depth': 7, 'min_child_weight': 3.0, 'n_estimators': 327.0, 'n_jobs': 4, 'objective': 'binary:logistic', 'seed': 123, 'silent': 1, 'subsample': 0.8}\n","[0]\teval-auc:0.647502\ttrain-auc:0.666317\n","\n","[50]\teval-auc:0.679348\ttrain-auc:0.791524\n","\n","[100]\teval-auc:0.680211\ttrain-auc:0.84802\n","\n","[150]\teval-auc:0.678477\ttrain-auc:0.879968\n","\n","[200]\teval-auc:0.676674\ttrain-auc:0.905239\n","\n","[250]\teval-auc:0.674142\ttrain-auc:0.928713\n","\n","[300]\teval-auc:0.671281\ttrain-auc:0.94505\n","\n","[326]\teval-auc:0.671535\ttrain-auc:0.952709\n","\n","\tScore 0.6715350196684086\n","\n","\n","Training with params: \n","{'booster': 'gbtree', 'class_weight': 'balanced', 'colsample_bytree': 0.9, 'eta': 0.35000000000000003, 'eval_metric': 'auc', 'gamma': 0.75, 'learning_rate': 0.1, 'max_depth': 8, 'min_child_weight': 5.0, 'n_estimators': 779.0, 'n_jobs': 4, 'objective': 'binary:logistic', 'seed': 123, 'silent': 1, 'subsample': 0.8}\n","[0]\teval-auc:0.647246\ttrain-auc:0.671195\n","\n","[50]\teval-auc:0.678484\ttrain-auc:0.823616\n","\n","[100]\teval-auc:0.678275\ttrain-auc:0.881931\n","\n","[150]\teval-auc:0.674388\ttrain-auc:0.913977\n","\n","[200]\teval-auc:0.669927\ttrain-auc:0.938288\n","\n","[250]\teval-auc:0.666923\ttrain-auc:0.955959\n","\n","[300]\teval-auc:0.663703\ttrain-auc:0.968914\n","\n","[350]\teval-auc:0.660125\ttrain-auc:0.979151\n","\n","[400]\teval-auc:0.656562\ttrain-auc:0.987009\n","\n","[450]\teval-auc:0.653089\ttrain-auc:0.99219\n","\n","[500]\teval-auc:0.651126\ttrain-auc:0.995442\n","\n","[550]\teval-auc:0.649059\ttrain-auc:0.99731\n","\n","[600]\teval-auc:0.646838\ttrain-auc:0.998546\n","\n","[650]\teval-auc:0.644703\ttrain-auc:0.999265\n","\n","[700]\teval-auc:0.643913\ttrain-auc:0.999604\n","\n","[750]\teval-auc:0.642395\ttrain-auc:0.999795\n","\n","[778]\teval-auc:0.641331\ttrain-auc:0.999866\n","\n","\tScore 0.6413310055739267\n","\n","\n","Training with params: \n","{'booster': 'gbtree', 'class_weight': 'balanced', 'colsample_bytree': 0.8500000000000001, 'eta': 0.125, 'eval_metric': 'auc', 'gamma': 0.9500000000000001, 'learning_rate': 0.1, 'max_depth': 5, 'min_child_weight': 2.0, 'n_estimators': 743.0, 'n_jobs': 4, 'objective': 'binary:logistic', 'seed': 123, 'silent': 1, 'subsample': 0.8500000000000001}\n","[0]\teval-auc:0.640554\ttrain-auc:0.646642\n","\n","[50]\teval-auc:0.67785\ttrain-auc:0.724344\n","\n","[100]\teval-auc:0.684003\ttrain-auc:0.76109\n","\n","[150]\teval-auc:0.684775\ttrain-auc:0.786561\n","\n","[200]\teval-auc:0.68496\ttrain-auc:0.807059\n","\n","[250]\teval-auc:0.684804\ttrain-auc:0.824514\n","\n","[300]\teval-auc:0.683142\ttrain-auc:0.841614\n","\n","[350]\teval-auc:0.681878\ttrain-auc:0.856384\n","\n","[400]\teval-auc:0.680731\ttrain-auc:0.868861\n","\n","[450]\teval-auc:0.678348\ttrain-auc:0.879959\n","\n","[500]\teval-auc:0.677015\ttrain-auc:0.891129\n","\n","[550]\teval-auc:0.675382\ttrain-auc:0.900069\n","\n","[600]\teval-auc:0.673847\ttrain-auc:0.90923\n","\n","[650]\teval-auc:0.673229\ttrain-auc:0.917469\n","\n","[700]\teval-auc:0.671104\ttrain-auc:0.925097\n","\n","[742]\teval-auc:0.670602\ttrain-auc:0.93066\n","\n","\tScore 0.6706020788269781\n","\n","\n","Training with params: \n","{'booster': 'gbtree', 'class_weight': 'balanced', 'colsample_bytree': 0.6000000000000001, 'eta': 0.275, 'eval_metric': 'auc', 'gamma': 0.75, 'learning_rate': 0.1, 'max_depth': 4, 'min_child_weight': 5.0, 'n_estimators': 229.0, 'n_jobs': 4, 'objective': 'binary:logistic', 'seed': 123, 'silent': 1, 'subsample': 0.5}\n","[0]\teval-auc:0.623524\ttrain-auc:0.63302\n","\n","[50]\teval-auc:0.674745\ttrain-auc:0.699154\n","\n","[100]\teval-auc:0.680241\ttrain-auc:0.724439\n","\n","[150]\teval-auc:0.682199\ttrain-auc:0.742152\n","\n","[200]\teval-auc:0.682655\ttrain-auc:0.755897\n","\n","[228]\teval-auc:0.682139\ttrain-auc:0.762004\n","\n","\tScore 0.682138958485256\n","\n","\n","Training with params: \n","{'booster': 'gbtree', 'class_weight': 'balanced', 'colsample_bytree': 0.7000000000000001, 'eta': 0.15000000000000002, 'eval_metric': 'auc', 'gamma': 0.65, 'learning_rate': 0.1, 'max_depth': 1, 'min_child_weight': 3.0, 'n_estimators': 122.0, 'n_jobs': 4, 'objective': 'binary:logistic', 'seed': 123, 'silent': 1, 'subsample': 0.75}\n","[0]\teval-auc:0.589851\ttrain-auc:0.589608\n","\n","[50]\teval-auc:0.649068\ttrain-auc:0.652992\n","\n","[100]\teval-auc:0.660222\ttrain-auc:0.666723\n","\n","[121]\teval-auc:0.662454\ttrain-auc:0.669602\n","\n","\tScore 0.6624538489873845\n","\n","\n","Training with params: \n","{'booster': 'gbtree', 'class_weight': 'balanced', 'colsample_bytree': 0.6000000000000001, 'eta': 0.47500000000000003, 'eval_metric': 'auc', 'gamma': 0.7000000000000001, 'learning_rate': 0.1, 'max_depth': 9, 'min_child_weight': 2.0, 'n_estimators': 141.0, 'n_jobs': 4, 'objective': 'binary:logistic', 'seed': 123, 'silent': 1, 'subsample': 0.55}\n","[0]\teval-auc:0.635064\ttrain-auc:0.65678\n","\n","[50]\teval-auc:0.676788\ttrain-auc:0.853262\n","\n","[100]\teval-auc:0.673088\ttrain-auc:0.922348\n","\n","[140]\teval-auc:0.666558\ttrain-auc:0.955041\n","\n","\tScore 0.6665582954215736\n","\n","\n","Training with params: \n","{'booster': 'gbtree', 'class_weight': 'balanced', 'colsample_bytree': 0.9500000000000001, 'eta': 0.45, 'eval_metric': 'auc', 'gamma': 0.5, 'learning_rate': 0.1, 'max_depth': 12, 'min_child_weight': 6.0, 'n_estimators': 153.0, 'n_jobs': 4, 'objective': 'binary:logistic', 'seed': 123, 'silent': 1, 'subsample': 0.5}\n","[0]\teval-auc:0.637252\ttrain-auc:0.666464\n","\n","[50]\teval-auc:0.671395\ttrain-auc:0.900968\n","\n","[100]\teval-auc:0.660969\ttrain-auc:0.95938\n","\n","[150]\teval-auc:0.653632\ttrain-auc:0.983456\n","\n","[152]\teval-auc:0.653929\ttrain-auc:0.984297\n","\n","\tScore 0.6539292197907072\n","\n","\n","Training with params: \n","{'booster': 'gbtree', 'class_weight': 'balanced', 'colsample_bytree': 0.65, 'eta': 0.1, 'eval_metric': 'auc', 'gamma': 0.9500000000000001, 'learning_rate': 0.1, 'max_depth': 11, 'min_child_weight': 3.0, 'n_estimators': 488.0, 'n_jobs': 4, 'objective': 'binary:logistic', 'seed': 123, 'silent': 1, 'subsample': 0.65}\n","[0]\teval-auc:0.63461\ttrain-auc:0.667612\n","\n","[50]\teval-auc:0.669884\ttrain-auc:0.92428\n","\n","[100]\teval-auc:0.664632\ttrain-auc:0.971188\n","\n","[150]\teval-auc:0.657289\ttrain-auc:0.99338\n","\n","[200]\teval-auc:0.650368\ttrain-auc:0.99855\n","\n","[250]\teval-auc:0.64686\ttrain-auc:0.999804\n","\n","[300]\teval-auc:0.6438\ttrain-auc:0.999975\n","\n","[350]\teval-auc:0.641772\ttrain-auc:0.999998\n","\n","[400]\teval-auc:0.642447\ttrain-auc:1\n","\n","[450]\teval-auc:0.642721\ttrain-auc:1\n","\n","[487]\teval-auc:0.642724\ttrain-auc:1\n","\n","\tScore 0.6427244236565556\n","\n","\n","Training with params: \n","{'booster': 'gbtree', 'class_weight': 'balanced', 'colsample_bytree': 0.8, 'eta': 0.30000000000000004, 'eval_metric': 'auc', 'gamma': 0.9, 'learning_rate': 0.1, 'max_depth': 3, 'min_child_weight': 5.0, 'n_estimators': 771.0, 'n_jobs': 4, 'objective': 'binary:logistic', 'seed': 123, 'silent': 1, 'subsample': 0.9}\n","[0]\teval-auc:0.624652\ttrain-auc:0.630391\n","\n","[50]\teval-auc:0.668137\ttrain-auc:0.682883\n","\n","[100]\teval-auc:0.678404\ttrain-auc:0.704466\n","\n","[150]\teval-auc:0.681737\ttrain-auc:0.717257\n","\n","[200]\teval-auc:0.683547\ttrain-auc:0.726602\n","\n","[250]\teval-auc:0.684357\ttrain-auc:0.734445\n","\n","[300]\teval-auc:0.684445\ttrain-auc:0.741893\n","\n","[350]\teval-auc:0.684964\ttrain-auc:0.748718\n","\n","[400]\teval-auc:0.685262\ttrain-auc:0.754054\n","\n","[450]\teval-auc:0.684938\ttrain-auc:0.75995\n","\n","[500]\teval-auc:0.684823\ttrain-auc:0.765286\n","\n","[550]\teval-auc:0.684855\ttrain-auc:0.76992\n","\n","[600]\teval-auc:0.684903\ttrain-auc:0.775303\n","\n","[650]\teval-auc:0.683732\ttrain-auc:0.780532\n","\n","[700]\teval-auc:0.682767\ttrain-auc:0.78485\n","\n","[750]\teval-auc:0.682418\ttrain-auc:0.789836\n","\n","[770]\teval-auc:0.68244\ttrain-auc:0.791615\n","\n","\tScore 0.6824404364571537\n","\n","\n","Training with params: \n","{'booster': 'gbtree', 'class_weight': 'balanced', 'colsample_bytree': 0.9, 'eta': 0.35000000000000003, 'eval_metric': 'auc', 'gamma': 0.8500000000000001, 'learning_rate': 0.1, 'max_depth': 4, 'min_child_weight': 3.0, 'n_estimators': 475.0, 'n_jobs': 4, 'objective': 'binary:logistic', 'seed': 123, 'silent': 1, 'subsample': 0.9}\n","[0]\teval-auc:0.637831\ttrain-auc:0.644895\n","\n","[50]\teval-auc:0.674057\ttrain-auc:0.700573\n","\n","[100]\teval-auc:0.683029\ttrain-auc:0.728378\n","\n","[150]\teval-auc:0.685069\ttrain-auc:0.745488\n","\n","[200]\teval-auc:0.685189\ttrain-auc:0.759617\n","\n","[250]\teval-auc:0.684966\ttrain-auc:0.772576\n","\n","[300]\teval-auc:0.684302\ttrain-auc:0.783639\n","\n","[350]\teval-auc:0.684542\ttrain-auc:0.795195\n","\n"," 34%|███▍      | 17/50 [3:03:21<4:44:53, 518.00s/it, best loss: 0.3175595635428463]"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Nl1ZifIzR3LA","colab_type":"text"},"source":["# Implementing XG Boost"]},{"cell_type":"markdown","metadata":{"id":"snV_zBS_oii7","colab_type":"text"},"source":["## Check for Different functions of Learning API"]},{"cell_type":"code","metadata":{"id":"dsXgK2z1oiOE","colab_type":"code","outputId":"0131128a-0ec8-434a-f10c-ad5a5d3c66bc","executionInfo":{"status":"ok","timestamp":1585826836369,"user_tz":-330,"elapsed":145039,"user":{"displayName":"Abhishek Keshari","photoUrl":"","userId":"08321311573619930656"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["xg1 = xgb.XGBClassifier(random_state=123)\n","xg1.fit(X_train,y_train)\n","roc_auc(X_test,y_test,xg1.predict(X_test),xg1)\n","roc_auc(X_train,y_train,xg1.predict(X_train),xg1)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Confusion_Matrix: \n","[[73558     1]\n"," [ 4700     1]]\n","\n","Accuracy of classifier on test set: 0.94\n","\n","Classification Report: \n","              precision    recall  f1-score   support\n","\n","         0.0       0.94      1.00      0.97     73559\n","         1.0       0.50      0.00      0.00      4701\n","\n","    accuracy                           0.94     78260\n","   macro avg       0.72      0.50      0.48     78260\n","weighted avg       0.91      0.94      0.91     78260\n","\n","Best Threshold=0.058190, G-Mean=0.625\n","\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\njl24cCEtWrSgbNmyLp8/LS0tu6FlWUxMDK+//jrr16/n77//5vXXX7/oh/uKFSuYP38+W7ZsYceO\nHTz33HMADBw4kM2bN7N582a++eYbatWqRcuWdrTmfffdxyeffJIrr6NANz2dSk7lpR+3UblMcV66\nuZGnw4GPP4aXXoLkZHj9dbs8afHino5K5bLXf97Bzoic/Qu4cbWyvNo78woDCQkJ/Pnnn6xYsYLe\nvXvz+uuvA7By5UomTJjAL7/8AsDw4cMJCgqif//+fP755xw4cIDijt/TKlWq0L9//wvOPWrUKBYs\nWECRIkW48cYbmTBhAkeOHGHo0KGEhIQAMHnyZDp27MjEiROZOnUqAIMHD+app57i4MGD9OjRg/bt\n2xMcHMzChQuZO3cuc+fOJTk5mdtvvz0jXmczZ85kyJAhGY9vu+02wsLCSEpKYsSIERn7SpcuzaOP\nPsry5cv5+OOPOXjwIJMmTeLMmTO0b9+eTz75BG9vbx577DE2bNjA6dOn6dev30WvmRVLliyhe/fu\nVKxYEYDu3buzePFiBgwYcM5xkydPZtSoURnvc+XKF5YUmjVrFnfffXfG4z59+nDttdcyevToK4rR\nFQX6jmLMvO1ExCbxxq1N80aTU3AwtG8P27bBK69oklC5av78+fTs2ZP69evj6+tLcHBwpsfv27eP\ngICAy/61Hh0dzU8//cSOHTvYunUrY8aMAeDJJ5+kS5cubNmyhU2bNtGkSROCg4OZNm0a69evZ926\ndXz++ef8888/AOzdu5dhw4axY8cO9uzZw969e/n777/ZvHkzwcHBrF69+oJrr1mzhjZt2mQ8njp1\nKsHBwWzcuJFJkyYRHR0NwKlTp2jfvj1btmzB19eXOXPmsGbNGjZv3oy3tzczZ84EYNy4cWzcuJGt\nW7eyatUqtm7desE1x48ff05z0NmvJ5988oJjDx8+TI0a/y9Q4e/vz+HDFxSo4N9//+WPP/6gffv2\ndOnShQ0bNlxwzJw5c85JMBUqVCA5OTnjNbpTgb2jOJ6QzPzNh7m52VX0bOqhdRni4mxCuO8+W+H1\nk09sctDRL4Xa5f7yd5dZs2YxYsQIAO6++25mzZp1zodsdpUrV44SJUrw8MMP06tXL3r16gXA77//\nztdffw2At7c35cqV488//+T222+nVClbNqdv37788ccf9OnTh5o1a3L11VcDsHTpUpYuXUqrVq0A\n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\nYII=\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Confusion_Matrix: \n","[[171351      2]\n"," [ 11247      4]]\n","\n","Accuracy of classifier on test set: 0.94\n","\n","Classification Report: \n","              precision    recall  f1-score   support\n","\n","         0.0       0.94      1.00      0.97    171353\n","         1.0       0.67      0.00      0.00     11251\n","\n","    accuracy                           0.94    182604\n","   macro avg       0.80      0.50      0.48    182604\n","weighted avg       0.92      0.94      0.91    182604\n","\n","Best Threshold=0.060479, G-Mean=0.648\n","\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"B6neHEIToiI5","colab_type":"code","outputId":"76345cf2-c295-4ece-9966-2ed6af52ba64","executionInfo":{"status":"ok","timestamp":1585827291214,"user_tz":-330,"elapsed":595388,"user":{"displayName":"Abhishek Keshari","photoUrl":"","userId":"08321311573619930656"}},"colab":{"base_uri":"https://localhost:8080/","height":745}},"source":["params = {\n","    'base_score': 0.5,\n","    'booster': 'gbtree', 'colsample_bylevel': 1,\n","              'colsample_bynode': 1, 'colsample_bytree': 1, 'gamma': 0,\n","              'learning_rate': 0.1, 'max_delta_step': 0, 'max_depth': 3,\n","              'min_child_weight': 1, 'n_estimators': 100, 'n_jobs': 1,\n","              'objective': 'binary:logistic', 'random_state': 0,\n","              'reg_alpha': 0, 'reg_lambda': 1, 'scale_pos_weight': 1, 'seed': 123,\n","              'subsample': 1,'silent':True, 'verbosity': 3, 'eval_metric': [\"auc\",\"logloss\"]\n","}\n","\n","dtrain = xgb.DMatrix(data=X_train,label=y_train)\n","dtest = xgb.DMatrix(data=X_test,label=y_test)\n","\n","xg2 =  xgb.train(\n","    params,\n","    dtrain,\n","    num_boost_round=999,\n","    evals=[(dtrain,\"Train\"),(dtest, \"Test\")],\n","    early_stopping_rounds=20,verbose_eval=10\n",")\n","\n","preds = xg2.predict(dtest)\n","print(np.mean(y_pred),np.min(y_pred),np.max(y_pred))\n","labels = dtest.get_label()\n","p = [1 if (preds[i] > 0.5) else 0 for i in range(len(preds))]\n","p = pd.DataFrame(p)\n","p[0].value_counts()"],"execution_count":0,"outputs":[{"output_type":"stream","text":["[0]\tTrain-auc:0.63606\tTrain-logloss:0.619584\tTest-auc:0.626051\tTest-logloss:0.619401\n","Multiple eval metrics have been passed: 'Test-logloss' will be used for early stopping.\n","\n","Will train until Test-logloss hasn't improved in 20 rounds.\n","[10]\tTrain-auc:0.655505\tTrain-logloss:0.307067\tTest-auc:0.641684\tTest-logloss:0.305331\n","[20]\tTrain-auc:0.660515\tTrain-logloss:0.239363\tTest-auc:0.645696\tTest-logloss:0.237284\n","[30]\tTrain-auc:0.668953\tTrain-logloss:0.224007\tTest-auc:0.651915\tTest-logloss:0.222002\n","[40]\tTrain-auc:0.676506\tTrain-logloss:0.220047\tTest-auc:0.65745\tTest-logloss:0.218402\n","[50]\tTrain-auc:0.683865\tTrain-logloss:0.218489\tTest-auc:0.6621\tTest-logloss:0.217285\n","[60]\tTrain-auc:0.690048\tTrain-logloss:0.217375\tTest-auc:0.665677\tTest-logloss:0.216603\n","[70]\tTrain-auc:0.69491\tTrain-logloss:0.216547\tTest-auc:0.668307\tTest-logloss:0.216164\n","[80]\tTrain-auc:0.698761\tTrain-logloss:0.215869\tTest-auc:0.669412\tTest-logloss:0.215944\n","[90]\tTrain-auc:0.702234\tTrain-logloss:0.215236\tTest-auc:0.671349\tTest-logloss:0.215682\n","[100]\tTrain-auc:0.70535\tTrain-logloss:0.214722\tTest-auc:0.672758\tTest-logloss:0.215486\n","[110]\tTrain-auc:0.708227\tTrain-logloss:0.214209\tTest-auc:0.673684\tTest-logloss:0.215317\n","[120]\tTrain-auc:0.710609\tTrain-logloss:0.213789\tTest-auc:0.674359\tTest-logloss:0.21521\n","[130]\tTrain-auc:0.713141\tTrain-logloss:0.213358\tTest-auc:0.674984\tTest-logloss:0.215091\n","[140]\tTrain-auc:0.714713\tTrain-logloss:0.213034\tTest-auc:0.675564\tTest-logloss:0.215025\n","[150]\tTrain-auc:0.716758\tTrain-logloss:0.212686\tTest-auc:0.676043\tTest-logloss:0.214953\n","[160]\tTrain-auc:0.718766\tTrain-logloss:0.212317\tTest-auc:0.676428\tTest-logloss:0.214894\n","[170]\tTrain-auc:0.720761\tTrain-logloss:0.211925\tTest-auc:0.676988\tTest-logloss:0.214795\n","[180]\tTrain-auc:0.722493\tTrain-logloss:0.211642\tTest-auc:0.677207\tTest-logloss:0.214769\n","[190]\tTrain-auc:0.724027\tTrain-logloss:0.211317\tTest-auc:0.677088\tTest-logloss:0.214774\n","[200]\tTrain-auc:0.725435\tTrain-logloss:0.211079\tTest-auc:0.677165\tTest-logloss:0.214759\n","[210]\tTrain-auc:0.726958\tTrain-logloss:0.210789\tTest-auc:0.677304\tTest-logloss:0.214748\n","[220]\tTrain-auc:0.729082\tTrain-logloss:0.210427\tTest-auc:0.677692\tTest-logloss:0.214693\n","[230]\tTrain-auc:0.730751\tTrain-logloss:0.210125\tTest-auc:0.678047\tTest-logloss:0.214656\n","[240]\tTrain-auc:0.732464\tTrain-logloss:0.209802\tTest-auc:0.678324\tTest-logloss:0.214616\n","[250]\tTrain-auc:0.733839\tTrain-logloss:0.209553\tTest-auc:0.678245\tTest-logloss:0.214636\n","[260]\tTrain-auc:0.735398\tTrain-logloss:0.209291\tTest-auc:0.678451\tTest-logloss:0.214601\n","[270]\tTrain-auc:0.736797\tTrain-logloss:0.209039\tTest-auc:0.678589\tTest-logloss:0.214593\n","[280]\tTrain-auc:0.738017\tTrain-logloss:0.208766\tTest-auc:0.678765\tTest-logloss:0.214578\n","[290]\tTrain-auc:0.739632\tTrain-logloss:0.208488\tTest-auc:0.678865\tTest-logloss:0.214566\n","[300]\tTrain-auc:0.741027\tTrain-logloss:0.208244\tTest-auc:0.678801\tTest-logloss:0.214566\n","Stopping. Best iteration:\n","[284]\tTrain-auc:0.738903\tTrain-logloss:0.208635\tTest-auc:0.679043\tTest-logloss:0.214548\n","\n","0.061188366 0.0044268523 0.7863983\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["0    78250\n","1       10\n","Name: 0, dtype: int64"]},"metadata":{"tags":[]},"execution_count":61}]},{"cell_type":"code","metadata":{"id":"dQE4KQ_1oh3v","colab_type":"code","outputId":"630ba5e2-27a9-4195-e1ad-26b191e4f744","executionInfo":{"status":"ok","timestamp":1585827778951,"user_tz":-330,"elapsed":114878,"user":{"displayName":"Abhishek Keshari","photoUrl":"","userId":"08321311573619930656"}},"colab":{"base_uri":"https://localhost:8080/","height":525}},"source":["params = {\n","    # Parameters that we are going to tune.\n","    'num_boost_round': 999,\n","    'early_stopping_rounds': 10,\n","    'base_score': 0.5,\n","    'booster': 'gbtree', 'colsample_bylevel': 1,\n","              'colsample_bynode': 1, 'colsample_bytree': 1, 'gamma': 0,\n","              'learning_rate': 0.1, 'max_delta_step': 0, 'max_depth': 3,\n","              'min_child_weight': 1, 'n_estimators': 100, 'n_jobs': 1,\n","              'objective': 'binary:logistic', 'random_state': 0,\n","              'reg_alpha': 0, 'reg_lambda': 1, 'scale_pos_weight': 1, 'seed': 123,\n","              'subsample': 1,'silent':True, 'verbosity': 3, 'eval_metric': [\"auc\",\"logloss\"]\n","}\n","dtrain = xgb.DMatrix(temp[predictors], label=temp[target])\n","# dtest = xgb.DMatrix(X_test, label=y_test)\n","cv_results = xgb.cv(\n","    params,\n","    dtrain,\n","    seed=123,\n","    nfold=5,\n","    early_stopping_rounds=10,\n","    as_pandas=True,\n","    verbose_eval=1\n",")\n","cv_results"],"execution_count":0,"outputs":[{"output_type":"stream","text":["[0]\ttrain-auc:0.633676+0.00143878\ttrain-logloss:0.619383+0.000142762\ttest-auc:0.632082+0.00327082\ttest-logloss:0.619588+7.83495e-05\n","[1]\ttrain-auc:0.640559+0.00273492\ttrain-logloss:0.559366+0.000138728\ttest-auc:0.638002+0.00576912\ttest-logloss:0.559468+0.000295744\n","[2]\ttrain-auc:0.643572+0.0025876\ttrain-logloss:0.509769+0.000214259\ttest-auc:0.640344+0.00448775\ttest-logloss:0.509708+0.000507158\n","[3]\ttrain-auc:0.645274+0.00230823\ttrain-logloss:0.467771+0.000172178\ttest-auc:0.642147+0.00318828\ttest-logloss:0.467986+0.000589602\n","[4]\ttrain-auc:0.646161+0.002188\ttrain-logloss:0.432762+0.000316194\ttest-auc:0.642959+0.00336389\ttest-logloss:0.432768+0.000636367\n","[5]\ttrain-auc:0.647649+0.00139456\ttrain-logloss:0.40293+0.000283735\ttest-auc:0.644213+0.00403693\ttest-logloss:0.402857+0.00076729\n","[6]\ttrain-auc:0.648455+0.00153315\ttrain-logloss:0.377164+0.000299806\ttest-auc:0.645052+0.00382253\ttest-logloss:0.377302+0.000895974\n","[7]\ttrain-auc:0.649228+0.00156698\ttrain-logloss:0.355237+0.000421888\ttest-auc:0.645988+0.00406058\ttest-logloss:0.35543+0.000997837\n","[8]\ttrain-auc:0.649811+0.00202354\ttrain-logloss:0.336554+0.000435735\ttest-auc:0.64623+0.00361577\ttest-logloss:0.336641+0.00109224\n","[9]\ttrain-auc:0.650183+0.00201581\ttrain-logloss:0.320331+0.000453217\ttest-auc:0.646654+0.00352942\ttest-logloss:0.320461+0.00119369\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>train-auc-mean</th>\n","      <th>train-auc-std</th>\n","      <th>train-logloss-mean</th>\n","      <th>train-logloss-std</th>\n","      <th>test-auc-mean</th>\n","      <th>test-auc-std</th>\n","      <th>test-logloss-mean</th>\n","      <th>test-logloss-std</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.633676</td>\n","      <td>0.001439</td>\n","      <td>0.619383</td>\n","      <td>0.000143</td>\n","      <td>0.632082</td>\n","      <td>0.003271</td>\n","      <td>0.619588</td>\n","      <td>0.000078</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.640559</td>\n","      <td>0.002735</td>\n","      <td>0.559366</td>\n","      <td>0.000139</td>\n","      <td>0.638002</td>\n","      <td>0.005769</td>\n","      <td>0.559468</td>\n","      <td>0.000296</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.643572</td>\n","      <td>0.002588</td>\n","      <td>0.509769</td>\n","      <td>0.000214</td>\n","      <td>0.640344</td>\n","      <td>0.004488</td>\n","      <td>0.509708</td>\n","      <td>0.000507</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.645274</td>\n","      <td>0.002308</td>\n","      <td>0.467771</td>\n","      <td>0.000172</td>\n","      <td>0.642147</td>\n","      <td>0.003188</td>\n","      <td>0.467986</td>\n","      <td>0.000590</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.646161</td>\n","      <td>0.002188</td>\n","      <td>0.432762</td>\n","      <td>0.000316</td>\n","      <td>0.642959</td>\n","      <td>0.003364</td>\n","      <td>0.432768</td>\n","      <td>0.000636</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>0.647649</td>\n","      <td>0.001395</td>\n","      <td>0.402930</td>\n","      <td>0.000284</td>\n","      <td>0.644213</td>\n","      <td>0.004037</td>\n","      <td>0.402857</td>\n","      <td>0.000767</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>0.648455</td>\n","      <td>0.001533</td>\n","      <td>0.377164</td>\n","      <td>0.000300</td>\n","      <td>0.645052</td>\n","      <td>0.003823</td>\n","      <td>0.377302</td>\n","      <td>0.000896</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>0.649228</td>\n","      <td>0.001567</td>\n","      <td>0.355237</td>\n","      <td>0.000422</td>\n","      <td>0.645988</td>\n","      <td>0.004061</td>\n","      <td>0.355430</td>\n","      <td>0.000998</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>0.649811</td>\n","      <td>0.002024</td>\n","      <td>0.336554</td>\n","      <td>0.000436</td>\n","      <td>0.646230</td>\n","      <td>0.003616</td>\n","      <td>0.336641</td>\n","      <td>0.001092</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>0.650183</td>\n","      <td>0.002016</td>\n","      <td>0.320331</td>\n","      <td>0.000453</td>\n","      <td>0.646654</td>\n","      <td>0.003529</td>\n","      <td>0.320461</td>\n","      <td>0.001194</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   train-auc-mean  train-auc-std  ...  test-logloss-mean  test-logloss-std\n","0        0.633676       0.001439  ...           0.619588          0.000078\n","1        0.640559       0.002735  ...           0.559468          0.000296\n","2        0.643572       0.002588  ...           0.509708          0.000507\n","3        0.645274       0.002308  ...           0.467986          0.000590\n","4        0.646161       0.002188  ...           0.432768          0.000636\n","5        0.647649       0.001395  ...           0.402857          0.000767\n","6        0.648455       0.001533  ...           0.377302          0.000896\n","7        0.649228       0.001567  ...           0.355430          0.000998\n","8        0.649811       0.002024  ...           0.336641          0.001092\n","9        0.650183       0.002016  ...           0.320461          0.001194\n","\n","[10 rows x 8 columns]"]},"metadata":{"tags":[]},"execution_count":62}]},{"cell_type":"markdown","metadata":{"id":"uVdKmPrnxdOL","colab_type":"text"},"source":["## Baseline Model"]},{"cell_type":"code","metadata":{"id":"UfWGzIzNR2ZG","colab_type":"code","outputId":"43384b4f-11e7-4e59-b180-5d0389a8dab4","executionInfo":{"status":"ok","timestamp":1585552634580,"user_tz":-330,"elapsed":104227,"user":{"displayName":"Abhishek Keshari","photoUrl":"","userId":"08321311573619930656"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["start = time.time()\n","xg1 = xgb.XGBClassifier(objective ='binary:logistic', colsample_bytree = 0.3, learning_rate = 0.1,\n","                max_depth = 10, alpha = 10, n_estimators = 50)\n","xg1.fit(X_train,y_train)\n","print('Time taken:',time.time()-start,'seconds')\n","roc_auc(X_test,y_test,xg1.predict(X_test),xg1)\n","roc_auc(X_train,y_train,xg1.predict(X_train),xg1)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["103.1533100605011\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"DVFVKU0AR2Wq","colab_type":"code","outputId":"354884db-3d31-4909-d4f4-92454281af54","executionInfo":{"status":"ok","timestamp":1585552637447,"user_tz":-330,"elapsed":104623,"user":{"displayName":"Abhishek Keshari","photoUrl":"","userId":"08321311573619930656"}},"colab":{"base_uri":"https://localhost:8080/","height":578}},"source":["preds = xg1.predict(X_test)\n","roc_auc(X_test,y_test,preds,xg1)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Confusion_Matrix: \n","[[73541    18]\n"," [ 4694     7]]\n","\n","Accuracy of classifier on test set: 0.94\n","\n","Classification Report: \n","              precision    recall  f1-score   support\n","\n","         0.0       0.94      1.00      0.97     73559\n","         1.0       0.28      0.00      0.00      4701\n","\n","    accuracy                           0.94     78260\n","   macro avg       0.61      0.50      0.49     78260\n","weighted avg       0.90      0.94      0.91     78260\n","\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"v0OaGyEiSydE","colab_type":"code","outputId":"947ce37a-c814-4169-cd86-77bbf4653ec0","executionInfo":{"status":"ok","timestamp":1585552658640,"user_tz":-330,"elapsed":7339,"user":{"displayName":"Abhishek Keshari","photoUrl":"","userId":"08321311573619930656"}},"colab":{"base_uri":"https://localhost:8080/","height":578}},"source":[""],"execution_count":0,"outputs":[{"output_type":"stream","text":["Confusion_Matrix: \n","[[171353      0]\n"," [ 10411    840]]\n","\n","Accuracy of classifier on test set: 0.94\n","\n","Classification Report: \n","              precision    recall  f1-score   support\n","\n","         0.0       0.94      1.00      0.97    171353\n","         1.0       1.00      0.07      0.14     11251\n","\n","    accuracy                           0.94    182604\n","   macro avg       0.97      0.54      0.55    182604\n","weighted avg       0.95      0.94      0.92    182604\n","\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"TW2TnPYBTpSD","colab_type":"code","outputId":"1e95b896-b461-4de6-be91-1e906f0a896b","executionInfo":{"status":"ok","timestamp":1585553833703,"user_tz":-330,"elapsed":1007351,"user":{"displayName":"Abhishek Keshari","photoUrl":"","userId":"08321311573619930656"}},"colab":{"base_uri":"https://localhost:8080/","height":105}},"source":["start = time.time()\n","params = {'objective' : \"binary:logistic\", 'colsample_bytree' : 0.3, 'learning_rate' : 0.1, 'max_depth' : 10, 'alpha' : 10}\n","data_dmatrix = xgb.DMatrix(data=temp.iloc[:,5:],label=temp.iloc[:,4])\n","data_dmatrix\n","\n","cv_results = xgb.cv(dtrain=data_dmatrix, params=params, nfold=5,\n","                    num_boost_round=100,early_stopping_rounds=50,metrics=[\"auc\",\"error\"], as_pandas=True, seed=123)\n","print('Time taken:',time.time()-start,'seconds')"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/xgboost/core.py:587: FutureWarning: Series.base is deprecated and will be removed in a future version\n","  if getattr(data, 'base', None) is not None and \\\n","/usr/local/lib/python3.6/dist-packages/xgboost/core.py:588: FutureWarning: Series.base is deprecated and will be removed in a future version\n","  data.base is not None and isinstance(data, np.ndarray) \\\n"],"name":"stderr"},{"output_type":"stream","text":["Time taken: 1006.265435218811 seconds\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"JFIhltVoTpPu","colab_type":"code","outputId":"31a48027-5020-454c-8dd4-9d726b0e6a1d","executionInfo":{"status":"ok","timestamp":1585558742418,"user_tz":-330,"elapsed":1047,"user":{"displayName":"Abhishek Keshari","photoUrl":"","userId":"08321311573619930656"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["cv_results"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>train-auc-mean</th>\n","      <th>train-auc-std</th>\n","      <th>train-error-mean</th>\n","      <th>train-error-std</th>\n","      <th>test-auc-mean</th>\n","      <th>test-auc-std</th>\n","      <th>test-error-mean</th>\n","      <th>test-error-std</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.605933</td>\n","      <td>0.003491</td>\n","      <td>0.061151</td>\n","      <td>0.000261</td>\n","      <td>0.604970</td>\n","      <td>0.004090</td>\n","      <td>0.061151</td>\n","      <td>0.001046</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.627818</td>\n","      <td>0.002168</td>\n","      <td>0.061151</td>\n","      <td>0.000261</td>\n","      <td>0.626132</td>\n","      <td>0.007727</td>\n","      <td>0.061151</td>\n","      <td>0.001046</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.638443</td>\n","      <td>0.002976</td>\n","      <td>0.061151</td>\n","      <td>0.000261</td>\n","      <td>0.634738</td>\n","      <td>0.009681</td>\n","      <td>0.061151</td>\n","      <td>0.001046</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.642750</td>\n","      <td>0.003517</td>\n","      <td>0.061151</td>\n","      <td>0.000261</td>\n","      <td>0.638016</td>\n","      <td>0.010430</td>\n","      <td>0.061151</td>\n","      <td>0.001046</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.649578</td>\n","      <td>0.002375</td>\n","      <td>0.061151</td>\n","      <td>0.000261</td>\n","      <td>0.643079</td>\n","      <td>0.007948</td>\n","      <td>0.061151</td>\n","      <td>0.001046</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>0.653054</td>\n","      <td>0.002606</td>\n","      <td>0.061150</td>\n","      <td>0.000261</td>\n","      <td>0.646044</td>\n","      <td>0.008202</td>\n","      <td>0.061151</td>\n","      <td>0.001046</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>0.656214</td>\n","      <td>0.002809</td>\n","      <td>0.061149</td>\n","      <td>0.000263</td>\n","      <td>0.648437</td>\n","      <td>0.007510</td>\n","      <td>0.061151</td>\n","      <td>0.001046</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>0.660047</td>\n","      <td>0.001553</td>\n","      <td>0.061148</td>\n","      <td>0.000262</td>\n","      <td>0.651326</td>\n","      <td>0.007825</td>\n","      <td>0.061151</td>\n","      <td>0.001046</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>0.662615</td>\n","      <td>0.001161</td>\n","      <td>0.061147</td>\n","      <td>0.000263</td>\n","      <td>0.652748</td>\n","      <td>0.006522</td>\n","      <td>0.061147</td>\n","      <td>0.001042</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>0.664256</td>\n","      <td>0.000714</td>\n","      <td>0.061143</td>\n","      <td>0.000264</td>\n","      <td>0.653771</td>\n","      <td>0.006348</td>\n","      <td>0.061147</td>\n","      <td>0.001042</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>0.667246</td>\n","      <td>0.002621</td>\n","      <td>0.061140</td>\n","      <td>0.000263</td>\n","      <td>0.655781</td>\n","      <td>0.005677</td>\n","      <td>0.061151</td>\n","      <td>0.001046</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>0.670322</td>\n","      <td>0.002670</td>\n","      <td>0.061141</td>\n","      <td>0.000262</td>\n","      <td>0.657531</td>\n","      <td>0.005057</td>\n","      <td>0.061151</td>\n","      <td>0.001046</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>0.672949</td>\n","      <td>0.003020</td>\n","      <td>0.061139</td>\n","      <td>0.000262</td>\n","      <td>0.658995</td>\n","      <td>0.004920</td>\n","      <td>0.061151</td>\n","      <td>0.001046</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>0.674654</td>\n","      <td>0.003101</td>\n","      <td>0.061137</td>\n","      <td>0.000258</td>\n","      <td>0.659941</td>\n","      <td>0.005025</td>\n","      <td>0.061155</td>\n","      <td>0.001046</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>0.677295</td>\n","      <td>0.002608</td>\n","      <td>0.061132</td>\n","      <td>0.000254</td>\n","      <td>0.660950</td>\n","      <td>0.005671</td>\n","      <td>0.061151</td>\n","      <td>0.001042</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>0.680228</td>\n","      <td>0.002123</td>\n","      <td>0.061132</td>\n","      <td>0.000255</td>\n","      <td>0.662101</td>\n","      <td>0.006036</td>\n","      <td>0.061155</td>\n","      <td>0.001046</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>0.683542</td>\n","      <td>0.002229</td>\n","      <td>0.061129</td>\n","      <td>0.000255</td>\n","      <td>0.663258</td>\n","      <td>0.005886</td>\n","      <td>0.061155</td>\n","      <td>0.001046</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>0.686371</td>\n","      <td>0.002642</td>\n","      <td>0.061124</td>\n","      <td>0.000254</td>\n","      <td>0.664577</td>\n","      <td>0.005763</td>\n","      <td>0.061155</td>\n","      <td>0.001046</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>0.688608</td>\n","      <td>0.002820</td>\n","      <td>0.061123</td>\n","      <td>0.000253</td>\n","      <td>0.665193</td>\n","      <td>0.006034</td>\n","      <td>0.061154</td>\n","      <td>0.001037</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>0.691211</td>\n","      <td>0.002529</td>\n","      <td>0.061125</td>\n","      <td>0.000252</td>\n","      <td>0.665936</td>\n","      <td>0.006616</td>\n","      <td>0.061151</td>\n","      <td>0.001042</td>\n","    </tr>\n","    <tr>\n","      <th>20</th>\n","      <td>0.693629</td>\n","      <td>0.002462</td>\n","      <td>0.061120</td>\n","      <td>0.000253</td>\n","      <td>0.666626</td>\n","      <td>0.007084</td>\n","      <td>0.061147</td>\n","      <td>0.001043</td>\n","    </tr>\n","    <tr>\n","      <th>21</th>\n","      <td>0.697152</td>\n","      <td>0.002750</td>\n","      <td>0.061114</td>\n","      <td>0.000255</td>\n","      <td>0.667455</td>\n","      <td>0.006989</td>\n","      <td>0.061147</td>\n","      <td>0.001043</td>\n","    </tr>\n","    <tr>\n","      <th>22</th>\n","      <td>0.700239</td>\n","      <td>0.003055</td>\n","      <td>0.061110</td>\n","      <td>0.000254</td>\n","      <td>0.668798</td>\n","      <td>0.006987</td>\n","      <td>0.061147</td>\n","      <td>0.001043</td>\n","    </tr>\n","    <tr>\n","      <th>23</th>\n","      <td>0.703731</td>\n","      <td>0.002569</td>\n","      <td>0.061099</td>\n","      <td>0.000248</td>\n","      <td>0.669624</td>\n","      <td>0.007540</td>\n","      <td>0.061147</td>\n","      <td>0.001043</td>\n","    </tr>\n","    <tr>\n","      <th>24</th>\n","      <td>0.707526</td>\n","      <td>0.002487</td>\n","      <td>0.061094</td>\n","      <td>0.000249</td>\n","      <td>0.670787</td>\n","      <td>0.007780</td>\n","      <td>0.061147</td>\n","      <td>0.001043</td>\n","    </tr>\n","    <tr>\n","      <th>25</th>\n","      <td>0.711652</td>\n","      <td>0.002479</td>\n","      <td>0.061091</td>\n","      <td>0.000251</td>\n","      <td>0.672213</td>\n","      <td>0.007893</td>\n","      <td>0.061143</td>\n","      <td>0.001048</td>\n","    </tr>\n","    <tr>\n","      <th>26</th>\n","      <td>0.715519</td>\n","      <td>0.002609</td>\n","      <td>0.061085</td>\n","      <td>0.000252</td>\n","      <td>0.672985</td>\n","      <td>0.007565</td>\n","      <td>0.061147</td>\n","      <td>0.001043</td>\n","    </tr>\n","    <tr>\n","      <th>27</th>\n","      <td>0.719859</td>\n","      <td>0.002635</td>\n","      <td>0.061083</td>\n","      <td>0.000256</td>\n","      <td>0.673896</td>\n","      <td>0.007566</td>\n","      <td>0.061143</td>\n","      <td>0.001042</td>\n","    </tr>\n","    <tr>\n","      <th>28</th>\n","      <td>0.723592</td>\n","      <td>0.002471</td>\n","      <td>0.061078</td>\n","      <td>0.000254</td>\n","      <td>0.675126</td>\n","      <td>0.007655</td>\n","      <td>0.061139</td>\n","      <td>0.001042</td>\n","    </tr>\n","    <tr>\n","      <th>29</th>\n","      <td>0.727234</td>\n","      <td>0.002890</td>\n","      <td>0.061067</td>\n","      <td>0.000249</td>\n","      <td>0.675711</td>\n","      <td>0.007546</td>\n","      <td>0.061135</td>\n","      <td>0.001045</td>\n","    </tr>\n","    <tr>\n","      <th>30</th>\n","      <td>0.730692</td>\n","      <td>0.002367</td>\n","      <td>0.061059</td>\n","      <td>0.000255</td>\n","      <td>0.676186</td>\n","      <td>0.007704</td>\n","      <td>0.061135</td>\n","      <td>0.001045</td>\n","    </tr>\n","    <tr>\n","      <th>31</th>\n","      <td>0.734220</td>\n","      <td>0.002356</td>\n","      <td>0.061061</td>\n","      <td>0.000252</td>\n","      <td>0.677104</td>\n","      <td>0.007621</td>\n","      <td>0.061139</td>\n","      <td>0.001042</td>\n","    </tr>\n","    <tr>\n","      <th>32</th>\n","      <td>0.738232</td>\n","      <td>0.002140</td>\n","      <td>0.061051</td>\n","      <td>0.000244</td>\n","      <td>0.677636</td>\n","      <td>0.007594</td>\n","      <td>0.061135</td>\n","      <td>0.001045</td>\n","    </tr>\n","    <tr>\n","      <th>33</th>\n","      <td>0.742505</td>\n","      <td>0.002314</td>\n","      <td>0.061037</td>\n","      <td>0.000241</td>\n","      <td>0.678462</td>\n","      <td>0.007357</td>\n","      <td>0.061139</td>\n","      <td>0.001040</td>\n","    </tr>\n","    <tr>\n","      <th>34</th>\n","      <td>0.746309</td>\n","      <td>0.002314</td>\n","      <td>0.061028</td>\n","      <td>0.000246</td>\n","      <td>0.678930</td>\n","      <td>0.007408</td>\n","      <td>0.061143</td>\n","      <td>0.001037</td>\n","    </tr>\n","    <tr>\n","      <th>35</th>\n","      <td>0.749861</td>\n","      <td>0.002027</td>\n","      <td>0.061014</td>\n","      <td>0.000243</td>\n","      <td>0.679480</td>\n","      <td>0.007498</td>\n","      <td>0.061131</td>\n","      <td>0.001046</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["    train-auc-mean  train-auc-std  ...  test-error-mean  test-error-std\n","0         0.605933       0.003491  ...         0.061151        0.001046\n","1         0.627818       0.002168  ...         0.061151        0.001046\n","2         0.638443       0.002976  ...         0.061151        0.001046\n","3         0.642750       0.003517  ...         0.061151        0.001046\n","4         0.649578       0.002375  ...         0.061151        0.001046\n","5         0.653054       0.002606  ...         0.061151        0.001046\n","6         0.656214       0.002809  ...         0.061151        0.001046\n","7         0.660047       0.001553  ...         0.061151        0.001046\n","8         0.662615       0.001161  ...         0.061147        0.001042\n","9         0.664256       0.000714  ...         0.061147        0.001042\n","10        0.667246       0.002621  ...         0.061151        0.001046\n","11        0.670322       0.002670  ...         0.061151        0.001046\n","12        0.672949       0.003020  ...         0.061151        0.001046\n","13        0.674654       0.003101  ...         0.061155        0.001046\n","14        0.677295       0.002608  ...         0.061151        0.001042\n","15        0.680228       0.002123  ...         0.061155        0.001046\n","16        0.683542       0.002229  ...         0.061155        0.001046\n","17        0.686371       0.002642  ...         0.061155        0.001046\n","18        0.688608       0.002820  ...         0.061154        0.001037\n","19        0.691211       0.002529  ...         0.061151        0.001042\n","20        0.693629       0.002462  ...         0.061147        0.001043\n","21        0.697152       0.002750  ...         0.061147        0.001043\n","22        0.700239       0.003055  ...         0.061147        0.001043\n","23        0.703731       0.002569  ...         0.061147        0.001043\n","24        0.707526       0.002487  ...         0.061147        0.001043\n","25        0.711652       0.002479  ...         0.061143        0.001048\n","26        0.715519       0.002609  ...         0.061147        0.001043\n","27        0.719859       0.002635  ...         0.061143        0.001042\n","28        0.723592       0.002471  ...         0.061139        0.001042\n","29        0.727234       0.002890  ...         0.061135        0.001045\n","30        0.730692       0.002367  ...         0.061135        0.001045\n","31        0.734220       0.002356  ...         0.061139        0.001042\n","32        0.738232       0.002140  ...         0.061135        0.001045\n","33        0.742505       0.002314  ...         0.061139        0.001040\n","34        0.746309       0.002314  ...         0.061143        0.001037\n","35        0.749861       0.002027  ...         0.061131        0.001046\n","\n","[36 rows x 8 columns]"]},"metadata":{"tags":[]},"execution_count":30}]},{"cell_type":"code","metadata":{"id":"c9lEeq9fTpNR","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"piw6qZsptF4t","colab_type":"text"},"source":["## Parameter Tuning"]},{"cell_type":"markdown","metadata":{"id":"reRcR-hRFRfH","colab_type":"text"},"source":["#### Number of estimators/Boost rounds"]},{"cell_type":"code","metadata":{"id":"rgUHL--0nuYk","colab_type":"code","colab":{}},"source":["param = {\n","    'base_score': 0.5,\n","    'booster': 'gbtree',\n","    'objective': 'binary:logistic',\n","    # 'eval_metric': [\"auc\",\"logloss\"],\n","    'random_state': 123,\n","    'learning_rate': 0.1\n","} \n","\n","#               'colsample_bynode': 1, 'colsample_bytree': 1, 'gamma': 0,\n","#                'max_delta_step': 0, 'max_depth': 3,\n","#               'min_child_weight': 1, 'n_estimators': 100, 'n_jobs': 1,\n","#               'objective': \n","#               'reg_alpha': 0, 'reg_lambda': 1, 'scale_pos_weight': 1, 'seed': 123,\n","#               'subsample': 1,'silent':True, 'verbosity': 3, \n","# }"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"SDK4GKy_EYl-","colab_type":"code","outputId":"25d13365-e1b6-4a6d-875c-52198cd45192","executionInfo":{"status":"ok","timestamp":1585860303053,"user_tz":-330,"elapsed":265344,"user":{"displayName":"Abhishek Keshari","photoUrl":"","userId":"08321311573619930656"}},"colab":{"base_uri":"https://localhost:8080/","height":267}},"source":["# grid search\n","model = XGBClassifier()\n","param_test1 = dict(n_estimators=[10,50,100])\n","grid_search = GridSearchCV(estimator = model, param_grid = param_test1, scoring='roc_auc',return_train_score=True,verbose=1,n_jobs=4, cv=3)\n","grid_result = grid_search.fit(temp[predictors],temp[target])\n","\n","grid_search_result(grid_result)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Fitting 3 folds for each of 3 candidates, totalling 9 fits\n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=4)]: Using backend LokyBackend with 4 concurrent workers.\n","/usr/local/lib/python3.6/dist-packages/joblib/externals/loky/process_executor.py:706: UserWarning: A worker stopped while some jobs were given to the executor. This can be caused by a too short worker timeout or by a memory leak.\n","  \"timeout or by a memory leak.\", UserWarning\n","[Parallel(n_jobs=4)]: Done   9 out of   9 | elapsed:  4.0min finished\n","/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:235: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:268: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"},{"output_type":"stream","text":["Best: 0.622254 using {'n_estimators': 10}\n","With following parameter: {'n_estimators': 10} Test_auc_score: 0.622254 (0.008843) Train_auc_score: 0.657212 (0.007014)\n","With following parameter: {'n_estimators': 50} Test_auc_score: 0.609140 (0.019357) Train_auc_score: 0.694251 (0.005584)\n","With following parameter: {'n_estimators': 100} Test_auc_score: 0.589973 (0.019792) Train_auc_score: 0.719457 (0.006169)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"qiu8TQUycXHa","colab_type":"code","outputId":"ccb07673-5f80-42d0-a2d0-3156d01ab335","executionInfo":{"status":"ok","timestamp":1585591862994,"user_tz":-330,"elapsed":994,"user":{"displayName":"Abhishek Keshari","photoUrl":"","userId":"08321311573619930656"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["grid_result.cv_results_['mean_test_score']"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.62225446, 0.60914042, 0.58997326, 0.57549973])"]},"metadata":{"tags":[]},"execution_count":16}]},{"cell_type":"code","metadata":{"id":"jJJl4a7RcXEj","colab_type":"code","outputId":"5c1e2dc0-1c37-472c-d0b3-fe45f169ffbc","executionInfo":{"status":"ok","timestamp":1585596166412,"user_tz":-330,"elapsed":297501,"user":{"displayName":"Abhishek Keshari","photoUrl":"","userId":"08321311573619930656"}},"colab":{"base_uri":"https://localhost:8080/","height":392}},"source":["model = XGBClassifier(objective='binary:logistic')\n","n_estimators = [x for x in range(11)]\n","param_test1 = {'n_estimators':[x for x in range(1,11)]}\n","grid_search = GridSearchCV(estimator = model, param_grid = param_test1, scoring='roc_auc',return_train_score=True,verbose=1,n_jobs=4, cv=3)\n","grid_result = grid_search.fit(temp[predictors],temp[target])\n","\n","grid_search_result(grid_result)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Fitting 3 folds for each of 10 candidates, totalling 30 fits\n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=4)]: Using backend LokyBackend with 4 concurrent workers.\n","/usr/local/lib/python3.6/dist-packages/joblib/externals/loky/process_executor.py:706: UserWarning: A worker stopped while some jobs were given to the executor. This can be caused by a too short worker timeout or by a memory leak.\n","  \"timeout or by a memory leak.\", UserWarning\n","[Parallel(n_jobs=4)]: Done  30 out of  30 | elapsed:  4.6min finished\n","/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:235: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:268: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"},{"output_type":"stream","text":["Best: 0.622254 using {'n_estimators': 10}\n","0.609684 (0.008409) with: {'n_estimators': 1}\n","0.616953 (0.007770) with: {'n_estimators': 2}\n","0.615069 (0.005314) with: {'n_estimators': 3}\n","0.620995 (0.007935) with: {'n_estimators': 4}\n","0.620955 (0.008027) with: {'n_estimators': 5}\n","0.617931 (0.007388) with: {'n_estimators': 6}\n","0.618785 (0.007320) with: {'n_estimators': 7}\n","0.619662 (0.008228) with: {'n_estimators': 8}\n","0.620393 (0.006996) with: {'n_estimators': 9}\n","0.622254 (0.008843) with: {'n_estimators': 10}\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"a8coGDW7pA4m","colab_type":"code","outputId":"5e56e6f1-5e81-4e82-8358-4d135dc9a85e","executionInfo":{"status":"ok","timestamp":1585596629273,"user_tz":-330,"elapsed":233886,"user":{"displayName":"Abhishek Keshari","photoUrl":"","userId":"08321311573619930656"}},"colab":{"base_uri":"https://localhost:8080/","height":250}},"source":["model = XGBClassifier(objective='binary:logistic')\n","param_test1 = dict(n_estimators=[x for x in range(11,21,3)])\n","grid_search = GridSearchCV(estimator = model, param_grid = param_test1, scoring='roc_auc',return_train_score=True,verbose=1,n_jobs=4, cv=3)\n","grid_result = grid_search.fit(temp[predictors],temp[target])\n","\n","grid_search_result(grid_result)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Fitting 3 folds for each of 4 candidates, totalling 12 fits\n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=4)]: Using backend LokyBackend with 4 concurrent workers.\n","[Parallel(n_jobs=4)]: Done  12 out of  12 | elapsed:  3.5min finished\n","/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:235: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:268: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"},{"output_type":"stream","text":["Best: 0.623520 using {'n_estimators': 11}\n","0.623520 (0.008966) with: {'n_estimators': 11}\n","0.618170 (0.012543) with: {'n_estimators': 14}\n","0.617194 (0.014655) with: {'n_estimators': 17}\n","0.614955 (0.016829) with: {'n_estimators': 20}\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"gdu5ZPOHvIRF","colab_type":"code","outputId":"c6ceb2cc-c26b-4e27-a606-53a067e0f13a","executionInfo":{"status":"ok","timestamp":1585597436300,"user_tz":-330,"elapsed":199284,"user":{"displayName":"Abhishek Keshari","photoUrl":"","userId":"08321311573619930656"}},"colab":{"base_uri":"https://localhost:8080/","height":285}},"source":["model = XGBClassifier(objective='binary:logistic')\n","n_estimators = \n","param_test1 = dict(n_estimators=[x for x in range(10,14,1)])\n","grid_search = GridSearchCV(estimator = model, param_grid = param_test1, scoring='roc_auc',return_train_score=True,verbose=1,n_jobs=4, cv=3)\n","grid_result = grid_search.fit(temp[predictors],temp[target])\n","\n","grid_search_result(grid_result)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Fitting 3 folds for each of 4 candidates, totalling 12 fits\n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=4)]: Using backend LokyBackend with 4 concurrent workers.\n","/usr/local/lib/python3.6/dist-packages/joblib/externals/loky/process_executor.py:706: UserWarning: A worker stopped while some jobs were given to the executor. This can be caused by a too short worker timeout or by a memory leak.\n","  \"timeout or by a memory leak.\", UserWarning\n","[Parallel(n_jobs=4)]: Done  12 out of  12 | elapsed:  2.9min finished\n","/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:235: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:268: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"},{"output_type":"stream","text":["Best: 0.623520 using {'n_estimators': 11}\n","0.622254 (0.008843) with: {'n_estimators': 10}\n","0.623520 (0.008966) with: {'n_estimators': 11}\n","0.623218 (0.009305) with: {'n_estimators': 12}\n","0.617747 (0.013284) with: {'n_estimators': 13}\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"5ptmZiSdvIOC","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"HtEiddtObKNQ","colab_type":"code","colab":{}},"source":["params = {\n","    # Parameters that we are going to tune.\n","    'n_estimators':11. \n","    'max_depth':6,\n","    'min_child_weight': 10,\n","    'eta':.3,\n","    'subsample': 1,\n","    'colsample_bytree': 1,\n","    # Other parameters\n","    'objective':'binary:logistic',\n","}"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"74FZUXxEAWFn","colab_type":"text"},"source":["#### Parameters max_depth and min_child_weight\n","- It is important to tune them together in order to find a good trade-off between model bias and variance"]},{"cell_type":"code","metadata":{"id":"71crDt_mEYjx","colab_type":"code","outputId":"7ec61245-569b-44c3-854a-ef8da638a6f0","executionInfo":{"status":"ok","timestamp":1585602007700,"user_tz":-330,"elapsed":501314,"user":{"displayName":"Abhishek Keshari","photoUrl":"","userId":"08321311573619930656"}},"colab":{"base_uri":"https://localhost:8080/","height":374}},"source":["model = XGBClassifier(objective='binary:logistic',n_estimators=11)\n","param_test1 = {\n"," 'max_depth':[x for x in range(1,10,3)],\n"," 'min_child_weight':[x for x in range(1,10,3)]\n","}\n","grid_search = GridSearchCV(estimator = model, param_grid = param_test1, scoring='roc_auc',return_train_score=True,verbose=1,n_jobs=4, cv=3)\n","grid_result = grid_search.fit(temp[predictors],temp[target])\n","\n","# summarize results\n","print(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\n","means = grid_result.cv_results_['mean_test_score']\n","stds = grid_result.cv_results_['std_test_score']\n","params = grid_result.cv_results_['params']\n","for mean, stdev, param in zip(means, stds, params):\n","\tprint(\"%f (%f) with: %r\" % (mean, stdev, param))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Fitting 3 folds for each of 9 candidates, totalling 27 fits\n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=4)]: Using backend LokyBackend with 4 concurrent workers.\n","/usr/local/lib/python3.6/dist-packages/joblib/externals/loky/process_executor.py:706: UserWarning: A worker stopped while some jobs were given to the executor. This can be caused by a too short worker timeout or by a memory leak.\n","  \"timeout or by a memory leak.\", UserWarning\n","[Parallel(n_jobs=4)]: Done  27 out of  27 | elapsed:  7.9min finished\n","/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:235: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:268: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"},{"output_type":"stream","text":["Best: 0.620187 using {'max_depth': 4, 'min_child_weight': 7}\n","0.618585 (0.013956) with: {'max_depth': 1, 'min_child_weight': 1}\n","0.618585 (0.013956) with: {'max_depth': 1, 'min_child_weight': 4}\n","0.618585 (0.013956) with: {'max_depth': 1, 'min_child_weight': 7}\n","0.609655 (0.016507) with: {'max_depth': 4, 'min_child_weight': 1}\n","0.618135 (0.010778) with: {'max_depth': 4, 'min_child_weight': 4}\n","0.620187 (0.009861) with: {'max_depth': 4, 'min_child_weight': 7}\n","0.570402 (0.026511) with: {'max_depth': 7, 'min_child_weight': 1}\n","0.573624 (0.025889) with: {'max_depth': 7, 'min_child_weight': 4}\n","0.578837 (0.023827) with: {'max_depth': 7, 'min_child_weight': 7}\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"n2vBzGI7P0OI","colab_type":"code","outputId":"ba708cdc-a32e-4f56-c5ce-77890a405b53","executionInfo":{"status":"ok","timestamp":1585603074309,"user_tz":-330,"elapsed":910683,"user":{"displayName":"Abhishek Keshari","photoUrl":"","userId":"08321311573619930656"}},"colab":{"base_uri":"https://localhost:8080/","height":498}},"source":["model = XGBClassifier(objective='binary:logistic',n_estimators=11)\n","param_test1 = {\n"," 'max_depth':[x for x in range(3,7)],\n"," 'min_child_weight':[x for x in range(5,9)]\n","}\n","grid_search = GridSearchCV(estimator = model, param_grid = param_test1, scoring='roc_auc',return_train_score=True,verbose=1,n_jobs=4, cv=3)\n","grid_result = grid_search.fit(temp[predictors],temp[target])\n","\n","# summarize results\n","print(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\n","means = grid_result.cv_results_['mean_test_score']\n","stds = grid_result.cv_results_['std_test_score']\n","params = grid_result.cv_results_['params']\n","for mean, stdev, param in zip(means, stds, params):\n","\tprint(\"%f (%f) with: %r\" % (mean, stdev, param))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Fitting 3 folds for each of 16 candidates, totalling 48 fits\n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=4)]: Using backend LokyBackend with 4 concurrent workers.\n","/usr/local/lib/python3.6/dist-packages/joblib/externals/loky/process_executor.py:706: UserWarning: A worker stopped while some jobs were given to the executor. This can be caused by a too short worker timeout or by a memory leak.\n","  \"timeout or by a memory leak.\", UserWarning\n","[Parallel(n_jobs=4)]: Done  48 out of  48 | elapsed: 14.7min finished\n","/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:235: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:268: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"},{"output_type":"stream","text":["Best: 0.631117 using {'max_depth': 3, 'min_child_weight': 8}\n","0.629397 (0.010400) with: {'max_depth': 3, 'min_child_weight': 5}\n","0.625504 (0.008439) with: {'max_depth': 3, 'min_child_weight': 6}\n","0.628540 (0.012057) with: {'max_depth': 3, 'min_child_weight': 7}\n","0.631117 (0.008444) with: {'max_depth': 3, 'min_child_weight': 8}\n","0.619755 (0.010953) with: {'max_depth': 4, 'min_child_weight': 5}\n","0.617505 (0.010358) with: {'max_depth': 4, 'min_child_weight': 6}\n","0.620187 (0.009861) with: {'max_depth': 4, 'min_child_weight': 7}\n","0.619242 (0.011284) with: {'max_depth': 4, 'min_child_weight': 8}\n","0.606351 (0.010431) with: {'max_depth': 5, 'min_child_weight': 5}\n","0.604491 (0.010126) with: {'max_depth': 5, 'min_child_weight': 6}\n","0.604344 (0.008736) with: {'max_depth': 5, 'min_child_weight': 7}\n","0.607354 (0.009310) with: {'max_depth': 5, 'min_child_weight': 8}\n","0.591504 (0.017601) with: {'max_depth': 6, 'min_child_weight': 5}\n","0.588948 (0.019222) with: {'max_depth': 6, 'min_child_weight': 6}\n","0.590099 (0.016340) with: {'max_depth': 6, 'min_child_weight': 7}\n","0.592748 (0.014161) with: {'max_depth': 6, 'min_child_weight': 8}\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"9rLNh0jePyiM","colab_type":"code","outputId":"e8d783a0-9ca2-4292-fed8-577c100bd742","executionInfo":{"status":"ok","timestamp":1585631378502,"user_tz":-330,"elapsed":672136,"user":{"displayName":"Abhishek Keshari","photoUrl":"","userId":"08321311573619930656"}},"colab":{"base_uri":"https://localhost:8080/","height":498}},"source":["model = XGBClassifier(objective='binary:logistic',n_estimators=11)\n","param_test1 = {\n"," 'max_depth':[x for x in range(1,5)],\n"," 'min_child_weight':[x for x in range(8,12)]\n","}\n","grid_search = GridSearchCV(estimator = model, param_grid = param_test1, scoring='roc_auc',return_train_score=True,verbose=1,n_jobs=4, cv=3)\n","grid_result = grid_search.fit(temp[predictors],temp[target])\n","\n","# summarize results\n","print(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\n","means = grid_result.cv_results_['mean_test_score']\n","stds = grid_result.cv_results_['std_test_score']\n","params = grid_result.cv_results_['params']\n","for mean, stdev, param in zip(means, stds, params):\n","\tprint(\"%f (%f) with: %r\" % (mean, stdev, param))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Fitting 3 folds for each of 16 candidates, totalling 48 fits\n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=4)]: Using backend LokyBackend with 4 concurrent workers.\n","/usr/local/lib/python3.6/dist-packages/joblib/externals/loky/process_executor.py:706: UserWarning: A worker stopped while some jobs were given to the executor. This can be caused by a too short worker timeout or by a memory leak.\n","  \"timeout or by a memory leak.\", UserWarning\n","[Parallel(n_jobs=4)]: Done  48 out of  48 | elapsed: 10.8min finished\n","/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:235: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:268: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"},{"output_type":"stream","text":["Best: 0.631195 using {'max_depth': 3, 'min_child_weight': 10}\n","0.618585 (0.013956) with: {'max_depth': 1, 'min_child_weight': 8}\n","0.618585 (0.013956) with: {'max_depth': 1, 'min_child_weight': 9}\n","0.618585 (0.013956) with: {'max_depth': 1, 'min_child_weight': 10}\n","0.618585 (0.013956) with: {'max_depth': 1, 'min_child_weight': 11}\n","0.615768 (0.003107) with: {'max_depth': 2, 'min_child_weight': 8}\n","0.615768 (0.003107) with: {'max_depth': 2, 'min_child_weight': 9}\n","0.619720 (0.003062) with: {'max_depth': 2, 'min_child_weight': 10}\n","0.618664 (0.003517) with: {'max_depth': 2, 'min_child_weight': 11}\n","0.631117 (0.008444) with: {'max_depth': 3, 'min_child_weight': 8}\n","0.630729 (0.008986) with: {'max_depth': 3, 'min_child_weight': 9}\n","0.631195 (0.008335) with: {'max_depth': 3, 'min_child_weight': 10}\n","0.630781 (0.008914) with: {'max_depth': 3, 'min_child_weight': 11}\n","0.619242 (0.011284) with: {'max_depth': 4, 'min_child_weight': 8}\n","0.619001 (0.009584) with: {'max_depth': 4, 'min_child_weight': 9}\n","0.618648 (0.009951) with: {'max_depth': 4, 'min_child_weight': 10}\n","0.617399 (0.010865) with: {'max_depth': 4, 'min_child_weight': 11}\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"t2BUCWY7PyfI","colab_type":"code","outputId":"6025ac57-1f37-4d56-ec84-3a71c448c716","executionInfo":{"status":"ok","timestamp":1585632884772,"user_tz":-330,"elapsed":433559,"user":{"displayName":"Abhishek Keshari","photoUrl":"","userId":"08321311573619930656"}},"colab":{"base_uri":"https://localhost:8080/","height":552}},"source":["model = XGBClassifier(objective='binary:logistic',n_estimators=11)\n","param_test1 = {\n"," 'max_depth':[x for x in range(1,4)],\n"," 'min_child_weight':[x for x in range(9,15)]\n","}\n","grid_search = GridSearchCV(estimator = model, param_grid = param_test1, scoring='roc_auc',return_train_score=True,verbose=1,n_jobs=4, cv=3)\n","grid_result = grid_search.fit(temp[predictors],temp[target])\n","\n","# summarize results\n","print(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\n","means = grid_result.cv_results_['mean_test_score']\n","stds = grid_result.cv_results_['std_test_score']\n","params = grid_result.cv_results_['params']\n","for mean, stdev, param in zip(means, stds, params):\n","\tprint(\"%f (%f) with: %r\" % (mean, stdev, param))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Fitting 3 folds for each of 18 candidates, totalling 54 fits\n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=4)]: Using backend LokyBackend with 4 concurrent workers.\n","/usr/local/lib/python3.6/dist-packages/joblib/externals/loky/process_executor.py:706: UserWarning: A worker stopped while some jobs were given to the executor. This can be caused by a too short worker timeout or by a memory leak.\n","  \"timeout or by a memory leak.\", UserWarning\n","[Parallel(n_jobs=4)]: Done  42 tasks      | elapsed:  8.1min\n","[Parallel(n_jobs=4)]: Done  54 out of  54 | elapsed: 10.6min finished\n","/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:235: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:268: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"},{"output_type":"stream","text":["Best: 0.631195 using {'max_depth': 3, 'min_child_weight': 10}\n","0.618585 (0.013956) with: {'max_depth': 1, 'min_child_weight': 9}\n","0.618585 (0.013956) with: {'max_depth': 1, 'min_child_weight': 10}\n","0.618585 (0.013956) with: {'max_depth': 1, 'min_child_weight': 11}\n","0.618585 (0.013956) with: {'max_depth': 1, 'min_child_weight': 12}\n","0.618585 (0.013956) with: {'max_depth': 1, 'min_child_weight': 13}\n","0.618585 (0.013956) with: {'max_depth': 1, 'min_child_weight': 14}\n","0.615768 (0.003107) with: {'max_depth': 2, 'min_child_weight': 9}\n","0.619720 (0.003062) with: {'max_depth': 2, 'min_child_weight': 10}\n","0.618664 (0.003517) with: {'max_depth': 2, 'min_child_weight': 11}\n","0.618664 (0.003517) with: {'max_depth': 2, 'min_child_weight': 12}\n","0.618600 (0.003426) with: {'max_depth': 2, 'min_child_weight': 13}\n","0.618600 (0.003426) with: {'max_depth': 2, 'min_child_weight': 14}\n","0.630729 (0.008986) with: {'max_depth': 3, 'min_child_weight': 9}\n","0.631195 (0.008335) with: {'max_depth': 3, 'min_child_weight': 10}\n","0.630781 (0.008914) with: {'max_depth': 3, 'min_child_weight': 11}\n","0.630774 (0.008923) with: {'max_depth': 3, 'min_child_weight': 12}\n","0.630715 (0.009006) with: {'max_depth': 3, 'min_child_weight': 13}\n","0.630535 (0.009257) with: {'max_depth': 3, 'min_child_weight': 14}\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"HkLOrBuCGAwp","colab_type":"text"},"source":["#### Tune gamma"]},{"cell_type":"code","metadata":{"id":"PXQWJxOHPycO","colab_type":"code","outputId":"3b6d7ba3-71b1-4833-807e-b17c8d80f273","executionInfo":{"status":"ok","timestamp":1585633996263,"user_tz":-330,"elapsed":258460,"user":{"displayName":"Abhishek Keshari","photoUrl":"","userId":"08321311573619930656"}},"colab":{"base_uri":"https://localhost:8080/","height":303}},"source":["model = XGBClassifier(objective='binary:logistic', n_estimators=11, max_depth=3, min_child_weight=10)\n","param_test1 = {\n","'gamma':[i/10.0 for i in range(0,5)]\n","}\n","grid_search = GridSearchCV(estimator = model, param_grid = param_test1, scoring='roc_auc',return_train_score=True,verbose=1,n_jobs=4, cv=3)\n","grid_result = grid_search.fit(temp[predictors],temp[target])\n","\n","# summarize results\n","print(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\n","means = grid_result.cv_results_['mean_test_score']\n","stds = grid_result.cv_results_['std_test_score']\n","params = grid_result.cv_results_['params']\n","for mean, stdev, param in zip(means, stds, params):\n","\tprint(\"%f (%f) with: %r\" % (mean, stdev, param))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Fitting 3 folds for each of 5 candidates, totalling 15 fits\n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=4)]: Using backend LokyBackend with 4 concurrent workers.\n","/usr/local/lib/python3.6/dist-packages/joblib/externals/loky/process_executor.py:706: UserWarning: A worker stopped while some jobs were given to the executor. This can be caused by a too short worker timeout or by a memory leak.\n","  \"timeout or by a memory leak.\", UserWarning\n","[Parallel(n_jobs=4)]: Done  15 out of  15 | elapsed:  3.8min finished\n","/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:235: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:268: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"},{"output_type":"stream","text":["Best: 0.631195 using {'gamma': 0.0}\n","0.631195 (0.008335) with: {'gamma': 0.0}\n","0.631195 (0.008335) with: {'gamma': 0.1}\n","0.631195 (0.008335) with: {'gamma': 0.2}\n","0.631195 (0.008335) with: {'gamma': 0.3}\n","0.631195 (0.008335) with: {'gamma': 0.4}\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"RD08JXoTKA91","colab_type":"text"},"source":["#### Tune subsample and colsample_bytree"]},{"cell_type":"code","metadata":{"id":"i6yEO5zgPyZr","colab_type":"code","outputId":"a3819d69-c3bb-448e-d96e-6a4999169663","executionInfo":{"status":"ok","timestamp":1585634830092,"user_tz":-330,"elapsed":695578,"user":{"displayName":"Abhishek Keshari","photoUrl":"","userId":"08321311573619930656"}},"colab":{"base_uri":"https://localhost:8080/","height":463}},"source":["model = XGBClassifier(objective='binary:logistic', n_estimators=11, max_depth=3, min_child_weight=10,gamma=0.0)\n","param_test1 = {\n"," 'subsample':[i/10.0 for i in range(6,10)],\n"," 'colsample_bytree':[i/10.0 for i in range(6,10)]\n","}\n","grid_search = GridSearchCV(estimator = model, param_grid = param_test1, scoring='roc_auc',return_train_score=True,verbose=1,n_jobs=4, cv=3)\n","grid_result = grid_search.fit(temp[predictors],temp[target])\n","\n","# summarize results\n","print(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\n","means = grid_result.cv_results_['mean_test_score']\n","stds = grid_result.cv_results_['std_test_score']\n","params = grid_result.cv_results_['params']\n","for mean, stdev, param in zip(means, stds, params):\n","\tprint(\"%f (%f) with: %r\" % (mean, stdev, param))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Fitting 3 folds for each of 16 candidates, totalling 48 fits\n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=4)]: Using backend LokyBackend with 4 concurrent workers.\n","[Parallel(n_jobs=4)]: Done  48 out of  48 | elapsed: 11.1min finished\n","/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:235: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:268: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"},{"output_type":"stream","text":["Best: 0.629006 using {'colsample_bytree': 0.9, 'subsample': 0.9}\n","0.612059 (0.016334) with: {'colsample_bytree': 0.6, 'subsample': 0.6}\n","0.614789 (0.018510) with: {'colsample_bytree': 0.6, 'subsample': 0.7}\n","0.628224 (0.008553) with: {'colsample_bytree': 0.6, 'subsample': 0.8}\n","0.621756 (0.013403) with: {'colsample_bytree': 0.6, 'subsample': 0.9}\n","0.625682 (0.010506) with: {'colsample_bytree': 0.7, 'subsample': 0.6}\n","0.613243 (0.015896) with: {'colsample_bytree': 0.7, 'subsample': 0.7}\n","0.621678 (0.010556) with: {'colsample_bytree': 0.7, 'subsample': 0.8}\n","0.615464 (0.016214) with: {'colsample_bytree': 0.7, 'subsample': 0.9}\n","0.624396 (0.004500) with: {'colsample_bytree': 0.8, 'subsample': 0.6}\n","0.619646 (0.012479) with: {'colsample_bytree': 0.8, 'subsample': 0.7}\n","0.626604 (0.015835) with: {'colsample_bytree': 0.8, 'subsample': 0.8}\n","0.619387 (0.014974) with: {'colsample_bytree': 0.8, 'subsample': 0.9}\n","0.627506 (0.004915) with: {'colsample_bytree': 0.9, 'subsample': 0.6}\n","0.625157 (0.007004) with: {'colsample_bytree': 0.9, 'subsample': 0.7}\n","0.628503 (0.008424) with: {'colsample_bytree': 0.9, 'subsample': 0.8}\n","0.629006 (0.008448) with: {'colsample_bytree': 0.9, 'subsample': 0.9}\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"riCs6YTvKOLG","colab_type":"code","outputId":"9a5673c6-6847-4bc9-bc8f-266038b6619f","executionInfo":{"status":"ok","timestamp":1585637413887,"user_tz":-330,"elapsed":1125945,"user":{"displayName":"Abhishek Keshari","photoUrl":"","userId":"08321311573619930656"}},"colab":{"base_uri":"https://localhost:8080/","height":285}},"source":["model = XGBClassifier(objective='binary:logistic', n_estimators=11, max_depth=3, min_child_weight=10,gamma=0.0)\n","param_test1 = {\n"," 'subsample':[i/20.0 for i in range(16,21)],\n"," 'colsample_bytree':[i/20.0 for i in range(16,21)]\n","}\n","grid_search = GridSearchCV(estimator = model, param_grid = param_test1, scoring='roc_auc',return_train_score=True,verbose=1,n_jobs=4, cv=3)\n","grid_result = grid_search.fit(temp[predictors],temp[target])\n","\n","# summarize results\n","print(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\n","params = grid_result.cv_results_['params']\n","means_test = grid_result.cv_results_['mean_test_score']\n","stds_test = grid_result.cv_results_['std_test_score']\n","means_train = grid_result.cv_results_['mean_train_score']\n","stds_train = grid_result.cv_results_['std_train_score']\n","for param, mean_test, stdev_test, mean_train, stdev_train in zip(params, means_test, stds_test, means_train, stds_train):\n","  print(\"With following parameter: %r\" % (param),end=' ')\n","  print(\"Test_auc_score: %f (%f)\" % (mean_test, stdev_test),end=' ')\n","  print(\"Train_auc_score: %f (%f)\" % (mean_train, stdev_train))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Fitting 3 folds for each of 25 candidates, totalling 75 fits\n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=4)]: Using backend LokyBackend with 4 concurrent workers.\n","/usr/local/lib/python3.6/dist-packages/joblib/externals/loky/process_executor.py:706: UserWarning: A worker stopped while some jobs were given to the executor. This can be caused by a too short worker timeout or by a memory leak.\n","  \"timeout or by a memory leak.\", UserWarning\n","[Parallel(n_jobs=4)]: Done  42 tasks      | elapsed: 10.6min\n","[Parallel(n_jobs=4)]: Done  75 out of  75 | elapsed: 18.3min finished\n","/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:235: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:268: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"},{"output_type":"stream","text":["Best: 0.632398 using {'colsample_bytree': 0.9, 'subsample': 0.85}\n","With following parameter: {'colsample_bytree': 0.9, 'subsample': 0.9} Test_auc_score: 0.626604 (0.015835) Train_auc_score: 0.661901 (0.004649)\n","With following parameter: {'colsample_bytree': 0.9, 'subsample': 0.9} Test_auc_score: 0.623415 (0.008859) Train_auc_score: 0.662959 (0.005216)\n","With following parameter: {'colsample_bytree': 0.9, 'subsample': 0.9} Test_auc_score: 0.619387 (0.014974) Train_auc_score: 0.661228 (0.004276)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"dVERbqsRKVOE","colab_type":"text"},"source":["#### Tuning Regularization Parameters"]},{"cell_type":"code","metadata":{"id":"Am-VcQ_RKUzD","colab_type":"code","outputId":"f787bae6-a8e4-4a30-9161-b2ea945625f0","executionInfo":{"status":"ok","timestamp":1585639099808,"user_tz":-330,"elapsed":237484,"user":{"displayName":"Abhishek Keshari","photoUrl":"","userId":"08321311573619930656"}},"colab":{"base_uri":"https://localhost:8080/","height":267}},"source":["model = XGBClassifier(objective='binary:logistic', n_estimators=11, max_depth=3, min_child_weight=10,gamma=0.0,colsample_bytree=0.9,subsample=0.85)\n","param_test1 = {\n"," 'reg_alpha':[1e-5, 1e-2, 0.1, 1, 100]\n","}\n","grid_search = GridSearchCV(estimator = model, param_grid = param_test1, scoring='roc_auc',return_train_score=True,verbose=1,n_jobs=4, cv=3)\n","grid_result = grid_search.fit(temp[predictors],temp[target])\n","\n","# summarize results\n","print(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\n","params = grid_result.cv_results_['params']\n","means_test = grid_result.cv_results_['mean_test_score']\n","stds_test = grid_result.cv_results_['std_test_score']\n","means_train = grid_result.cv_results_['mean_train_score']\n","stds_train = grid_result.cv_results_['std_train_score']\n","for param, mean_test, stdev_test, mean_train, stdev_train in zip(params, means_test, stds_test, means_train, stds_train):\n","  print(\"With following parameter: %r\" % (param),end=' ')\n","  print(\"Test_auc_score: %f (%f)\" % (mean_test, stdev_test),end=' ')\n","  print(\"Train_auc_score: %f (%f)\" % (mean_train, stdev_train))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Fitting 3 folds for each of 5 candidates, totalling 15 fits\n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=4)]: Using backend LokyBackend with 4 concurrent workers.\n","[Parallel(n_jobs=4)]: Done  15 out of  15 | elapsed:  3.5min finished\n","/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:235: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:268: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"},{"output_type":"stream","text":["Best: 0.632417 using {'reg_alpha': 0.1}\n","With following parameter: {'reg_alpha': 1e-05} Test_auc_score: 0.632398 (0.009111) Train_auc_score: 0.660369 (0.006259)\n","With following parameter: {'reg_alpha': 0.01} Test_auc_score: 0.632394 (0.009106) Train_auc_score: 0.660371 (0.006258)\n","With following parameter: {'reg_alpha': 0.1} Test_auc_score: 0.632417 (0.009128) Train_auc_score: 0.660367 (0.006264)\n","With following parameter: {'reg_alpha': 1} Test_auc_score: 0.631920 (0.009791) Train_auc_score: 0.660772 (0.006675)\n","With following parameter: {'reg_alpha': 100} Test_auc_score: 0.604989 (0.011126) Train_auc_score: 0.631935 (0.006759)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"rW-m9H1wKOIq","colab_type":"code","outputId":"69d17129-ac18-45eb-f32a-f55fd2e81585","executionInfo":{"status":"ok","timestamp":1585639378822,"user_tz":-330,"elapsed":279002,"user":{"displayName":"Abhishek Keshari","photoUrl":"","userId":"08321311573619930656"}},"colab":{"base_uri":"https://localhost:8080/","height":285}},"source":["model = XGBClassifier(objective='binary:logistic', n_estimators=11, max_depth=3, min_child_weight=10,gamma=0.0,colsample_bytree=0.9,subsample=0.85)\n","param_test1 = {\n"," 'reg_alpha':[0.05, 0.1, 0.2, 0.3, 0.5, 0.5]\n","}\n","grid_search = GridSearchCV(estimator = model, param_grid = param_test1, scoring='roc_auc',return_train_score=True,verbose=1,n_jobs=4, cv=3)\n","grid_result = grid_search.fit(temp[predictors],temp[target])\n","\n","# summarize results\n","print(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\n","params = grid_result.cv_results_['params']\n","means_test = grid_result.cv_results_['mean_test_score']\n","stds_test = grid_result.cv_results_['std_test_score']\n","means_train = grid_result.cv_results_['mean_train_score']\n","stds_train = grid_result.cv_results_['std_train_score']\n","for param, mean_test, stdev_test, mean_train, stdev_train in zip(params, means_test, stds_test, means_train, stds_train):\n","  print(\"With following parameter: %r\" % (param),end=' ')\n","  print(\"Test_auc_score: %f (%f)\" % (mean_test, stdev_test),end=' ')\n","  print(\"Train_auc_score: %f (%f)\" % (mean_train, stdev_train))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Fitting 3 folds for each of 6 candidates, totalling 18 fits\n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=4)]: Using backend LokyBackend with 4 concurrent workers.\n","[Parallel(n_jobs=4)]: Done  18 out of  18 | elapsed:  4.2min finished\n","/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:235: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:268: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"},{"output_type":"stream","text":["Best: 0.632417 using {'reg_alpha': 0.1}\n","With following parameter: {'reg_alpha': 0.05} Test_auc_score: 0.632396 (0.009108) Train_auc_score: 0.660375 (0.006252)\n","With following parameter: {'reg_alpha': 0.1} Test_auc_score: 0.632417 (0.009128) Train_auc_score: 0.660367 (0.006264)\n","With following parameter: {'reg_alpha': 0.2} Test_auc_score: 0.631876 (0.008874) Train_auc_score: 0.660302 (0.006377)\n","With following parameter: {'reg_alpha': 0.3} Test_auc_score: 0.631579 (0.009284) Train_auc_score: 0.660852 (0.006599)\n","With following parameter: {'reg_alpha': 0.5} Test_auc_score: 0.631578 (0.009279) Train_auc_score: 0.660855 (0.006599)\n","With following parameter: {'reg_alpha': 0.5} Test_auc_score: 0.631578 (0.009279) Train_auc_score: 0.660855 (0.006599)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"NglSOBFBYPE6","colab_type":"text"},"source":["#### Reducing Learning Rate"]},{"cell_type":"code","metadata":{"id":"2-mO0lkkKOGN","colab_type":"code","outputId":"ddc414a3-028a-4c00-986c-2f43c2374a49","executionInfo":{"status":"ok","timestamp":1585639738324,"user_tz":-330,"elapsed":197075,"user":{"displayName":"Abhishek Keshari","photoUrl":"","userId":"08321311573619930656"}},"colab":{"base_uri":"https://localhost:8080/","height":250}},"source":["model = XGBClassifier(objective='binary:logistic', n_estimators=11, max_depth=3, min_child_weight=10,gamma=0.0,colsample_bytree=0.9,subsample=0.85, reg_alpha=0.1)\n","param_test1 = {\n"," 'learning_rate':[0.05, 0.1, 0.5, 1]\n","}\n","grid_search = GridSearchCV(estimator = model, param_grid = param_test1, scoring='roc_auc',return_train_score=True,verbose=1,n_jobs=4, cv=3)\n","grid_result = grid_search.fit(temp[predictors],temp[target])\n","\n","# summarize results\n","print(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\n","params = grid_result.cv_results_['params']\n","means_test = grid_result.cv_results_['mean_test_score']\n","stds_test = grid_result.cv_results_['std_test_score']\n","means_train = grid_result.cv_results_['mean_train_score']\n","stds_train = grid_result.cv_results_['std_train_score']\n","for param, mean_test, stdev_test, mean_train, stdev_train in zip(params, means_test, stds_test, means_train, stds_train):\n","  print(\"With following parameter: %r\" % (param),end=' ')\n","  print(\"Test_auc_score: %f (%f)\" % (mean_test, stdev_test),end=' ')\n","  print(\"Train_auc_score: %f (%f)\" % (mean_train, stdev_train))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Fitting 3 folds for each of 4 candidates, totalling 12 fits\n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=4)]: Using backend LokyBackend with 4 concurrent workers.\n","[Parallel(n_jobs=4)]: Done  12 out of  12 | elapsed:  2.8min finished\n","/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:235: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:268: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"},{"output_type":"stream","text":["Best: 0.632417 using {'learning_rate': 0.1}\n","With following parameter: {'learning_rate': 0.05} Test_auc_score: 0.630322 (0.009301) Train_auc_score: 0.657031 (0.006162)\n","With following parameter: {'learning_rate': 0.1} Test_auc_score: 0.632417 (0.009128) Train_auc_score: 0.660367 (0.006264)\n","With following parameter: {'learning_rate': 0.5} Test_auc_score: 0.602306 (0.028873) Train_auc_score: 0.691583 (0.006538)\n","With following parameter: {'learning_rate': 1} Test_auc_score: 0.573559 (0.023700) Train_auc_score: 0.698585 (0.009935)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"FSyqx9mDKOCQ","colab_type":"code","outputId":"5feb96ba-71ed-464e-e8b5-e2dd64650a1c","executionInfo":{"status":"ok","timestamp":1585640391144,"user_tz":-330,"elapsed":247295,"user":{"displayName":"Abhishek Keshari","photoUrl":"","userId":"08321311573619930656"}},"colab":{"base_uri":"https://localhost:8080/","height":303}},"source":["model = XGBClassifier(objective='binary:logistic', n_estimators=11, max_depth=3, min_child_weight=10,gamma=0.0,colsample_bytree=0.9,subsample=0.85, reg_alpha=0.1)\n","param_test1 = {\n"," 'learning_rate':[0.09, 0.1, 0.2, 0.3, 0.4]\n","}\n","grid_search = GridSearchCV(estimator = model, param_grid = param_test1, scoring='roc_auc',return_train_score=True,verbose=1,n_jobs=4, cv=3)\n","grid_result = grid_search.fit(temp[predictors],temp[target])\n","\n","# summarize results\n","print(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\n","params = grid_result.cv_results_['params']\n","means_test = grid_result.cv_results_['mean_test_score']\n","stds_test = grid_result.cv_results_['std_test_score']\n","means_train = grid_result.cv_results_['mean_train_score']\n","stds_train = grid_result.cv_results_['std_train_score']\n","for param, mean_test, stdev_test, mean_train, stdev_train in zip(params, means_test, stds_test, means_train, stds_train):\n","  print(\"With following parameter: %r\" % (param),end=' ')\n","  print(\"Test_auc_score: %f (%f)\" % (mean_test, stdev_test),end=' ')\n","  print(\"Train_auc_score: %f (%f)\" % (mean_train, stdev_train))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Fitting 3 folds for each of 5 candidates, totalling 15 fits\n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=4)]: Using backend LokyBackend with 4 concurrent workers.\n","/usr/local/lib/python3.6/dist-packages/joblib/externals/loky/process_executor.py:706: UserWarning: A worker stopped while some jobs were given to the executor. This can be caused by a too short worker timeout or by a memory leak.\n","  \"timeout or by a memory leak.\", UserWarning\n","[Parallel(n_jobs=4)]: Done  15 out of  15 | elapsed:  3.7min finished\n","/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:235: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:268: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"},{"output_type":"stream","text":["Best: 0.632417 using {'learning_rate': 0.1}\n","With following parameter: {'learning_rate': 0.09} Test_auc_score: 0.632299 (0.010157) Train_auc_score: 0.659878 (0.006382)\n","With following parameter: {'learning_rate': 0.1} Test_auc_score: 0.632417 (0.009128) Train_auc_score: 0.660367 (0.006264)\n","With following parameter: {'learning_rate': 0.2} Test_auc_score: 0.618975 (0.013676) Train_auc_score: 0.667819 (0.005705)\n","With following parameter: {'learning_rate': 0.3} Test_auc_score: 0.624821 (0.014919) Train_auc_score: 0.677052 (0.006228)\n","With following parameter: {'learning_rate': 0.4} Test_auc_score: 0.623316 (0.012055) Train_auc_score: 0.683654 (0.006159)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"XE6IGAivKN_o","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"YpdUW-HjJG86","colab_type":"text"},"source":["#### Scale_pos_weight tuning"]},{"cell_type":"code","metadata":{"id":"pJwByt3bJBbo","colab_type":"code","outputId":"9461da16-cf5c-40e2-98cb-7202ce1838cb","executionInfo":{"status":"ok","timestamp":1585651218390,"user_tz":-330,"elapsed":357615,"user":{"displayName":"Abhishek Keshari","photoUrl":"","userId":"08321311573619930656"}},"colab":{"base_uri":"https://localhost:8080/","height":356}},"source":["model = XGBClassifier(objective='binary:logistic', learning_rate=0.1, n_estimators=11, max_depth=3,\n","                      min_child_weight=10,gamma=0.0,colsample_bytree=0.9,subsample=0.85, reg_alpha=0.1)\n","param_test1 = {\n"," 'scale_pos_weight': [1, 10, 25, 50, 75, 99, 100, 1000]\n","}\n","grid_search = GridSearchCV(estimator = model, param_grid = param_test1, scoring='roc_auc',return_train_score=True,verbose=1,n_jobs=4, cv=3)\n","grid_result = grid_search.fit(temp[predictors],temp[target])\n","\n","# summarize results\n","print(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\n","params = grid_result.cv_results_['params']\n","means_test = grid_result.cv_results_['mean_test_score']\n","stds_test = grid_result.cv_results_['std_test_score']\n","means_train = grid_result.cv_results_['mean_train_score']\n","stds_train = grid_result.cv_results_['std_train_score']\n","for param, mean_test, stdev_test, mean_train, stdev_train in zip(params, means_test, stds_test, means_train, stds_train):\n","  print(\"With following parameter: %r\" % (param),end=' ')\n","  print(\"Test_auc_score: %f (%f)\" % (mean_test, stdev_test),end=' ')\n","  print(\"Train_auc_score: %f (%f)\" % (mean_train, stdev_train))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Fitting 3 folds for each of 8 candidates, totalling 24 fits\n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=4)]: Using backend LokyBackend with 4 concurrent workers.\n","/usr/local/lib/python3.6/dist-packages/joblib/externals/loky/process_executor.py:706: UserWarning: A worker stopped while some jobs were given to the executor. This can be caused by a too short worker timeout or by a memory leak.\n","  \"timeout or by a memory leak.\", UserWarning\n","[Parallel(n_jobs=4)]: Done  24 out of  24 | elapsed:  5.5min finished\n","/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:235: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:268: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"},{"output_type":"stream","text":["Best: 0.632417 using {'scale_pos_weight': 1}\n","With following parameter: {'scale_pos_weight': 1} Test_auc_score: 0.632417 (0.009128) Train_auc_score: 0.660367 (0.006264)\n","With following parameter: {'scale_pos_weight': 10} Test_auc_score: 0.627739 (0.014304) Train_auc_score: 0.671293 (0.005341)\n","With following parameter: {'scale_pos_weight': 25} Test_auc_score: 0.615131 (0.010909) Train_auc_score: 0.672345 (0.006772)\n","With following parameter: {'scale_pos_weight': 50} Test_auc_score: 0.607903 (0.014839) Train_auc_score: 0.670060 (0.006839)\n","With following parameter: {'scale_pos_weight': 75} Test_auc_score: 0.601957 (0.020380) Train_auc_score: 0.668657 (0.007406)\n","With following parameter: {'scale_pos_weight': 99} Test_auc_score: 0.597903 (0.023562) Train_auc_score: 0.667841 (0.006002)\n","With following parameter: {'scale_pos_weight': 100} Test_auc_score: 0.597871 (0.023602) Train_auc_score: 0.667839 (0.006007)\n","With following parameter: {'scale_pos_weight': 1000} Test_auc_score: 0.606734 (0.023702) Train_auc_score: 0.635009 (0.012359)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"XUbyobrAJD3A","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"cfRd2WMFlawa","colab_type":"text"},"source":["## Running the model with the parameters obtrained"]},{"cell_type":"code","metadata":{"id":"59YlSirXulW_","colab_type":"code","outputId":"0e119717-449e-4cc7-9176-f737a2ae9965","executionInfo":{"status":"ok","timestamp":1585837879929,"user_tz":-330,"elapsed":137188,"user":{"displayName":"Abhishek Keshari","photoUrl":"","userId":"08321311573619930656"}},"colab":{"base_uri":"https://localhost:8080/","height":667}},"source":["params = {\n","    'objective': 'binary:logistic',\n","    'learning_rate': 0.1,\n","     'max_depth': 3,\n","     'min_child_weight': 10,\n","     'gamma': 0.0,\n","     'colsample_bytree': 0.9,\n","     'subsample': 0.85, \n","     'reg_alpha': 0.1,\n","     'random_state': 123,\n","     \n","     'base_score': 0.5,\n","     'booster': 'gbtree', \n","     'colsample_bylevel': 1,\n","     'colsample_bynode': 1,\n","     'max_delta_step': 0, \n","     'n_jobs': 1,\n","\n","    # 'colsample_bytree': 1, 'gamma': 0, 'learning_rate': 0.1, 'max_depth': 3, 'min_child_weight': 1, 'n_estimators': 100, \n","    # 'objective': 'binary:logistic', 'random_state': 0, 'reg_alpha': 0,'subsample': 1,\n","    'reg_lambda': 1, \n","    'scale_pos_weight': 1, \n","    'seed': 123,\n","    'silent':True,\n","    'verbosity': 3,\n","    'eval_metric': [\"auc\",\"logloss\"]\n","}\n","\n","dtrain = xgb.DMatrix(data=X_train,label=y_train)\n","dtest = xgb.DMatrix(data=X_test,label=y_test)\n","\n","xg2 =  xgb.train(\n","    params,\n","    dtrain,\n","    num_boost_round=11,\n","    evals=[(dtrain,\"Train\"),(dtest, \"Test\")],\n","    early_stopping_rounds=20,verbose_eval=10\n",")\n","\n","preds = xg2.predict(dtest)\n","print(np.mean(y_pred),np.min(y_pred),np.max(y_pred))\n","labels = dtest.get_label()\n","\n","p = [1 if (preds[i] > 0.5) else 0 for i in range(len(preds))]\n","p = pd.DataFrame(p)\n","print(p[0].value_counts())\n","\n","\n","dtrain = xgb.DMatrix(temp[predictors], label=temp[target])\n","# dtest = xgb.DMatrix(X_test, label=y_test)\n","cv_results = xgb.cv(\n","    params,\n","    dtrain,\n","    seed=123,\n","    nfold=5,\n","    early_stopping_rounds=10,\n","    as_pandas=True,\n","    verbose_eval=1\n",")\n","cv_results"],"execution_count":0,"outputs":[{"output_type":"stream","text":["[0]\tTrain-auc:0.635026\tTrain-logloss:0.619533\tTest-auc:0.624988\tTest-logloss:0.619324\n","Multiple eval metrics have been passed: 'Test-logloss' will be used for early stopping.\n","\n","Will train until Test-logloss hasn't improved in 20 rounds.\n","[10]\tTrain-auc:0.657512\tTrain-logloss:0.306987\tTest-auc:0.643428\tTest-logloss:0.305313\n","0.061188366 0.0044268523 0.7863983\n","0    78260\n","Name: 0, dtype: int64\n","[0]\ttrain-auc:0.632948+0.00173128\ttrain-logloss:0.619398+9.10178e-05\ttest-auc:0.631723+0.00329905\ttest-logloss:0.619701+0.000202648\n","[1]\ttrain-auc:0.640194+0.00251031\ttrain-logloss:0.559312+0.000323279\ttest-auc:0.637568+0.00449051\ttest-logloss:0.559467+0.000329602\n","[2]\ttrain-auc:0.644821+0.00274542\ttrain-logloss:0.509729+0.000221986\ttest-auc:0.642082+0.00343811\ttest-logloss:0.509719+0.000485721\n","[3]\ttrain-auc:0.646711+0.00317127\ttrain-logloss:0.467759+0.000241334\ttest-auc:0.64357+0.0030438\ttest-logloss:0.468039+0.000519723\n","[4]\ttrain-auc:0.647334+0.00264437\ttrain-logloss:0.432669+0.000226592\ttest-auc:0.644547+0.00370614\ttest-logloss:0.432773+0.000677191\n","[5]\ttrain-auc:0.647903+0.00244419\ttrain-logloss:0.403014+0.000360203\ttest-auc:0.645014+0.00375586\ttest-logloss:0.402833+0.000761951\n","[6]\ttrain-auc:0.64973+0.0024775\ttrain-logloss:0.377212+0.000433869\ttest-auc:0.646196+0.00321049\ttest-logloss:0.37721+0.000846953\n","[7]\ttrain-auc:0.649935+0.00267339\ttrain-logloss:0.35531+0.000444942\ttest-auc:0.646215+0.00298215\ttest-logloss:0.355383+0.000996503\n","[8]\ttrain-auc:0.651683+0.00329703\ttrain-logloss:0.336458+0.00041812\ttest-auc:0.648088+0.00288594\ttest-logloss:0.336599+0.0010738\n","[9]\ttrain-auc:0.652886+0.00278188\ttrain-logloss:0.320247+0.000432927\ttest-auc:0.648678+0.00369005\ttest-logloss:0.32041+0.00119158\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>train-auc-mean</th>\n","      <th>train-auc-std</th>\n","      <th>train-logloss-mean</th>\n","      <th>train-logloss-std</th>\n","      <th>test-auc-mean</th>\n","      <th>test-auc-std</th>\n","      <th>test-logloss-mean</th>\n","      <th>test-logloss-std</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.632948</td>\n","      <td>0.001731</td>\n","      <td>0.619398</td>\n","      <td>0.000091</td>\n","      <td>0.631723</td>\n","      <td>0.003299</td>\n","      <td>0.619701</td>\n","      <td>0.000203</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.640194</td>\n","      <td>0.002510</td>\n","      <td>0.559312</td>\n","      <td>0.000323</td>\n","      <td>0.637568</td>\n","      <td>0.004491</td>\n","      <td>0.559467</td>\n","      <td>0.000330</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.644821</td>\n","      <td>0.002745</td>\n","      <td>0.509729</td>\n","      <td>0.000222</td>\n","      <td>0.642082</td>\n","      <td>0.003438</td>\n","      <td>0.509719</td>\n","      <td>0.000486</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.646711</td>\n","      <td>0.003171</td>\n","      <td>0.467759</td>\n","      <td>0.000241</td>\n","      <td>0.643570</td>\n","      <td>0.003044</td>\n","      <td>0.468039</td>\n","      <td>0.000520</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.647334</td>\n","      <td>0.002644</td>\n","      <td>0.432669</td>\n","      <td>0.000227</td>\n","      <td>0.644547</td>\n","      <td>0.003706</td>\n","      <td>0.432773</td>\n","      <td>0.000677</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>0.647903</td>\n","      <td>0.002444</td>\n","      <td>0.403014</td>\n","      <td>0.000360</td>\n","      <td>0.645014</td>\n","      <td>0.003756</td>\n","      <td>0.402833</td>\n","      <td>0.000762</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>0.649730</td>\n","      <td>0.002477</td>\n","      <td>0.377212</td>\n","      <td>0.000434</td>\n","      <td>0.646196</td>\n","      <td>0.003210</td>\n","      <td>0.377210</td>\n","      <td>0.000847</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>0.649935</td>\n","      <td>0.002673</td>\n","      <td>0.355310</td>\n","      <td>0.000445</td>\n","      <td>0.646215</td>\n","      <td>0.002982</td>\n","      <td>0.355383</td>\n","      <td>0.000997</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>0.651683</td>\n","      <td>0.003297</td>\n","      <td>0.336458</td>\n","      <td>0.000418</td>\n","      <td>0.648088</td>\n","      <td>0.002886</td>\n","      <td>0.336599</td>\n","      <td>0.001074</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>0.652886</td>\n","      <td>0.002782</td>\n","      <td>0.320247</td>\n","      <td>0.000433</td>\n","      <td>0.648678</td>\n","      <td>0.003690</td>\n","      <td>0.320410</td>\n","      <td>0.001192</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   train-auc-mean  train-auc-std  ...  test-logloss-mean  test-logloss-std\n","0        0.632948       0.001731  ...           0.619701          0.000203\n","1        0.640194       0.002510  ...           0.559467          0.000330\n","2        0.644821       0.002745  ...           0.509719          0.000486\n","3        0.646711       0.003171  ...           0.468039          0.000520\n","4        0.647334       0.002644  ...           0.432773          0.000677\n","5        0.647903       0.002444  ...           0.402833          0.000762\n","6        0.649730       0.002477  ...           0.377210          0.000847\n","7        0.649935       0.002673  ...           0.355383          0.000997\n","8        0.651683       0.003297  ...           0.336599          0.001074\n","9        0.652886       0.002782  ...           0.320410          0.001192\n","\n","[10 rows x 8 columns]"]},"metadata":{"tags":[]},"execution_count":73}]},{"cell_type":"code","metadata":{"id":"GVqF5DPpipPt","colab_type":"code","outputId":"08b6c724-e548-4633-e1a3-078fd5ce4e10","executionInfo":{"status":"ok","timestamp":1585826329553,"user_tz":-330,"elapsed":26000,"user":{"displayName":"Abhishek Keshari","photoUrl":"","userId":"08321311573619930656"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["model = XGBClassifier(objective='binary:logistic', n_estimators=11,learning_rate=0.1, max_depth=3, min_child_weight=10,gamma=0.0,\n","                      colsample_bytree=0.9,subsample=0.85, reg_alpha=0.1,random_state=0)\n","model.fit(X_train,y_train)\n","\n","roc_auc(X_test,y_test,model.predict(X_test),model)\n","roc_auc(X_train,y_train,model.predict(X_train),model)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Confusion_Matrix: \n","[[73559     0]\n"," [ 4701     0]]\n","\n","Accuracy of classifier on test set: 0.94\n","\n","Classification Report: \n","              precision    recall  f1-score   support\n","\n","         0.0       0.94      1.00      0.97     73559\n","         1.0       0.00      0.00      0.00      4701\n","\n","    accuracy                           0.94     78260\n","   macro avg       0.47      0.50      0.48     78260\n","weighted avg       0.88      0.94      0.91     78260\n","\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"],"name":"stderr"},{"output_type":"stream","text":["Best Threshold=0.195104, G-Mean=0.596\n","\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\nB5v4+Ph/rffpp5+aF1980RhjzO7du01gYKDJzs4+a52XX37ZjB8//szruLg4U69evfMe93x/b9ih\nky7ruluo6yhe/WUHE/4K547mVfn8wdZ5Uy8xbRosWwbvvw/r19s6CaU8bPr06fTq1eus9+666y6m\nT59O9erV6dOnD40bN6ZPnz5ninsAxo4dS6VKlWjYsCGNGzemR48e/7q7SEpKokePHjRt2pROnTrx\n3nvvAfDhhx+yePFimjRpQqtWrdixYwctW7ZkwIABtG3blnbt2vHoo4+edbzTbr75Zvr160f79u1p\n0qQJd99993lbW912221nvrF369aNzMxMGjRowKhRo84UY52rYcOGjB07lptvvpmmTZvStWtXYmJi\naNasGS1atKB+/fr069ePjh07XtJnfD4VK1bkxRdfpE2bNrRp04aXXnrpTMX2o48+yunhiB555BH2\n7dtH48aN6du3L1OnTr1ox7nFixdz2223XXGMrii0Yz0t3RPLQ5PW0bdNdd7o3cS9vWKXL7ctmW66\nyf6MjYXAfDFZn8ondu7cSYMGDTwdRqETExND//79+eOPPzwdSp7r3bs3b775JnXr1v3XsvP9velY\nT+dIzcjivz9tpXalUozp2ch9SSIuzo7s2rkzvPqqfa94cU0SSuWRKlWq8J///Cdfd7hzh/T0dO68\n887zJgl3KJSJYtraSA4eP8Wo7g3wK+qT+wcwxg7cV78+fPut7Q+Rj3qrKuVN+vTpc0kd7gqDYsWK\n0b9//zw7XqFr9ZSakcXnS//Bt4jQpZ6bpk1dsMDeSXTsaAfwa9zYPcdRSql8oNDdUXyy5B+OJqXx\n0X25PNhfSgqsXGmf33orzJtnK601SSilCrlClSgSktOZvHI/jaqWpXuTKrm3499+swmhe3c4ftx2\nmOvZUwfwU0p5hUJ1pXv/jz2kpGfx/r3Nc2eHBw/CPffYO4jixeHnn6F8+dzZt1JKFRCFJlHsOZLE\n9+siub9dEHWvyoXu7EePQsOG8MsvMHYsbN4M11135ftVykN8fHxo3rw5zZo1o2XLlqxateqy9vPB\nBx+QkpKSy9Gp/KzQJIq3F+6iZDEfnrrpCpuLnR6wq3JleO012LYNnn8eihW78iCVctG0adMIDg6m\nSJEiBAcHn3fIiEtVokQJNm3axObNm3njjTcYPXr0Ze1HE4X3KRSJYt3+BP7ceZSBnWpSsdRlXtBP\n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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Confusion_Matrix: \n","[[171353      0]\n"," [ 11251      0]]\n","\n","Accuracy of classifier on test set: 0.94\n","\n","Classification Report: \n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"],"name":"stderr"},{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","         0.0       0.94      1.00      0.97    171353\n","         1.0       0.00      0.00      0.00     11251\n","\n","    accuracy                           0.94    182604\n","   macro avg       0.47      0.50      0.48    182604\n","weighted avg       0.88      0.94      0.91    182604\n","\n","Best Threshold=0.207141, G-Mean=0.608\n","\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\nmIoVK2a+D5crLi7OBAcHm/j4eBMfH2+Cg4NNXFzcf/b79NNPzUsvvWSMMWbXrl0mMDDQZGRkmOjo\naJOWlmaMMWbv3r2mSpUqmcdnZGSYKlWqmNTU1P+cL6u/N+zUSZf1uVso2ygyMgyjZm3Br0QxXul5\n/qJ6LjZlCixdCuPHw9q1tk1CKTebOnUqt9122zmv9enTh6lTp1KtWjX69etHw4YN6devX2Z1D8CY\nMWOoUKEC9evXp2HDhvTo0eM/pYvExER69OhB48aN6dixI+PGjQPggw8+YNGiRTRq1IgWLVqwfft2\nmjdvzoABA2jdujVt2rThoYceOud6Z91www3cc889tGvXjkaNGtG3b18SExP/s98tt9yS+Y29e/fu\npKWlUa9ePUaMGJFZjXW++vXrM2bMGG644QYaN25Mt27dOHz4ME2aNKFZs2bUrVuXe+65hw4dOlzS\ne5yV8uXL89JLL9GqVStatWrFyy+/nNmw/dBDD3F2OqJBgwaxb98+GjZsyF133cU333yDiLB06VIa\nN25M06ZN6du3L5999lnm8aGhobRt2xavPJgktFDO9fTxoj2MnbuLD+5qyq1N82Dt62XLbE+mrl3t\nz5gY7fKqzrFjxw7q1avn7jAKncOHD3P//fczf/58d4eS54YNG0avXr24/vrr/7Mtq783nevJSdzJ\nFD5etIfr61akV5Mqrr1YbKyd2bVTJ3jtNfuat7cmCaXySOXKlXn44Yfz9YA7V2nYsGGWScIVCl2i\neHfOLs6kZTDSldOHG2Mn7qtbF777zo6HyEejVZUqSvr163dJA+4Ki4cffjjPrlWoej2FHoxn2rpD\nPNKpJrUrunB67j//tCWJDh3sBH4NG7ruWkop5WaFpkSRlp7BqJlbqeLnw5PXh+T+BZKSYMUK+/vN\nN8Ovv9pGa00SSqlCrtAkiskrD7DzSCIv92xAKe9cLij99ZdNCDfdBMeP2wFzvXrpBH5KqSKhUHzS\nxSSmMH7+bq6vW5EbG1TKvRNHRsIdd9gShLc3/PYblC2be+dXSqkCoFAkinHzd5GSlsGoW3KxATs6\nGurXh99/hzFjYNMm6Nw5d86tlBt4enrStGlTmjRpQvPmzVm5cuVlnef9998nKSkpl6NT+VmBTxTh\ncUlMXXOIe9oEUbNCLjRgn52wq2JFeP112LoVRo2C4vlgoSNVZEyZMoXg4GA8PDwIDg7OcsqIS1Wi\n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\nSdwAAAAASUVORK5CYII=\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"1vOikDUd6apC","colab_type":"code","colab":{}},"source":["# Checking % out 1 that are correctly classified wrt threshold\n","# 0.3379324 0.18423699\n","def check_accuracy_number_ones(test_X,test_y,count_1):\n","  threshold = [x/200 for x in range(36,67)]\n","  # check how many of class 1 are actually matching correctly\n","  y_score = model.predict_proba(test_X)[:,1]\n","\n","  correct = [0]*len(threshold)\n","  matching_pos_class = [0]*len(threshold)\n","  s = ['*']*len(threshold)\n","  print('Total no of observation: %f',len(y_score))\n","  print(*s,sep='')\n","  for th in range(len(threshold)):\n","    y_pred = [1 if x>=threshold[th] else 0 for x in y_score]\n","    correct[th] = ((test_y==y_pred)).sum()/len(y_score)\n","    matching_pos_class[th] = ((test_y==y_pred) & (y_pred==np.ones(len(y_pred)))).sum()/count_1\n","    print(*s[th],end='')\n","    # print(th,threshold[th],correct[th],matching_pos_class[th])\n","  print()\n","  plt.figure(figsize=(12,9))\n","  sns.set_style(style='whitegrid')\n","  plt.plot(threshold,correct)\n","  # plt.figure(figsize=(12,9))\n","  plt.plot(threshold,matching_pos_class)\n","  plt.legend(['accuracy','No of correct ones predicted'])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ndhyFkdF6bwh","colab_type":"code","outputId":"9a7aa533-928a-4109-d70e-2b9142e59d05","executionInfo":{"status":"ok","timestamp":1585664200967,"user_tz":-330,"elapsed":37166,"user":{"displayName":"Abhishek Keshari","photoUrl":"","userId":"08321311573619930656"}},"colab":{"base_uri":"https://localhost:8080/","height":870}},"source":["check_accuracy_number_ones(X_test,y_test,4701,'Test_data')\n","check_accuracy_number_ones(X_train,y_train,11251,'Train_data')"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Total no of observation: %f 78260\n","*****************************************************************\n","*****************************************************************\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\nV5vq6mozYcIEU1VVFcbqAxNMj26328ydO9cUFhaGr+A7EEyPzf3hD3/osANEg+nR5/MZl8tlLl68\naIwx5he/+IVZv359uEoPWDA9dpb9TiA9Nu+tuLjYTJs2zRhjzJEjR1oMEHU6nR1ygGgwPV66dMm4\nXC6zZcuWcJbcZsH02Nxrr70WkgGinebIht1uZ+nSpcybN4/6+npmzJhBVlYWq1atYvjw4eTl5VFa\nWsr8+fO5fPkyn332Ga+//jpFRUVMnjyZ3bt343K5sNlsjBs3DqfTGemWbimQPl955RXq6upYuHAh\nAP3792fNmjWkpqby9NNPM3PmTACeeeYZUlNTI9nOLQXT4+bNm9m7dy/V1dX+qb2/+tWvyM7OjmRL\nNwmmx84imB5jY2NZsmQJBQUFANx3333MmjUrku3cUjA9dpb9TiA9rl+/npKSEux2OykpKSxfvhyw\nBkw2TV2OjY1l6dKlHW7cDQTX4/r16ykvL2f16tWsXr0agHXr1tG7d+9ItnSTYHoMB931VUREREKq\nc4+sExERkQ5PYUNERERCSmFDREREQkphQ0REREJKYUNERERCSmFDREREQkphQ0REREJKYUNERERC\n6v8Bg8ZCmWWoq/8AAAAASUVORK5CYII=\n","text/plain":["<Figure size 648x432 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Total no of observation: %f 182604\n","*****************************************************************\n","*****************************************************************\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\nAAAAAElFTkSuQmCC\n","text/plain":["<Figure size 648x432 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"4dotNMKDpF2o","colab_type":"code","outputId":"202233c3-f2c6-44b4-9342-d2411efba012","executionInfo":{"status":"ok","timestamp":1585656148393,"user_tz":-330,"elapsed":130174,"user":{"displayName":"Abhishek Keshari","photoUrl":"","userId":"08321311573619930656"}},"colab":{"base_uri":"https://localhost:8080/","height":383}},"source":["params = {\n","    # Parameters that we are going to tune.\n","    'num_boost_round': 999,\n","    'early_stopping_rounds': 10,\n","    'max_depth':6,\n","    'min_child_weight': 10,\n","    'eta':.3,\n","    'subsample': 1,\n","    'colsample_bytree': 1,\n","    # Other parameters\n","    'objective':'binary:logistic',\n","    'eval_metric': [ \"auc\",\"logloss\"]\n","}\n","dtrain = xgb.DMatrix(X_train, label=y_train)\n","dtest = xgb.DMatrix(X_test, label=y_test)\n","cv_results = xgb.cv(\n","    params,\n","    dtrain,\n","    seed=123,\n","    nfold=5,\n","    metrics={'auc','error'},\n","    early_stopping_rounds=10\n",")\n","cv_results"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/xgboost/core.py:587: FutureWarning: Series.base is deprecated and will be removed in a future version\n","  if getattr(data, 'base', None) is not None and \\\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>train-auc-mean</th>\n","      <th>train-auc-std</th>\n","      <th>train-error-mean</th>\n","      <th>train-error-std</th>\n","      <th>test-auc-mean</th>\n","      <th>test-auc-std</th>\n","      <th>test-error-mean</th>\n","      <th>test-error-std</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.666200</td>\n","      <td>0.003084</td>\n","      <td>0.061542</td>\n","      <td>0.000428</td>\n","      <td>0.650504</td>\n","      <td>0.007856</td>\n","      <td>0.061866</td>\n","      <td>0.001762</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.678300</td>\n","      <td>0.002297</td>\n","      <td>0.061561</td>\n","      <td>0.000438</td>\n","      <td>0.658849</td>\n","      <td>0.008692</td>\n","      <td>0.061631</td>\n","      <td>0.001679</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.685441</td>\n","      <td>0.002489</td>\n","      <td>0.061557</td>\n","      <td>0.000436</td>\n","      <td>0.663056</td>\n","      <td>0.007643</td>\n","      <td>0.061603</td>\n","      <td>0.001713</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.690585</td>\n","      <td>0.003029</td>\n","      <td>0.061573</td>\n","      <td>0.000422</td>\n","      <td>0.665306</td>\n","      <td>0.007749</td>\n","      <td>0.061603</td>\n","      <td>0.001728</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.695486</td>\n","      <td>0.003197</td>\n","      <td>0.061561</td>\n","      <td>0.000416</td>\n","      <td>0.667277</td>\n","      <td>0.007818</td>\n","      <td>0.061609</td>\n","      <td>0.001714</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>0.699685</td>\n","      <td>0.002526</td>\n","      <td>0.061561</td>\n","      <td>0.000425</td>\n","      <td>0.668289</td>\n","      <td>0.008461</td>\n","      <td>0.061631</td>\n","      <td>0.001709</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>0.704640</td>\n","      <td>0.002268</td>\n","      <td>0.061539</td>\n","      <td>0.000409</td>\n","      <td>0.670224</td>\n","      <td>0.008354</td>\n","      <td>0.061630</td>\n","      <td>0.001718</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>0.709957</td>\n","      <td>0.001280</td>\n","      <td>0.061531</td>\n","      <td>0.000429</td>\n","      <td>0.670683</td>\n","      <td>0.008219</td>\n","      <td>0.061625</td>\n","      <td>0.001710</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>0.715057</td>\n","      <td>0.001764</td>\n","      <td>0.061525</td>\n","      <td>0.000416</td>\n","      <td>0.670787</td>\n","      <td>0.008024</td>\n","      <td>0.061620</td>\n","      <td>0.001728</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>0.720674</td>\n","      <td>0.001372</td>\n","      <td>0.061502</td>\n","      <td>0.000422</td>\n","      <td>0.671809</td>\n","      <td>0.007513</td>\n","      <td>0.061609</td>\n","      <td>0.001729</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   train-auc-mean  train-auc-std  ...  test-error-mean  test-error-std\n","0        0.666200       0.003084  ...         0.061866        0.001762\n","1        0.678300       0.002297  ...         0.061631        0.001679\n","2        0.685441       0.002489  ...         0.061603        0.001713\n","3        0.690585       0.003029  ...         0.061603        0.001728\n","4        0.695486       0.003197  ...         0.061609        0.001714\n","5        0.699685       0.002526  ...         0.061631        0.001709\n","6        0.704640       0.002268  ...         0.061630        0.001718\n","7        0.709957       0.001280  ...         0.061625        0.001710\n","8        0.715057       0.001764  ...         0.061620        0.001728\n","9        0.720674       0.001372  ...         0.061609        0.001729\n","\n","[10 rows x 8 columns]"]},"metadata":{"tags":[]},"execution_count":43}]},{"cell_type":"markdown","metadata":{"id":"Bcc2jXdJBmeF","colab_type":"text"},"source":["### Check the difference b/w the two API's"]},{"cell_type":"code","metadata":{"id":"PbfCy49gBxx1","colab_type":"code","outputId":"099f7758-77ea-45e4-8572-069635c601cd","executionInfo":{"status":"ok","timestamp":1585820416719,"user_tz":-330,"elapsed":147448,"user":{"displayName":"Abhishek Keshari","photoUrl":"","userId":"08321311573619930656"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["xg1 = xgb.XGBClassifier(random_state=123)\n","xg1.fit(X_train,y_train)\n","roc_auc(X_test,y_test,xg1.predict(X_test),xg1)\n","roc_auc(X_train,y_train,xg1.predict(X_train),xg1)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["[09:37:49] ======== Monitor: Learner ========\n","[09:37:49] ======== Monitor: GBTree ========\n","Confusion_Matrix: \n","[[73558     1]\n"," [ 4700     1]]\n","\n","Accuracy of classifier on test set: 0.94\n","\n","Classification Report: \n","              precision    recall  f1-score   support\n","\n","         0.0       0.94      1.00      0.97     73559\n","         1.0       0.50      0.00      0.00      4701\n","\n","    accuracy                           0.94     78260\n","   macro avg       0.72      0.50      0.48     78260\n","weighted avg       0.91      0.94      0.91     78260\n","\n","Best Threshold=0.058190, G-Mean=0.625\n","\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\njl24cCEtWrSgbNmyLp8/LS0tu6FlWUxMDK+//jrr16/n77//5vXXX7/oh/uKFSuYP38+W7ZsYceO\nHTz33HMADBw4kM2bN7N582a++eYbatWqRcuWdrTmfffdxyeffJIrr6NANz2dSk7lpR+3UblMcV66\nuZGnw4GPP4aXXoLkZHj9dbs8afHino5K5bLXf97Bzoic/Qu4cbWyvNo78woDCQkJ/Pnnn6xYsYLe\nvXvz+uuvA7By5UomTJjAL7/8AsDw4cMJCgqif//+fP755xw4cIDijt/TKlWq0L9//wvOPWrUKBYs\nWECRIkW48cYbmTBhAkeOHGHo0KGEhIQAMHnyZDp27MjEiROZOnUqAIMHD+app57i4MGD9OjRg/bt\n2xMcHMzChQuZO3cuc+fOJTk5mdtvvz0jXmczZ85kyJAhGY9vu+02wsLCSEpKYsSIERn7SpcuzaOP\nPsry5cv5+OOPOXjwIJMmTeLMmTO0b9+eTz75BG9vbx577DE2bNjA6dOn6dev30WvmRVLliyhe/fu\nVKxYEYDu3buzePFiBgwYcM5xkydPZtSoURnvc+XKF5YUmjVrFnfffXfG4z59+nDttdcyevToK4rR\nFQX6jmLMvO1ExCbxxq1N80aTU3AwtG8P27bBK69oklC5av78+fTs2ZP69evj6+tLcHBwpsfv27eP\ngICAy/61Hh0dzU8//cSOHTvYunUrY8aMAeDJJ5+kS5cubNmyhU2bNtGkSROCg4OZNm0a69evZ926\ndXz++ef8888/AOzdu5dhw4axY8cO9uzZw969e/n777/ZvHkzwcHBrF69+oJrr1mzhjZt2mQ8njp1\nKsHBwWzcuJFJkyYRHR0NwKlTp2jfvj1btmzB19eXOXPmsGbNGjZv3oy3tzczZ84EYNy4cWzcuJGt\nW7eyatUqtm7desE1x48ff05z0NmvJ5988oJjDx8+TI0a/y9Q4e/vz+HDFxSo4N9//+WPP/6gffv2\ndOnShQ0bNlxwzJw5c85JMBUqVCA5OTnjNbpTgb2jOJ6QzPzNh7m52VX0bOqhdRni4mxCuO8+W+H1\nk09sctDRL4Xa5f7yd5dZs2YxYsQIAO6++25mzZp1zodsdpUrV44SJUrw8MMP06tXL3r16gXA77//\nztdffw2At7c35cqV488//+T222+nVClbNqdv37788ccf9OnTh5o1a3L11VcDsHTpUpYuXUqrVq0A\n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\nYII=\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Confusion_Matrix: \n","[[171351      2]\n"," [ 11247      4]]\n","\n","Accuracy of classifier on test set: 0.94\n","\n","Classification Report: \n","              precision    recall  f1-score   support\n","\n","         0.0       0.94      1.00      0.97    171353\n","         1.0       0.67      0.00      0.00     11251\n","\n","    accuracy                           0.94    182604\n","   macro avg       0.80      0.50      0.48    182604\n","weighted avg       0.92      0.94      0.91    182604\n","\n","Best Threshold=0.060479, G-Mean=0.648\n","\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"uPWF4O26Ue0r","colab_type":"code","outputId":"57cf6cdb-4aef-4bd1-d98e-4ec6edbe51d2","executionInfo":{"status":"error","timestamp":1585826437428,"user_tz":-330,"elapsed":12787,"user":{"displayName":"Abhishek Keshari","photoUrl":"","userId":"08321311573619930656"}},"colab":{"base_uri":"https://localhost:8080/","height":460}},"source":["xg1 = xgb.XGBClassifier(random_state=123)\n","xg1.fit(X_train,y_train)\n","roc_auc(X_test,y_test,xg1.predict(X_test),xg1)\n","roc_auc(X_train,y_train,xg1.predict(X_train),xg1)\n","\n","params = {\n","    'base_score': 0.5,\n","    'booster': 'gbtree', 'colsample_bylevel': 1,\n","              'colsample_bynode': 1, 'colsample_bytree': 1, 'gamma': 0,\n","              'learning_rate': 0.1, 'max_delta_step': 0, 'max_depth': 3,\n","              'min_child_weight': 1, 'n_estimators': 100, 'n_jobs': 1,\n","              'objective': 'binary:logistic', 'random_state': 0,\n","              'reg_alpha': 0, 'reg_lambda': 1, 'scale_pos_weight': 1, 'seed': 123,\n","              'subsample': 1,'silent':True, 'verbosity': 3, 'eval_metric': [\"auc\",\"logloss\"]\n","}\n","\n","dtrain = xgb.DMatrix(data=X_train,label=y_train)\n","dtest = xgb.DMatrix(data=X_test,label=y_test)\n","\n","xg2 =  xgb.train(\n","    params,\n","    dtrain,\n","    num_boost_round=999,\n","    evals=[(dtrain,\"Train\"),(dtest, \"Test\")],\n","    early_stopping_rounds=20,verbose_eval=10\n",")\n","\n","preds = xg2.predict(dtest)\n","print(np.mean(y_pred),np.min(y_pred),np.max(y_pred))\n","labels = dtest.get_label()\n","p = [1 if (preds[i] > 0.5) else 0 for i in range(len(preds))]\n","p = pd.DataFrame(p)\n","p[0].value_counts()\n","\n"],"execution_count":0,"outputs":[{"output_type":"stream","text":["ERROR! Session/line number was not unique in database. History logging moved to new session 61\n","[0]\tTrain-auc:0.63606\tTrain-logloss:0.619584\tTest-auc:0.626051\tTest-logloss:0.619401\n","Multiple eval metrics have been passed: 'Test-logloss' will be used for early stopping.\n","\n","Will train until Test-logloss hasn't improved in 20 rounds.\n"],"name":"stdout"},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-59-7aaa1a3a93e6>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     18\u001b[0m     \u001b[0mnum_boost_round\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m999\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m     \u001b[0mevals\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtrain\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"Train\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtest\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"Test\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 20\u001b[0;31m     \u001b[0mearly_stopping_rounds\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m20\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mverbose_eval\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     21\u001b[0m )\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/xgboost/training.py\u001b[0m in \u001b[0;36mtrain\u001b[0;34m(params, dtrain, num_boost_round, evals, obj, feval, maximize, early_stopping_rounds, evals_result, verbose_eval, xgb_model, callbacks, learning_rates)\u001b[0m\n\u001b[1;32m    214\u001b[0m                            \u001b[0mevals\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mevals\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    215\u001b[0m                            \u001b[0mobj\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeval\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfeval\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 216\u001b[0;31m                            xgb_model=xgb_model, callbacks=callbacks)\n\u001b[0m\u001b[1;32m    217\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    218\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/xgboost/training.py\u001b[0m in \u001b[0;36m_train_internal\u001b[0;34m(params, dtrain, num_boost_round, evals, obj, feval, xgb_model, callbacks)\u001b[0m\n\u001b[1;32m     72\u001b[0m         \u001b[0;31m# Skip the first update if it is a recovery step.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     73\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mversion\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0;36m2\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 74\u001b[0;31m             \u001b[0mbst\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtrain\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     75\u001b[0m             \u001b[0mbst\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msave_rabit_checkpoint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     76\u001b[0m             \u001b[0mversion\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/xgboost/core.py\u001b[0m in \u001b[0;36mupdate\u001b[0;34m(self, dtrain, iteration, fobj)\u001b[0m\n\u001b[1;32m   1107\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mfobj\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1108\u001b[0m             _check_call(_LIB.XGBoosterUpdateOneIter(self.handle, ctypes.c_int(iteration),\n\u001b[0;32m-> 1109\u001b[0;31m                                                     dtrain.handle))\n\u001b[0m\u001b[1;32m   1110\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1111\u001b[0m             \u001b[0mpred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtrain\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","metadata":{"id":"pgWDnOowMyiM","colab_type":"code","outputId":"b82f916b-0729-40f5-eaf0-bd40ad7c63e2","executionInfo":{"status":"ok","timestamp":1585824550127,"user_tz":-330,"elapsed":110877,"user":{"displayName":"Abhishek Keshari","photoUrl":"","userId":"08321311573619930656"}},"colab":{"base_uri":"https://localhost:8080/","height":525}},"source":["xg1 = xgb.XGBClassifier(random_state=123)\n","xg1.fit(X_train,y_train)\n","roc_auc(X_test,y_test,xg1.predict(X_test),xg1)\n","roc_auc(X_train,y_train,xg1.predict(X_train),xg1)\n","\n","params = {\n","    'base_score': 0.5,\n","    'booster': 'gbtree', 'colsample_bylevel': 1,\n","              'colsample_bynode': 1, 'colsample_bytree': 1, 'gamma': 0,\n","              'learning_rate': 0.1, 'max_delta_step': 0, 'max_depth': 3,\n","              'min_child_weight': 1, 'n_estimators': 100, 'n_jobs': 1,\n","              'objective': 'binary:logistic', 'random_state': 0,\n","              'reg_alpha': 0, 'reg_lambda': 1, 'scale_pos_weight': 1, 'seed': 123,\n","              'subsample': 1,'silent':True, 'verbosity': 3, 'eval_metric': [\"auc\",\"logloss\"]\n","}\n","\n","dtrain = xgb.DMatrix(data=X_train,label=y_train)\n","dtest = xgb.DMatrix(data=X_test,label=y_test)\n","\n","xg2 =  xgb.train(\n","    params,\n","    dtrain,\n","    num_boost_round=999,\n","    evals=[(dtrain,\"Train\"),(dtest, \"Test\")],\n","    early_stopping_rounds=20,verbose_eval=10\n",")\n","\n","preds = xg2.predict(dtest)\n","print(np.mean(y_pred),np.min(y_pred),np.max(y_pred))\n","labels = dtest.get_label()\n","p = [1 if (preds[i] > 0.5) else 0 for i in range(len(preds))]\n","p = pd.DataFrame(p)\n","p[0].value_counts()\n","\n","params = {\n","    # Parameters that we are going to tune.\n","    'num_boost_round': 999,\n","    'early_stopping_rounds': 10,\n","    'base_score': 0.5,\n","    'booster': 'gbtree', 'colsample_bylevel': 1,\n","              'colsample_bynode': 1, 'colsample_bytree': 1, 'gamma': 0,\n","              'learning_rate': 0.1, 'max_delta_step': 0, 'max_depth': 3,\n","              'min_child_weight': 1, 'n_estimators': 100, 'n_jobs': 1,\n","              'objective': 'binary:logistic', 'random_state': 0,\n","              'reg_alpha': 0, 'reg_lambda': 1, 'scale_pos_weight': 1, 'seed': 123,\n","              'subsample': 1,'silent':True, 'verbosity': 3, 'eval_metric': [\"auc\",\"logloss\"]\n","}\n","dtrain = xgb.DMatrix(temp[predictors], label=temp[target])\n","# dtest = xgb.DMatrix(X_test, label=y_test)\n","cv_results = xgb.cv(\n","    params,\n","    dtrain,\n","    seed=123,\n","    nfold=5,\n","    early_stopping_rounds=10,\n","    as_pandas=True,\n","    verbose_eval=1\n",")\n","cv_results"],"execution_count":0,"outputs":[{"output_type":"stream","text":["[0]\ttrain-auc:0.633676+0.00143878\ttrain-logloss:0.619383+0.000142762\ttest-auc:0.632082+0.00327082\ttest-logloss:0.619588+7.83495e-05\n","[1]\ttrain-auc:0.640559+0.00273492\ttrain-logloss:0.559366+0.000138728\ttest-auc:0.638002+0.00576912\ttest-logloss:0.559468+0.000295744\n","[2]\ttrain-auc:0.643572+0.0025876\ttrain-logloss:0.509769+0.000214259\ttest-auc:0.640344+0.00448775\ttest-logloss:0.509708+0.000507158\n","[3]\ttrain-auc:0.645274+0.00230823\ttrain-logloss:0.467771+0.000172178\ttest-auc:0.642147+0.00318828\ttest-logloss:0.467986+0.000589602\n","[4]\ttrain-auc:0.646161+0.002188\ttrain-logloss:0.432762+0.000316194\ttest-auc:0.642959+0.00336389\ttest-logloss:0.432768+0.000636367\n","[5]\ttrain-auc:0.647649+0.00139456\ttrain-logloss:0.40293+0.000283735\ttest-auc:0.644213+0.00403693\ttest-logloss:0.402857+0.00076729\n","[6]\ttrain-auc:0.648455+0.00153315\ttrain-logloss:0.377164+0.000299806\ttest-auc:0.645052+0.00382253\ttest-logloss:0.377302+0.000895974\n","[7]\ttrain-auc:0.649228+0.00156698\ttrain-logloss:0.355237+0.000421888\ttest-auc:0.645988+0.00406058\ttest-logloss:0.35543+0.000997837\n","[8]\ttrain-auc:0.649811+0.00202354\ttrain-logloss:0.336554+0.000435735\ttest-auc:0.64623+0.00361577\ttest-logloss:0.336641+0.00109224\n","[9]\ttrain-auc:0.650183+0.00201581\ttrain-logloss:0.320331+0.000453217\ttest-auc:0.646654+0.00352942\ttest-logloss:0.320461+0.00119369\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>train-auc-mean</th>\n","      <th>train-auc-std</th>\n","      <th>train-logloss-mean</th>\n","      <th>train-logloss-std</th>\n","      <th>test-auc-mean</th>\n","      <th>test-auc-std</th>\n","      <th>test-logloss-mean</th>\n","      <th>test-logloss-std</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.633676</td>\n","      <td>0.001439</td>\n","      <td>0.619383</td>\n","      <td>0.000143</td>\n","      <td>0.632082</td>\n","      <td>0.003271</td>\n","      <td>0.619588</td>\n","      <td>0.000078</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.640559</td>\n","      <td>0.002735</td>\n","      <td>0.559366</td>\n","      <td>0.000139</td>\n","      <td>0.638002</td>\n","      <td>0.005769</td>\n","      <td>0.559468</td>\n","      <td>0.000296</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.643572</td>\n","      <td>0.002588</td>\n","      <td>0.509769</td>\n","      <td>0.000214</td>\n","      <td>0.640344</td>\n","      <td>0.004488</td>\n","      <td>0.509708</td>\n","      <td>0.000507</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.645274</td>\n","      <td>0.002308</td>\n","      <td>0.467771</td>\n","      <td>0.000172</td>\n","      <td>0.642147</td>\n","      <td>0.003188</td>\n","      <td>0.467986</td>\n","      <td>0.000590</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.646161</td>\n","      <td>0.002188</td>\n","      <td>0.432762</td>\n","      <td>0.000316</td>\n","      <td>0.642959</td>\n","      <td>0.003364</td>\n","      <td>0.432768</td>\n","      <td>0.000636</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>0.647649</td>\n","      <td>0.001395</td>\n","      <td>0.402930</td>\n","      <td>0.000284</td>\n","      <td>0.644213</td>\n","      <td>0.004037</td>\n","      <td>0.402857</td>\n","      <td>0.000767</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>0.648455</td>\n","      <td>0.001533</td>\n","      <td>0.377164</td>\n","      <td>0.000300</td>\n","      <td>0.645052</td>\n","      <td>0.003823</td>\n","      <td>0.377302</td>\n","      <td>0.000896</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>0.649228</td>\n","      <td>0.001567</td>\n","      <td>0.355237</td>\n","      <td>0.000422</td>\n","      <td>0.645988</td>\n","      <td>0.004061</td>\n","      <td>0.355430</td>\n","      <td>0.000998</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>0.649811</td>\n","      <td>0.002024</td>\n","      <td>0.336554</td>\n","      <td>0.000436</td>\n","      <td>0.646230</td>\n","      <td>0.003616</td>\n","      <td>0.336641</td>\n","      <td>0.001092</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>0.650183</td>\n","      <td>0.002016</td>\n","      <td>0.320331</td>\n","      <td>0.000453</td>\n","      <td>0.646654</td>\n","      <td>0.003529</td>\n","      <td>0.320461</td>\n","      <td>0.001194</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   train-auc-mean  train-auc-std  ...  test-logloss-mean  test-logloss-std\n","0        0.633676       0.001439  ...           0.619588          0.000078\n","1        0.640559       0.002735  ...           0.559468          0.000296\n","2        0.643572       0.002588  ...           0.509708          0.000507\n","3        0.645274       0.002308  ...           0.467986          0.000590\n","4        0.646161       0.002188  ...           0.432768          0.000636\n","5        0.647649       0.001395  ...           0.402857          0.000767\n","6        0.648455       0.001533  ...           0.377302          0.000896\n","7        0.649228       0.001567  ...           0.355430          0.000998\n","8        0.649811       0.002024  ...           0.336641          0.001092\n","9        0.650183       0.002016  ...           0.320461          0.001194\n","\n","[10 rows x 8 columns]"]},"metadata":{"tags":[]},"execution_count":54}]},{"cell_type":"markdown","metadata":{"id":"PbtZT6Th_b61","colab_type":"text"},"source":["# Check"]},{"cell_type":"code","metadata":{"id":"v_uyA1nQA4A4","colab_type":"code","outputId":"caac2f95-312c-41bf-faee-31deedb974c5","executionInfo":{"status":"ok","timestamp":1585833733543,"user_tz":-330,"elapsed":424515,"user":{"displayName":"Abhishek Keshari","photoUrl":"","userId":"08321311573619930656"}},"colab":{"base_uri":"https://localhost:8080/","height":727}},"source":["param = {\n","    'base_score': 0.5,\n","    'booster': 'gbtree',\n","    'objective': 'binary:logistic',\n","    'eval_metric': [\"auc\",\"logloss\"],\n","    'random_state': 123,\n","    'learning_rate': 0.1\n","} \n","\n","#               'colsample_bynode': 1, 'colsample_bytree': 1, 'gamma': 0,\n","#                'max_delta_step': 0, 'max_depth': 3,\n","#               'min_child_weight': 1, 'n_estimators': 100, 'n_jobs': 1,\n","#               'objective': \n","#               'reg_alpha': 0, 'reg_lambda': 1, 'scale_pos_weight': 1, 'seed': 123,\n","#               'subsample': 1,'silent':True, 'verbosity': 3, \n","# }\n","\n","dtrain = xgb.DMatrix(data=X_train,label=y_train)\n","dtest = xgb.DMatrix(data=X_test,label=y_test)\n","\n","xg2 =  xgb.train(\n","    params,\n","    dtrain,\n","    num_boost_round=999,\n","    evals=[(dtrain,\"Train\"),(dtest, \"Test\")],\n","    early_stopping_rounds=20,\n","    verbose_eval=10\n",")\n","\n","preds = xg2.predict(dtest)\n","print(np.mean(y_pred),np.min(y_pred),np.max(y_pred))\n","labels = dtest.get_label()\n","p = [1 if (preds[i] > 0.5) else 0 for i in range(len(preds))]\n","p = pd.DataFrame(p)\n","p[0].value_counts()"],"execution_count":0,"outputs":[{"output_type":"stream","text":["ERROR! Session/line number was not unique in database. History logging moved to new session 63\n","[0]\tTrain-auc:0.635026\tTrain-logloss:0.619533\tTest-auc:0.624988\tTest-logloss:0.619324\n","Multiple eval metrics have been passed: 'Test-logloss' will be used for early stopping.\n","\n","Will train until Test-logloss hasn't improved in 20 rounds.\n","[10]\tTrain-auc:0.657512\tTrain-logloss:0.306987\tTest-auc:0.643428\tTest-logloss:0.305313\n","[20]\tTrain-auc:0.664195\tTrain-logloss:0.239315\tTest-auc:0.648817\tTest-logloss:0.237252\n","[30]\tTrain-auc:0.670545\tTrain-logloss:0.223861\tTest-auc:0.653116\tTest-logloss:0.221879\n","[40]\tTrain-auc:0.677907\tTrain-logloss:0.219981\tTest-auc:0.657987\tTest-logloss:0.218386\n","[50]\tTrain-auc:0.684166\tTrain-logloss:0.218375\tTest-auc:0.662924\tTest-logloss:0.217144\n","[60]\tTrain-auc:0.689882\tTrain-logloss:0.217378\tTest-auc:0.66609\tTest-logloss:0.216552\n","[70]\tTrain-auc:0.69501\tTrain-logloss:0.216504\tTest-auc:0.668935\tTest-logloss:0.216102\n","[80]\tTrain-auc:0.698917\tTrain-logloss:0.21586\tTest-auc:0.67082\tTest-logloss:0.215799\n","[90]\tTrain-auc:0.701973\tTrain-logloss:0.215266\tTest-auc:0.672037\tTest-logloss:0.215579\n","[100]\tTrain-auc:0.7048\tTrain-logloss:0.214788\tTest-auc:0.673431\tTest-logloss:0.215382\n","[110]\tTrain-auc:0.707535\tTrain-logloss:0.214281\tTest-auc:0.674112\tTest-logloss:0.215258\n","[120]\tTrain-auc:0.709888\tTrain-logloss:0.213868\tTest-auc:0.675434\tTest-logloss:0.215074\n","[130]\tTrain-auc:0.712086\tTrain-logloss:0.213492\tTest-auc:0.675908\tTest-logloss:0.214974\n","[140]\tTrain-auc:0.714539\tTrain-logloss:0.213106\tTest-auc:0.676484\tTest-logloss:0.21492\n","[150]\tTrain-auc:0.716845\tTrain-logloss:0.212723\tTest-auc:0.676942\tTest-logloss:0.214856\n","[160]\tTrain-auc:0.718766\tTrain-logloss:0.212367\tTest-auc:0.677752\tTest-logloss:0.214739\n","[170]\tTrain-auc:0.721071\tTrain-logloss:0.211978\tTest-auc:0.678072\tTest-logloss:0.214686\n","[180]\tTrain-auc:0.722771\tTrain-logloss:0.211704\tTest-auc:0.678333\tTest-logloss:0.214659\n","[190]\tTrain-auc:0.723893\tTrain-logloss:0.211462\tTest-auc:0.678422\tTest-logloss:0.21465\n","[200]\tTrain-auc:0.725707\tTrain-logloss:0.211167\tTest-auc:0.678792\tTest-logloss:0.214603\n","[210]\tTrain-auc:0.727564\tTrain-logloss:0.210836\tTest-auc:0.678986\tTest-logloss:0.214574\n","[220]\tTrain-auc:0.728952\tTrain-logloss:0.210582\tTest-auc:0.678932\tTest-logloss:0.214562\n","[230]\tTrain-auc:0.730806\tTrain-logloss:0.210259\tTest-auc:0.679165\tTest-logloss:0.214526\n","[240]\tTrain-auc:0.732142\tTrain-logloss:0.209986\tTest-auc:0.679369\tTest-logloss:0.214493\n","[250]\tTrain-auc:0.733725\tTrain-logloss:0.209649\tTest-auc:0.679653\tTest-logloss:0.214443\n","[260]\tTrain-auc:0.735195\tTrain-logloss:0.209385\tTest-auc:0.679891\tTest-logloss:0.214421\n","[270]\tTrain-auc:0.736736\tTrain-logloss:0.209095\tTest-auc:0.679937\tTest-logloss:0.214433\n","[280]\tTrain-auc:0.737864\tTrain-logloss:0.208866\tTest-auc:0.679714\tTest-logloss:0.214445\n","Stopping. Best iteration:\n","[265]\tTrain-auc:0.736142\tTrain-logloss:0.209226\tTest-auc:0.680003\tTest-logloss:0.214409\n","\n","0.061188366 0.0044268523 0.7863983\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["0    78247\n","1       13\n","Name: 0, dtype: int64"]},"metadata":{"tags":[]},"execution_count":64}]},{"cell_type":"code","metadata":{"id":"vegV52QhNqLA","colab_type":"code","outputId":"703e9854-d83a-4f2c-ef54-a14f5f2e8d26","executionInfo":{"status":"error","timestamp":1585864118258,"user_tz":-330,"elapsed":2874484,"user":{"displayName":"Abhishek Keshari","photoUrl":"","userId":"08321311573619930656"}},"colab":{"base_uri":"https://localhost:8080/","height":460}},"source":["gridsearch_params = [\n","    (max_depth, min_child_weight)\n","    for max_depth in range(9,12)\n","    for min_child_weight in range(5,8)\n","]\n","print(gridsearch_params)\n","\n","param = {\n","    'base_score': 0.5,\n","    'booster': 'gbtree',\n","    'objective': 'binary:logistic',\n","    'eval_metric': [\"auc\",\"logloss\"],\n","    'random_state': 123,\n","    'learning_rate': 0.1,\n","} \n","\n","#               'colsample_bynode': 1, 'colsample_bytree': 1, 'gamma': 0,\n","#                'max_delta_step': 0, 'max_depth': 3,\n","#               'min_child_weight': 1, 'n_estimators': 100, 'n_jobs': 1,\n","#               'objective': \n","#               'reg_alpha': 0, 'reg_lambda': 1, 'scale_pos_weight': 1, 'seed': 123,\n","#               'subsample': 1,'silent':True, 'verbosity': 3, \n","# }\n","\n","\n","best_params = None\n","max_auc=0\n","dtrain = xgb.DMatrix(temp[predictors],label=temp[target])\n","for max_depth, min_child_weight in gridsearch_params:\n","    # Update our parameters\n","    param['max_depth'] = max_depth\n","    param['min_child_weight'] = min_child_weight\n","    \n","    # Run CV\n","    cv_results = xgb.cv(\n","        param,\n","        dtrain,\n","        num_boost_round=100,\n","        seed=123,\n","        nfold=3,\n","        metrics={'auc'},\n","        early_stopping_rounds=10\n","    )\n","\n","    # Update best AUC\n","    mean_train_auc = cv_results['train-auc-mean'].mean()\n","    mean_test_auc = cv_results['test-auc-mean'].mean()\n","    # boost_rounds = cv_results['test-auc-mean'].argmin()\n","    print(\"CV with max_depth={}, min_child_weight={}\".format(\n","                             max_depth,\n","                             min_child_weight),end=' ')\n","    print(\"Train AUC: %f ,Test AUC: %f\" % (mean_train_auc,mean_test_auc))\n","    # print(\"\\tMAE {} for {} rounds\".format(mean_mae, boost_rounds))\n","    if mean_test_auc > max_auc:\n","        max_auc = mean_test_auc\n","        best_params = (max_depth,min_child_weight)\n","print(\"Best params: {}, {}, MAE: {}\".format(best_params[0], best_params[1], max_auc))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["[(9, 5), (9, 6), (9, 7), (10, 5), (10, 6), (10, 7), (11, 5), (11, 6), (11, 7)]\n","CV with max_depth=9, min_child_weight=5 Train AUC: 0.798881 ,Test AUC: 0.671924\n","CV with max_depth=9, min_child_weight=6 Train AUC: 0.824776 ,Test AUC: 0.675365\n","CV with max_depth=9, min_child_weight=7 Train AUC: 0.821429 ,Test AUC: 0.675445\n"],"name":"stdout"},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-12-20e7e82e44ac>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     40\u001b[0m         \u001b[0mnfold\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     41\u001b[0m         \u001b[0mmetrics\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0;34m'auc'\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 42\u001b[0;31m         \u001b[0mearly_stopping_rounds\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     43\u001b[0m     )\n\u001b[1;32m     44\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/xgboost/training.py\u001b[0m in \u001b[0;36mcv\u001b[0;34m(params, dtrain, num_boost_round, nfold, stratified, folds, metrics, obj, feval, maximize, early_stopping_rounds, fpreproc, as_pandas, verbose_eval, show_stdv, seed, callbacks, shuffle)\u001b[0m\n\u001b[1;32m    443\u001b[0m                            evaluation_result_list=None))\n\u001b[1;32m    444\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mfold\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mcvfolds\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 445\u001b[0;31m             \u001b[0mfold\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    446\u001b[0m         \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maggcv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0meval\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeval\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mf\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mcvfolds\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    447\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/xgboost/training.py\u001b[0m in \u001b[0;36mupdate\u001b[0;34m(self, iteration, fobj)\u001b[0m\n\u001b[1;32m    228\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0miteration\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    229\u001b[0m         \u001b[0;34m\"\"\"\"Update the boosters for one iteration\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 230\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbst\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtrain\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0miteration\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    231\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    232\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0meval\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0miteration\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeval\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/xgboost/core.py\u001b[0m in \u001b[0;36mupdate\u001b[0;34m(self, dtrain, iteration, fobj)\u001b[0m\n\u001b[1;32m   1107\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mfobj\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1108\u001b[0m             _check_call(_LIB.XGBoosterUpdateOneIter(self.handle, ctypes.c_int(iteration),\n\u001b[0;32m-> 1109\u001b[0;31m                                                     dtrain.handle))\n\u001b[0m\u001b[1;32m   1110\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1111\u001b[0m             \u001b[0mpred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtrain\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","metadata":{"id":"ClYV8uaVg9zm","colab_type":"code","colab":{}},"source":["params = {'objective' : \"binary:logistic\", 'colsample_bytree' : 0.3, 'learning_rate' : 0.1, 'max_depth' : 10, 'alpha' : 10}\n","data_dmatrix = xgb.DMatrix(data=temp.iloc[:,5:],label=temp.iloc[:,4])\n","data_dmatrix\n","\n","cv_results = xgb.cv(dtrain=data_dmatrix, params=params, nfold=5,\n","                    num_boost_round=100,early_stopping_rounds=50,metrics=[\"auc\",\"error\"], as_pandas=True, seed=123)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"NLCU-dx-QLVc","colab_type":"code","outputId":"138793a4-856a-4534-fa25-b995161cb4ce","executionInfo":{"status":"ok","timestamp":1585837335124,"user_tz":-330,"elapsed":752,"user":{"displayName":"Abhishek Keshari","photoUrl":"","userId":"08321311573619930656"}},"colab":{"base_uri":"https://localhost:8080/","height":123}},"source":["# # grid search\n","# model = XGBClassifier(objective='binary:logistic')\n","# param_test1 = dict(n_estimators=[10,50])\n","# grid_search = GridSearchCV(estimator = model, param_grid = param_test1, scoring='roc_auc',return_train_score=True,verbose=1,n_jobs=4, cv=3)\n","# grid_result = grid_search.fit(temp[predictors],temp[target])\n","\n","grid_search_result(grid_result)\n","# summarize results\n","print(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\n","means = grid_result.cv_results_['mean_test_score']\n","stds = grid_result.cv_results_['std_test_score']\n","params = grid_result.cv_results_['params']\n","for mean, stdev, param in zip(means, stds, params):\n","\tprint(\"%f (%f) with: %r\" % (mean, stdev, param))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Best: 0.622254 using {'n_estimators': 10}\n","With following parameter: {'n_estimators': 10} Test_auc_score: 0.622254 (0.008843) Train_auc_score: 0.657212 (0.007014)\n","With following parameter: {'n_estimators': 50} Test_auc_score: 0.609140 (0.019357) Train_auc_score: 0.694251 (0.005584)\n","Best: 0.622254 using {'n_estimators': 10}\n","0.622254 (0.008843) with: {'n_estimators': 10}\n","0.609140 (0.019357) with: {'n_estimators': 50}\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Tw2Mns63RP6m","colab_type":"code","colab":{}},"source":["param = {\n","    'base_score': 0.5,\n","    'booster': 'gbtree',\n","    'objective': 'binary:logistic',\n","    'eval_metric': [\"auc\",\"logloss\"],\n","    'random_state': 123,\n","    'learning_rate': 0.1\n","} \n","\n","#               'colsample_bynode': 1, 'colsample_bytree': 1, 'gamma': 0,\n","#                'max_delta_step': 0, 'max_depth': 3,\n","#               'min_child_weight': 1, 'n_estimators': 100, 'n_jobs': 1,\n","#               'objective': \n","#               'reg_alpha': 0, 'reg_lambda': 1, 'scale_pos_weight': 1, 'seed': 123,\n","#               'subsample': 1,'silent':True, 'verbosity': 3, \n","# }"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"vDp5jEYcAS2s","colab_type":"code","outputId":"7a0d0f9f-9c5b-49ae-9a17-717bbdee460f","executionInfo":{"status":"error","timestamp":1585837123042,"user_tz":-330,"elapsed":390203,"user":{"displayName":"Abhishek Keshari","photoUrl":"","userId":"08321311573619930656"}},"colab":{"base_uri":"https://localhost:8080/","height":673}},"source":["# grid search\n","model = XGBClassifier(objective='binary:logistic')\n","param = {\n","    'base_score': 0.5,\n","    'booster': 'gbtree',\n","    'objective': 'binary:logistic',\n","    'eval_metric': [\"auc\",\"logloss\"],\n","    'random_state': 123,\n","    'learning_rate': 0.1\n","} \n","dtrain = xgb.DMatrix(temp[predictors], label=temp[target])\n","\n","xg2 =  xgb.train(\n","    params,\n","    dtrain,\n","    num_boost_round=100,\n","    evals=[(dtrain,\"Train\"),(dtest, \"Test\")],\n","    early_stopping_rounds=20,\n","    verbose_eval=10\n",")\n","param_test1 = dict(n_estimators=[10,50,100,150,250])\n","grid_search = GridSearchCV(estimator = model, param_grid = param_test1, scoring='roc_auc',return_train_score=True,verbose=1,n_jobs=4, cv=5)\n","grid_result = grid_search.fit(temp[predictors],temp[target])\n","\n","# summarize results\n","grid_search_result(grid_result)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["[0]\tTrain-auc:0.632622\tTrain-logloss:0.619847\tTest-auc:0.626155\tTest-logloss:0.619104\n","Multiple eval metrics have been passed: 'Test-logloss' will be used for early stopping.\n","\n","Will train until Test-logloss hasn't improved in 20 rounds.\n","[10]\tTrain-auc:0.652995\tTrain-logloss:0.306477\tTest-auc:0.645565\tTest-logloss:0.305171\n","[20]\tTrain-auc:0.658862\tTrain-logloss:0.23857\tTest-auc:0.650981\tTest-logloss:0.236883\n","[30]\tTrain-auc:0.666021\tTrain-logloss:0.223289\tTest-auc:0.657322\tTest-logloss:0.221518\n","[40]\tTrain-auc:0.671892\tTrain-logloss:0.219504\tTest-auc:0.662954\tTest-logloss:0.21779\n","[50]\tTrain-auc:0.677406\tTrain-logloss:0.218101\tTest-auc:0.668123\tTest-logloss:0.216462\n","[60]\tTrain-auc:0.682899\tTrain-logloss:0.21719\tTest-auc:0.673617\tTest-logloss:0.215585\n","[70]\tTrain-auc:0.687366\tTrain-logloss:0.216482\tTest-auc:0.678176\tTest-logloss:0.214925\n","[80]\tTrain-auc:0.690412\tTrain-logloss:0.215878\tTest-auc:0.681267\tTest-logloss:0.214364\n","[90]\tTrain-auc:0.693578\tTrain-logloss:0.215348\tTest-auc:0.6845\tTest-logloss:0.213846\n","[99]\tTrain-auc:0.695962\tTrain-logloss:0.21495\tTest-auc:0.686542\tTest-logloss:0.213498\n","Fitting 5 folds for each of 5 candidates, totalling 25 fits\n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=4)]: Using backend LokyBackend with 4 concurrent workers.\n"],"name":"stderr"},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-69-a530691fc6c0>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[0mparam_test1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn_estimators\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m50\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m150\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m250\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m \u001b[0mgrid_search\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mGridSearchCV\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mestimator\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparam_grid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mparam_test1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mscoring\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'roc_auc'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mreturn_train_score\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcv\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 22\u001b[0;31m \u001b[0mgrid_result\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgrid_search\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtemp\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mpredictors\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mtemp\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mtarget\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     23\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     24\u001b[0m \u001b[0;31m# summarize results\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, groups, **fit_params)\u001b[0m\n\u001b[1;32m    708\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mresults\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    709\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 710\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_run_search\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    711\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    712\u001b[0m         \u001b[0;31m# For multi-metric evaluation, store the best_index_, best_params_ and\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36m_run_search\u001b[0;34m(self, evaluate_candidates)\u001b[0m\n\u001b[1;32m   1149\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_run_search\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1150\u001b[0m         \u001b[0;34m\"\"\"Search all candidates in param_grid\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1151\u001b[0;31m         \u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mParameterGrid\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparam_grid\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1152\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1153\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36mevaluate_candidates\u001b[0;34m(candidate_params)\u001b[0m\n\u001b[1;32m    687\u001b[0m                                \u001b[0;32mfor\u001b[0m \u001b[0mparameters\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mtrain\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    688\u001b[0m                                in product(candidate_params,\n\u001b[0;32m--> 689\u001b[0;31m                                           cv.split(X, y, groups)))\n\u001b[0m\u001b[1;32m    690\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    691\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mout\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m   1015\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1016\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mretrieval_context\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1017\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mretrieve\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1018\u001b[0m             \u001b[0;31m# Make sure that we get a last message telling us we are done\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1019\u001b[0m             \u001b[0melapsed_time\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_start_time\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36mretrieve\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    907\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    908\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'supports_timeout'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 909\u001b[0;31m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_output\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mextend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mjob\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    910\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    911\u001b[0m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_output\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mextend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mjob\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/joblib/_parallel_backends.py\u001b[0m in \u001b[0;36mwrap_future_result\u001b[0;34m(future, timeout)\u001b[0m\n\u001b[1;32m    560\u001b[0m         AsyncResults.get from multiprocessing.\"\"\"\n\u001b[1;32m    561\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 562\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfuture\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    563\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mLokyTimeoutError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    564\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mTimeoutError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.6/concurrent/futures/_base.py\u001b[0m in \u001b[0;36mresult\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    425\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__get_result\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    426\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 427\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_condition\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    428\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    429\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_state\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mCANCELLED\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mCANCELLED_AND_NOTIFIED\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.6/threading.py\u001b[0m in \u001b[0;36mwait\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    293\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m    \u001b[0;31m# restore state no matter what (e.g., KeyboardInterrupt)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    294\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mtimeout\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 295\u001b[0;31m                 \u001b[0mwaiter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0macquire\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    296\u001b[0m                 \u001b[0mgotit\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    297\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"markdown","metadata":{"id":"Pa404jfQjfv-","colab_type":"text"},"source":["# Parameter tuning with learning API"]},{"cell_type":"markdown","metadata":{"id":"WMjI0c3mGD3p","colab_type":"text"},"source":["#### Junk"]},{"cell_type":"code","metadata":{"id":"JrT-A6OCkkIT","colab_type":"code","outputId":"3e6492a8-59e4-4a45-e9ab-0bf823c277f5","executionInfo":{"status":"ok","timestamp":1585893973929,"user_tz":-330,"elapsed":606561,"user":{"displayName":"Abhishek Keshari","photoUrl":"","userId":"08321311573619930656"}},"colab":{"base_uri":"https://localhost:8080/","height":105}},"source":["# gridsearch_params = [\n","#     num_boost_round = [10,50,100,200]\n","#     # (max_depth, min_child_weight)\n","#     # for max_depth in range(1,10,3)\n","#     # for min_child_weight in range(1,10,3)\n","# ]\n","# print(gridsearch_params)\n","\n","param = {\n","    'base_score': 0.5,\n","    'booster': 'gbtree',\n","    'objective': 'binary:logistic',\n","    'eval_metric': [\"auc\",\"logloss\"],\n","    'random_state': 123,\n","    'learning_rate': 0.1,\n","    \n","    'max_depth': 3,\n","    'min_child_weight': 1\n","\n","} \n","\n","best_params = None\n","max_auc=0\n","dtrain = xgb.DMatrix(temp[predictors],label=temp[target])\n","\n","for num_boost_rounds in [10,50,100,200]:\n","    # # Update our parameters\n","    # param['max_depth'] = max_depth\n","    # param['min_child_weight'] = min_child_weight\n","    \n","    # Run CV\n","    cv_results = xgb.cv(\n","        param,\n","        dtrain,\n","        num_boost_round=num_boost_rounds,\n","        seed=123,\n","        nfold=3,\n","        metrics={'auc'},\n","        early_stopping_rounds=100\n","    )\n","\n","    # Update best AUC\n","    mean_train_auc = cv_results['train-auc-mean'].mean()\n","    mean_test_auc = cv_results['test-auc-mean'].mean()\n","    # boost_rounds = cv_results['test-auc-mean'].argmin()\n","    \n","    print(\"CV with num_boost_round={}\".format(num_boost_rounds),end=' ')\n","    print(\"Train AUC: %f ,Test AUC: %f\" % (mean_train_auc,mean_test_auc))\n","    # print(\"\\tMAE {} for {} rounds\".format(mean_mae, boost_rounds))\n","    if mean_test_auc > max_auc:\n","        max_auc = mean_test_auc\n","        best_params = num_boost_rounds\n","print(\"Best params: {}, Test AUC: {}\".format(best_params, max_auc))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["CV with num_boost_round=10 Train AUC: 0.645852 ,Test AUC: 0.642878\n","CV with num_boost_round=50 Train AUC: 0.661444 ,Test AUC: 0.655915\n","CV with num_boost_round=100 Train AUC: 0.677186 ,Test AUC: 0.666299\n","CV with num_boost_round=200 Train AUC: 0.695721 ,Test AUC: 0.674843\n","Best params: 200, Test AUC: 0.6748426283333334\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"nS3uqVbppj0V","colab_type":"code","outputId":"5b20963e-172a-4f66-d7ca-1c9b3507ca8e","executionInfo":{"status":"ok","timestamp":1585897697471,"user_tz":-330,"elapsed":3046533,"user":{"displayName":"Abhishek Keshari","photoUrl":"","userId":"08321311573619930656"}},"colab":{"base_uri":"https://localhost:8080/","height":176}},"source":["gridsearch_params = [\n","    (num_boost_rounds)\n","    for num_boost_rounds in [10,50,100,200,500,1000]\n","]\n","\n","print(gridsearch_params)\n","\n","param = {\n","    'base_score': 0.5,\n","    'booster': 'gbtree',\n","    'objective': 'binary:logistic',\n","    'eval_metric': [\"auc\",\"logloss\"],\n","    'random_state': 123,\n","    'learning_rate': 0.1,\n","    'eta': 0.3,\n","\n","    'max_depth': 3,\n","    'min_child_weight': 1\n","\n","} \n","\n","#               'colsample_bynode': 1, 'colsample_bytree': 1, 'gamma': 0,\n","#                'max_delta_step': 0, \n","#               , 'n_estimators': 100, 'n_jobs': 1,\n","#               'objective': \n","#               'reg_alpha': 0, 'reg_lambda': 1, 'scale_pos_weight': 1, 'seed': 123,\n","#               'subsample': 1,'silent':True, 'verbosity': 3, \n","# }\n","\n","# Number of folds to perform: \n","cv = 3\n","best_params = None\n","max_auc=0\n","\n","dtrain = xgb.DMatrix(temp[predictors],label=temp[target])\n","print('Number of fits to perform = ',cv*len(gridsearch_params))\n","\n","for num_boost_rounds in gridsearch_params:\n","    # # Update our parameters\n","    # param['max_depth'] = max_depth\n","    # param['min_child_weight'] = min_child_weight\n","    \n","    # Run CV\n","    cv_results = xgb.cv(\n","        param,\n","        dtrain,\n","        num_boost_round=num_boost_rounds,\n","        seed=123,\n","        nfold=cv,\n","        metrics={'auc'},\n","        early_stopping_rounds=num_boost_rounds+1\n","    )\n","\n","    # Update best AUC\n","    mean_train_auc = cv_results['train-auc-mean'].mean()\n","    mean_test_auc = cv_results['test-auc-mean'].mean()\n","    # boost_rounds = cv_results['test-auc-mean'].argmin()\n","    \n","    print(\"CV with num_boost_round={}\".format(num_boost_rounds),end=' ')\n","    print(\"Train AUC: %f ,Test AUC: %f\" % (mean_train_auc,mean_test_auc))\n","    # print(\"\\tMAE {} for {} rounds\".format(mean_mae, boost_rounds))\n","    if mean_test_auc > max_auc:\n","        max_auc = mean_test_auc\n","        best_params = num_boost_rounds\n","print(\"Best params: {}, Test AUC: {}\".format(best_params, max_auc))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["[10, 50, 100, 200, 500, 1000]\n","Number of fits to perform =  18\n","CV with num_boost_round=10 Train AUC: 0.645852 ,Test AUC: 0.642878\n","CV with num_boost_round=50 Train AUC: 0.661444 ,Test AUC: 0.655915\n","CV with num_boost_round=100 Train AUC: 0.677186 ,Test AUC: 0.666299\n","CV with num_boost_round=200 Train AUC: 0.695721 ,Test AUC: 0.674843\n","CV with num_boost_round=500 Train AUC: 0.726636 ,Test AUC: 0.682325\n","CV with num_boost_round=1000 Train AUC: 0.758022 ,Test AUC: 0.684140\n","Best params: 1000, Test AUC: 0.6841396063333343\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"f0X8hpPnGLn2","colab_type":"text"},"source":["#### Optimal number of estimators"]},{"cell_type":"code","metadata":{"id":"m6L7NYOd3fZF","colab_type":"code","colab":{}},"source":["def modelfit(alg, dtrain, predictors,target,useTrainCV=True, cv_folds=5, early_stopping_rounds=50):\n","    \n","    if useTrainCV:\n","        xgb_param = alg.get_xgb_params()\n","        xgtrain = xgb.DMatrix(dtrain[predictors].values, label=dtrain[target].values)\n","        cvresult = xgb.cv(xgb_param, xgtrain, num_boost_round=alg.get_params()['n_estimators'], nfold=cv_folds,\n","            metrics='auc', early_stopping_rounds=early_stopping_rounds)\n","        alg.set_params(n_estimators=cvresult.shape[0])\n","        print(alg)\n","    \n","    #Fit the algorithm on the data\n","    alg.fit(dtrain[predictors], dtrain[target],eval_metric='auc')\n","        \n","    #Predict training set:\n","    dtrain_predictions = alg.predict(dtrain[predictors])\n","    dtrain_predprob = alg.predict_proba(dtrain[predictors])[:,1]\n","        \n","    #Print model report:\n","    print(\"\\nModel Report\")\n","    print(\"Accuracy : %.4g\" % metrics.accuracy_score(dtrain[target].values, dtrain_predictions))\n","    print(\"AUC Score (Train): %f\" % metrics.roc_auc_score(dtrain[target], dtrain_predprob))\n","                    \n","    # feat_imp = pd.Series(alg.booster().get_fscore()).sort_values(ascending=False)\n","    # feat_imp.plot(kind='bar', title='Feature Importances')\n","    # plt.ylabel('Feature Importance Score')\n","    return cvresult"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"kzWvqFPm3kHP","colab_type":"code","outputId":"8d854f42-9149-410d-e9a0-881e9f556c54","executionInfo":{"status":"ok","timestamp":1585899280124,"user_tz":-330,"elapsed":489891,"user":{"displayName":"Abhishek Keshari","photoUrl":"","userId":"08321311573619930656"}},"colab":{"base_uri":"https://localhost:8080/","height":693}},"source":["from sklearn.metrics import confusion_matrix\n","from sklearn.metrics import classification_report\n","from sklearn.metrics import roc_auc_score\n","from sklearn.metrics import roc_curve\n","from sklearn import metrics\n","dtrain = temp\n","model = XGBClassifier(booster='gbtree',objective='binary:logistic',n_estimators=1000,random_state=123,verbosity=1,n_jobs=4)\n","cv_result = modelfit(model,dtrain,predictors,target)\n","cv_result"],"execution_count":0,"outputs":[{"output_type":"stream","text":["XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n","              colsample_bynode=1, colsample_bytree=1, gamma=0,\n","              learning_rate=0.1, max_delta_step=0, max_depth=3,\n","              min_child_weight=1, missing=None, n_estimators=327, n_jobs=4,\n","              nthread=None, objective='binary:logistic', random_state=123,\n","              reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,\n","              silent=None, subsample=1, verbosity=1)\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:235: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:268: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"},{"output_type":"stream","text":["\n","Model Report\n","Accuracy : 0.939\n","AUC Score (Train): 0.731365\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>train-auc-mean</th>\n","      <th>train-auc-std</th>\n","      <th>test-auc-mean</th>\n","      <th>test-auc-std</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.634061</td>\n","      <td>0.001470</td>\n","      <td>0.631656</td>\n","      <td>0.003589</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.639439</td>\n","      <td>0.002512</td>\n","      <td>0.636033</td>\n","      <td>0.003896</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.642479</td>\n","      <td>0.000926</td>\n","      <td>0.638973</td>\n","      <td>0.003624</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.644575</td>\n","      <td>0.001861</td>\n","      <td>0.640572</td>\n","      <td>0.002824</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.645432</td>\n","      <td>0.001981</td>\n","      <td>0.641419</td>\n","      <td>0.003528</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>322</th>\n","      <td>0.737390</td>\n","      <td>0.001148</td>\n","      <td>0.688331</td>\n","      <td>0.001003</td>\n","    </tr>\n","    <tr>\n","      <th>323</th>\n","      <td>0.737546</td>\n","      <td>0.001159</td>\n","      <td>0.688374</td>\n","      <td>0.000996</td>\n","    </tr>\n","    <tr>\n","      <th>324</th>\n","      <td>0.737659</td>\n","      <td>0.001173</td>\n","      <td>0.688356</td>\n","      <td>0.000995</td>\n","    </tr>\n","    <tr>\n","      <th>325</th>\n","      <td>0.737811</td>\n","      <td>0.001181</td>\n","      <td>0.688402</td>\n","      <td>0.001000</td>\n","    </tr>\n","    <tr>\n","      <th>326</th>\n","      <td>0.737924</td>\n","      <td>0.001200</td>\n","      <td>0.688445</td>\n","      <td>0.000996</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>327 rows × 4 columns</p>\n","</div>"],"text/plain":["     train-auc-mean  train-auc-std  test-auc-mean  test-auc-std\n","0          0.634061       0.001470       0.631656      0.003589\n","1          0.639439       0.002512       0.636033      0.003896\n","2          0.642479       0.000926       0.638973      0.003624\n","3          0.644575       0.001861       0.640572      0.002824\n","4          0.645432       0.001981       0.641419      0.003528\n","..              ...            ...            ...           ...\n","322        0.737390       0.001148       0.688331      0.001003\n","323        0.737546       0.001159       0.688374      0.000996\n","324        0.737659       0.001173       0.688356      0.000995\n","325        0.737811       0.001181       0.688402      0.001000\n","326        0.737924       0.001200       0.688445      0.000996\n","\n","[327 rows x 4 columns]"]},"metadata":{"tags":[]},"execution_count":15}]},{"cell_type":"code","metadata":{"id":"NUTSSxL-3kCT","colab_type":"code","outputId":"cb4d6f25-ee4a-4c0f-e9a9-4f8d843b42ae","executionInfo":{"status":"ok","timestamp":1585900387571,"user_tz":-330,"elapsed":179762,"user":{"displayName":"Abhishek Keshari","photoUrl":"","userId":"08321311573619930656"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["xg1 = XGBClassifier(booster='gbtree',objective='binary:logistic',n_estimators=327,random_state=123,verbosity=1,n_jobs=4)\n","xg1.fit(X_train,y_train)\n","roc_auc(X_test,y_test,xg1.predict(X_test),xg1)\n","roc_auc(X_train,y_train,xg1.predict(X_train),xg1)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Confusion_Matrix: \n","[[73553     6]\n"," [ 4694     7]]\n","\n","Accuracy of classifier on test set: 0.94\n","\n","Classification Report: \n","              precision    recall  f1-score   support\n","\n","         0.0       0.94      1.00      0.97     73559\n","         1.0       0.54      0.00      0.00      4701\n","\n","    accuracy                           0.94     78260\n","   macro avg       0.74      0.50      0.49     78260\n","weighted avg       0.92      0.94      0.91     78260\n","\n","Best Threshold=0.057263, G-Mean=0.631\n","\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\nQmCC\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Confusion_Matrix: \n","[[171347      6]\n"," [ 11214     37]]\n","\n","Accuracy of classifier on test set: 0.94\n","\n","Classification Report: \n","              precision    recall  f1-score   support\n","\n","         0.0       0.94      1.00      0.97    171353\n","         1.0       0.86      0.00      0.01     11251\n","\n","    accuracy                           0.94    182604\n","   macro avg       0.90      0.50      0.49    182604\n","weighted avg       0.93      0.94      0.91    182604\n","\n","Best Threshold=0.064165, G-Mean=0.679\n","\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n+MAmBx39UqKd65u/u0ydOpXhw4cDcMcddzB16tRTPmQvVGhoKEFBQQwZMoQ+ffrQp08fAP7880++\n+uorAPz9/QkNDWXp0qXccsst+d+O+/Xrx5IlS7jpppuoW7cul1xyCQDz589n/vz5tGvXDrAfmLt2\n7aJ79+6nnDsxMZGQkP/Vc5swYQI//fQTAAcPHmTXrl2EhYXh7+9P//79Afjjjz+IjIykU6dOAJw4\ncYKqVasCMGPGDCZNmkROTg4xMTFs3bqV1qeNQBwxYgQjRoy46PftTKZOnXrK1caYMWN48sknCT7D\nfCp/f38CAgJISUk55T1wB59PFPvj04g8cIynejb2nmYnY+z6EMOH2z6J8HCbKLQEuPKQxMRE/vzz\nTzZt2oSIkJubi4gwfvx4SpUqdUqfwMkx+A0bNiQqKork5OQCrypKlSrFqlWr+OOPP/j+++95//33\nT2k6cZVz04oxhlGjRvHggw8W+JyTsfv5+fHXX3+xYMEC/v77b8qWLUuPHj3yX0tQUBD+juWAjTHc\nc889vPbaa6cca9++fbz11lusXr2aihUrcu+9955xPsL48ePzr0Ccde/enQkTJpzyWK1atfjrr7/y\n70dHR9OjR48zvpacnBx+/PHHU670Vq5cyffff8+zzz7L8ePH8fPzIygoiGHDhgGQmZlJUFF8rhhj\nfOrWoUMH4+y9BTtN3ed+NYePpxuvsHevMddfbwwY07atMStWeDoi5QW2bt3q0fN//PHHZujQoac8\n1r17d7No0SITFRVl6tatazIyMsyxY8dMRESE+fzzz40xxowYMcLce++9JjMz0xhjTGxsrJkxY8Yp\nx0lJSTFHjx41xhhz/PhxU6lSJWOMMbfffrv5z3/+Y4wxJicnxxw/ftxERkaaVq1ambS0NJOammpa\ntGhh1q5da/bt22datGiRf8x58+aZzp07m5SUFGOMMdHR0fnncNalSxeza9cuY4wxM2fONH369DHG\nGLNt2zYTGBhoFi5caIwxply5cvnP2bJli2nYsGH+8RISEsz+/fvN+vXrTevWrU1ubq45cuSIqVq1\nav77cKESEhJMRESESUxMNImJiSYiIsIkJCSccd/ffvvNdO/e/azHeumll8z48ePz78fHx5smTZqc\ncd8z/b1hSydd0Oeul3wFv3ALth2lVa1QaoSW8XQo1pQpsHgx/Oc/sHq17ZNQysOmTp3KLbfccspj\n/fv3Z+rUqdSpU4cBAwbQsmVLBgwYkN/cAzB27FiqVKlC8+bNadmyJX369PnH1UVKSgp9+vShdevW\ndOvWjXfeeQeA9957j4ULF9KqVSs6dOjA1q1bad++Pffeey+dO3emS5cuPPDAA6ec76RevXoxaNAg\nunbtSqtWrbj11lvPONrqhhtuyP/G3rt3b3JycmjWrBkjR47Mb8Y6XfPmzRk7diy9evWidevW9OzZ\nk5iYGNq0aUO7du1o2rQpgwYN4rLLLjuv9/hMKlWqxAsvvECnTp3o1KkTL774Yn7H9gMPPIBzOaJp\n06adtZP7TBYuXMgNN9xw0TG6wqdrPR1MTOfyNxfy7+ubMrS7BxcoWrLEjmS65hr7My4OavvIfA5V\nJLZt20azZs08HUaxExMTw+DBg/n99989HUqR69evH6+//jqNGzf+x7Yz/b2V2FpPS3fHA9Ct4bkX\nM3KL+Hhb2bV7d3jlFftYYKAmCaWKSI0aNfjXv/7l1RPu3CErK4u+ffueMUm4g08nit+3HqVWhTI0\nq1HEq9gZYwv3NW0KX39t50N40WxVpUqSAQMGnNeEu+IgICCAwYMHF9n5fDZRnMjKZcmuOK5tUb3o\ni63NmWOvJJo2hXXr4PXX4bTJMEopVVz4bKJYuS+B7FzDFU2KqNkpPR2WLbO/X389/Pyz7bRu2bJo\nzq+UUh7is4li/cHjiEC78AruP9lvv9mEcN11cPy4nTB3001awE8pVSL47Cfd4p1xtKwZSvmgwlvu\n7x8OHYLbbrNXEIGB8MsvUKEIEpNSSnkRn0wU8amZrDt43L21nWJjoXlz+PVXGDsWNmyAK65w3/mU\ncjN/f3/atm1LmzZtaN++PcuXL7+g47z77rukp6cXcnTKm/lkoli5NxFj4JL6bqjtdLJgV9Wq8Oqr\nsHkzPP88BAQU/rmUOospU6YQERGBn58fERERZywZcb7KlCnD+vXr2bBhA6+99hqjRo26oONooih5\nfDJRrDmQSJnS/rQvzP6JpCR47DGoVw/WrrWPPf44NPDgRD5VIp0snX3gwAGMMRw4cIChQ4cWSrI4\nKTk5mYoVK+bfHz9+PJ06daJ169b5lUrT0tK44YYbaNOmDS1btmT69OlMmDCBw4cPc+WVV3LllVcW\nWjzKu/lkUcBdR1NpULVc4RQBNMauLvfEE3DkCAwbpslBedTzzz//j2/s6enpPP/88xe19sCJEydo\n27YtGRkZxMTE5Bfumz9/fn5Jb2MMN910E4sXLyYuLo6aNWsye/ZsAJKSkggNDeWdd95h4cKFVK7s\n5YuEqULjk1cUq/cn0iG84rl3PBdjoF8/uP12qFEDVq2CCRMgNPTij63UBYqKijqvx111sulp+/bt\nzJ07l8GDB2OMOaWk6ESKZwAACxtJREFUd/v27dm+fTu7du2iVatW/P777zz33HMsWbKEUP1/UWL5\n3BVFZk4emTl5tKh1EX+02dlQurQd5tqtG1x1FTzyCDjKECvlSeHh4Rw4cOCMjxeWrl27Eh8fT1xc\nXIElvdeuXcucOXMYPXo0V199NS+++GKhxaB8h89dUWRk2/VuG1e7wLIdf/0FrVvbCXMATz9t+yY0\nSSgvMW7cOMqWLXvKY2XLlmXcuHGFdo7t27eTm5tLWFgY1157LZ999hmpqamAXZUtNjaWw4cPU7Zs\nWe666y5GjBjBWkffXUhIiNvXzVbexeeuKE5k5xLoJ+df3ykuDp55Br76ynZYu3lFKKUu1Ml+iOef\nf56oqCjCw8MZN27cRa+NfLKPAuw6NF9++SX+/v706tWLbdu20bVrV8CuL/3NN9+we/duRowYgZ+f\nH6VLl+bDDz8EYOjQofTu3ZuaNWuycOHCi4pJ+QafKzNeOaKZaT/8I+Y/eR5zGqZOhUcfhdT/b+/e\nY6Q6yziOf3/ltlwK1G41tNCCKVQpbWghFWN6Cw0iTcEGlBJJxRAxaLEKEoltrMFaRCy2Tdtwk4Ba\nWwRts1Ir1gpd0nIN1wWFIDR1vRRcEblWKI9/vO9kxu3szAF2rjyfZMI5M+8588zD7LxzznvmeY/B\n9Onhctdm39icKyQvM+6KqbXLjFfcEcWp02cZcOU5jk+cORNKcMybF35E55xzLrGKG6M4ffYsfWrz\nVGo9fhxmzIBnnw3r48fD6697J+Gcc+eh4joKgD5X5OgoVq6E66+H2bNh795wnxRuzpVQpZ3mdZWp\nEO+ziuworvlAlo6isTH8JuKee8LcEPX18MQTxQ/OuSxqampoamryzsIVlJnR1NRETU1Nq+634sYo\nAHp0z5KE/fth1SqYNQumTvXaTK6s9OzZk8bGRg4dOlTqUFyVq6mpoWcrT8dccVc9dejR14437gnl\nOzZuhHXr4MEHw4NNTXB5AQoFOudchbuQq54KeupJ0nBJeyTtkzQjy+MdJC2Lj2+Q1DvfPi+RaHv0\nP+GX1EOGwNy5YfAavJNwzrkCKFhHIakN8AzwKaA/ME5S88uOJgKHzexa4EfA7Hz7vezU0TBX9fz5\nobrrzp0+X7VzzhVQIY8obgH2mdl+M/sv8AIwqlmbUcDSuLwCGCrlvjypx+F3oFcv2LQpDFZ37drq\ngTvnnEsr5GD2VcBfMtYbgY+11MbMzkg6AlwO/DOzkaRJwKS4+q42b25g0KCCBF1hammWq4uY5yLN\nc5HmuUi77nw3rIirnsxsAbAAQNLm8x2QqTaeizTPRZrnIs1zkSZp8/luW8hTT38FemWs94z3ZW0j\nqS3QDWgqYEzOOefOUSE7ik1AX0l9JLUH7gPqmrWpAz4fl8cAf7BKu17XOeeqXMFOPcUxhweAVUAb\nYLGZ7ZI0E9hsZnXAj4GfStoH/IvQmeSzoFAxVyDPRZrnIs1zkea5SDvvXFTcD+6cc84VV0XWenLO\nOVc83lE455zLqWw7ikKU/6hUCXIxVdJuSTskvSbpmlLEWQz5cpHRbrQkk1S1l0YmyYWkz8b3xi5J\nPy92jMWS4G/kakmrJW2NfycjShFnoUlaLOmgpIYWHpekp2Kedki6OdGOzazsboTB7z8DHwbaA9uB\n/s3afBmYF5fvA5aVOu4S5uJOoFNcnnwx5yK2uxSoB9YDg0sddwnfF32BrcBlcf2DpY67hLlYAEyO\ny/2Bt0odd4FycRtwM9DQwuMjgFcAAUOADUn2W65HFAUp/1Gh8ubCzFab2Ym4up7wm5VqlOR9AfBd\nQt2wU8UMrsiS5OKLwDNmdhjAzA4WOcZiSZILA1L1froBfytifEVjZvWEK0hbMgr4iQXrge6SeuTb\nb7l2FNnKf1zVUhszOwOkyn9UmyS5yDSR8I2hGuXNRTyU7mVmLxczsBJI8r7oB/ST9Iak9ZKGFy26\n4kqSi+8A4yU1Ar8BphQntLJzrp8nQIWU8HDJSBoPDAZuL3UspSDpEmAuMKHEoZSLtoTTT3cQjjLr\nJd1gZv8uaVSlMQ5YYmaPS/o44fdbA8zsbKkDqwTlekTh5T/SkuQCSXcBDwEjzezdIsVWbPlycSkw\nAFgj6S3COdi6Kh3QTvK+aATqzOy0mR0A9hI6jmqTJBcTgV8AmNk6oIZQMPBik+jzpLly7Si8/Eda\n3lxIugmYT+gkqvU8NOTJhZkdMbNaM+ttZr0J4zUjzey8i6GVsSR/Iy8RjiaQVEs4FbW/mEEWSZJc\nvA0MBZD0UUJHcTHOS1sH3B+vfhoCHDGzv+fbqCxPPVnhyn9UnIS5mAN0AZbH8fy3zWxkyYIukIS5\nuCgkzMUqYJik3cB7wHQzq7qj7oS5mAYslPR1wsD2hGr8YinpecKXg9o4HvMI0A7AzOYRxmdGAPuA\nE8AXEu23CnPlnHOuFZXrqSfnnHNlwjsK55xzOXlH4ZxzLifvKJxzzuXkHYVzzrmcvKNwZUnSe5K2\nZdx652h7rBWeb4mkA/G5tsRf757rPhZJ6h+Xv9XssTcvNMa4n1ReGiT9WlL3PO0HVmulVFc8fnms\nK0uSjplZl9Zum2MfS4CVZrZC0jDgh2Z24wXs74JjyrdfSUuBvWb2vRztJxAq6D7Q2rG4i4cfUbiK\nIKlLnGtji6Sdkt5XNVZSD0n1Gd+4b433D5O0Lm67XFK+D/B64Nq47dS4rwZJX4v3dZb0sqTt8f6x\n8f41kgZL+j7QMcbxXHzsWPz3BUl3Z8S8RNIYSW0kzZG0Kc4T8KUEaVlHLOgm6Zb4GrdKelPSdfFX\nyjOBsTGWsTH2xZI2xrbZqu869/9KXT/db37LdiP8knhbvL1IqCLQNT5WS/hlaeqI+Fj8dxrwUFxu\nQ6j9VEv44O8c7/8m8O0sz7cEGBOXPwNsAAYBO4HOhF++7wJuAkYDCzO27Rb/XUOc/yIVU0abVIz3\nAkvjcntCJc+OwCTg4Xh/B2Az0CdLnMcyXt9yYHhc7wq0jct3Ab+MyxOApzO2fwwYH5e7E+o/dS71\n/7ffyvtWliU8nANOmtnA1IqkdsBjkm4DzhK+SX8I+EfGNpuAxbHtS2a2TdLthIlq3ojlTdoTvoln\nM0fSw4QaQBMJtYFeNLPjMYZfAbcCvwUelzSbcLpq7Tm8rleAJyV1AIYD9WZ2Mp7uulHSmNiuG6GA\n34Fm23eUtC2+/j8Cr2a0XyqpL6FERbsWnn8YMFLSN+J6DXB13JdzWXlH4SrF54ArgEFmdlqhOmxN\nZgMzq48dyd3AEklzgcPAq2Y2LsFzTDezFakVSUOzNTKzvQrzXowAHpX0mpnNTPIizOyUpDXAJ4Gx\nhEl2IMw4NsXMVuXZxUkzGyipE6G20VeApwiTNa02s3vjwP+aFrYXMNrM9iSJ1znwMQpXOboBB2Mn\ncSfwvnnBFeYKf8fMFgKLCFNCrgc+ISk15tBZUr+Ez7kW+LSkTpI6E04brZV0JXDCzH5GKMiYbd7h\n0/HIJptlhGJsqaMTCB/6k1PbSOoXnzMrCzMafhWYpnSZ/VS56AkZTY8STsGlrAKmKB5eKVQedi4n\n7yhcpXgOGCxpJ3A/8Kcsbe4AtkvaSvi2/qSZHSJ8cD4vaQfhtNNHkjyhmW0hjF1sJIxZLDKzrcAN\nwMZ4CugR4NEsmy8AdqQGs5v5HWFyqd9bmLoTQse2G9giqYFQNj7nEX+MZQdhUp4fALPia8/cbjXQ\nPzWYTTjyaBdj2xXXncvJL491zjmXkx9ROOecy8k7Cuecczl5R+Gccy4n7yicc87l5B2Fc865nLyj\ncM45l5N3FM4553L6HwQTdhkv9vlsAAAAAElFTkSuQmCC\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"4kHbAwvHFlld","colab_type":"text"},"source":["#### Tuning max_depth & min_child_weight"]},{"cell_type":"code","metadata":{"id":"leW5q7sBBX70","colab_type":"code","outputId":"a935756e-c47e-4b47-b191-a2855627daaf","executionInfo":{"status":"ok","timestamp":1585910846523,"user_tz":-330,"elapsed":5556741,"user":{"displayName":"Abhishek Keshari","photoUrl":"","userId":"08321311573619930656"}},"colab":{"base_uri":"https://localhost:8080/","height":374}},"source":["model = XGBClassifier(objective='binary:logistic',n_estimators=327)\n","param_test1 = {\n"," 'max_depth':[x for x in range(1,10,3)],\n"," 'min_child_weight':[x for x in range(1,10,3)]\n","}\n","grid_search = GridSearchCV(estimator = model, param_grid = param_test1, scoring='roc_auc',return_train_score=True,verbose=1,n_jobs=4, cv=3)\n","grid_result = grid_search.fit(temp[predictors],temp[target])\n","\n","grid_search_result(grid_result)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Fitting 3 folds for each of 9 candidates, totalling 27 fits\n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=4)]: Using backend LokyBackend with 4 concurrent workers.\n","/usr/local/lib/python3.6/dist-packages/joblib/externals/loky/process_executor.py:706: UserWarning: A worker stopped while some jobs were given to the executor. This can be caused by a too short worker timeout or by a memory leak.\n","  \"timeout or by a memory leak.\", UserWarning\n","[Parallel(n_jobs=4)]: Done  27 out of  27 | elapsed: 88.5min finished\n","/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:235: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:268: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"},{"output_type":"stream","text":["Best: 0.626620 using {'max_depth': 1, 'min_child_weight': 4}\n","With following parameter: {'max_depth': 1, 'min_child_weight': 1} Test_auc_score: 0.623974 (0.013948) Train_auc_score: 0.693930 (0.007125)\n","With following parameter: {'max_depth': 1, 'min_child_weight': 4} Test_auc_score: 0.626620 (0.013955) Train_auc_score: 0.693868 (0.007171)\n","With following parameter: {'max_depth': 1, 'min_child_weight': 7} Test_auc_score: 0.626415 (0.013758) Train_auc_score: 0.693785 (0.007101)\n","With following parameter: {'max_depth': 4, 'min_child_weight': 1} Test_auc_score: 0.542725 (0.039093) Train_auc_score: 0.804761 (0.005327)\n","With following parameter: {'max_depth': 4, 'min_child_weight': 4} Test_auc_score: 0.550020 (0.036864) Train_auc_score: 0.803162 (0.006034)\n","With following parameter: {'max_depth': 4, 'min_child_weight': 7} Test_auc_score: 0.549113 (0.038801) Train_auc_score: 0.801389 (0.006505)\n","With following parameter: {'max_depth': 7, 'min_child_weight': 1} Test_auc_score: 0.520396 (0.048765) Train_auc_score: 0.955514 (0.002052)\n","With following parameter: {'max_depth': 7, 'min_child_weight': 4} Test_auc_score: 0.529617 (0.042631) Train_auc_score: 0.942347 (0.001663)\n","With following parameter: {'max_depth': 7, 'min_child_weight': 7} Test_auc_score: 0.529545 (0.044326) Train_auc_score: 0.934331 (0.003724)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Mzf-0puzIoGA","colab_type":"code","outputId":"33fa9d81-f886-43c2-f7be-5d42026bc040","executionInfo":{"status":"ok","timestamp":1585916153157,"user_tz":-330,"elapsed":2660571,"user":{"displayName":"Abhishek Keshari","photoUrl":"","userId":"08321311573619930656"}},"colab":{"base_uri":"https://localhost:8080/","height":445}},"source":["model = XGBClassifier(objective='binary:logistic',n_estimators=327)\n","param_test1 = {\n"," 'max_depth':[x for x in [1,2,3]],\n"," 'min_child_weight':[x for x in [2,3,4,5,6]]\n","}\n","grid_search = GridSearchCV(estimator = model, param_grid = param_test1, scoring='roc_auc',return_train_score=True,verbose=1,n_jobs=4, cv=3)\n","grid_result = grid_search.fit(temp[predictors],temp[target])\n","\n","grid_search_result(grid_result)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Fitting 3 folds for each of 15 candidates, totalling 45 fits\n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=4)]: Using backend LokyBackend with 4 concurrent workers.\n","[Parallel(n_jobs=4)]: Done  45 out of  45 | elapsed: 77.2min finished\n","/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:235: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:268: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"},{"output_type":"stream","text":["Best: 0.626620 using {'max_depth': 1, 'min_child_weight': 4}\n","With following parameter: {'max_depth': 1, 'min_child_weight': 2} Test_auc_score: 0.624737 (0.012882) Train_auc_score: 0.693886 (0.007132)\n","With following parameter: {'max_depth': 1, 'min_child_weight': 3} Test_auc_score: 0.624800 (0.012972) Train_auc_score: 0.693950 (0.007122)\n","With following parameter: {'max_depth': 1, 'min_child_weight': 4} Test_auc_score: 0.626620 (0.013955) Train_auc_score: 0.693868 (0.007171)\n","With following parameter: {'max_depth': 1, 'min_child_weight': 5} Test_auc_score: 0.626417 (0.013755) Train_auc_score: 0.693979 (0.007066)\n","With following parameter: {'max_depth': 1, 'min_child_weight': 6} Test_auc_score: 0.626203 (0.014058) Train_auc_score: 0.693933 (0.007074)\n","With following parameter: {'max_depth': 2, 'min_child_weight': 2} Test_auc_score: 0.575751 (0.026511) Train_auc_score: 0.729230 (0.006756)\n","With following parameter: {'max_depth': 2, 'min_child_weight': 3} Test_auc_score: 0.580120 (0.023769) Train_auc_score: 0.729548 (0.006339)\n","With following parameter: {'max_depth': 2, 'min_child_weight': 4} Test_auc_score: 0.583608 (0.024820) Train_auc_score: 0.729212 (0.006537)\n","With following parameter: {'max_depth': 2, 'min_child_weight': 5} Test_auc_score: 0.583248 (0.023610) Train_auc_score: 0.728984 (0.006643)\n","With following parameter: {'max_depth': 2, 'min_child_weight': 6} Test_auc_score: 0.585191 (0.023793) Train_auc_score: 0.729036 (0.006320)\n","With following parameter: {'max_depth': 3, 'min_child_weight': 2} Test_auc_score: 0.554910 (0.037077) Train_auc_score: 0.762042 (0.006653)\n","With following parameter: {'max_depth': 3, 'min_child_weight': 3} Test_auc_score: 0.557887 (0.036735) Train_auc_score: 0.761985 (0.006436)\n","With following parameter: {'max_depth': 3, 'min_child_weight': 4} Test_auc_score: 0.558953 (0.032586) Train_auc_score: 0.762252 (0.005710)\n","With following parameter: {'max_depth': 3, 'min_child_weight': 5} Test_auc_score: 0.561290 (0.039128) Train_auc_score: 0.761692 (0.006555)\n","With following parameter: {'max_depth': 3, 'min_child_weight': 6} Test_auc_score: 0.558487 (0.037056) Train_auc_score: 0.761835 (0.006782)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"7yI2gtB1Frco","colab_type":"text"},"source":["#### Tuning gamma"]},{"cell_type":"code","metadata":{"id":"5kJN_jEaIoDj","colab_type":"code","outputId":"48744bd6-32e7-412c-cca8-71e524bc0dbd","executionInfo":{"status":"ok","timestamp":1585919425337,"user_tz":-330,"elapsed":1188550,"user":{"displayName":"Abhishek Keshari","photoUrl":"","userId":"08321311573619930656"}},"colab":{"base_uri":"https://localhost:8080/","height":303}},"source":["model = XGBClassifier(objective='binary:logistic',n_estimators=327,max_depth=1,min_child_weight=4)\n","param_test1 = {\n","'gamma':[i/10.0 for i in range(0,5)]\n","}\n","grid_search = GridSearchCV(estimator = model, param_grid = param_test1, scoring='roc_auc',return_train_score=True,verbose=1,n_jobs=4, cv=3)\n","grid_result = grid_search.fit(temp[predictors],temp[target])\n","\n","grid_search_result(grid_result)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Fitting 3 folds for each of 5 candidates, totalling 15 fits\n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=4)]: Using backend LokyBackend with 4 concurrent workers.\n","/usr/local/lib/python3.6/dist-packages/joblib/externals/loky/process_executor.py:706: UserWarning: A worker stopped while some jobs were given to the executor. This can be caused by a too short worker timeout or by a memory leak.\n","  \"timeout or by a memory leak.\", UserWarning\n","[Parallel(n_jobs=4)]: Done  15 out of  15 | elapsed: 15.7min finished\n","/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:235: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:268: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"},{"output_type":"stream","text":["Best: 0.626620 using {'gamma': 0.0}\n","With following parameter: {'gamma': 0.0} Test_auc_score: 0.626620 (0.013955) Train_auc_score: 0.693868 (0.007171)\n","With following parameter: {'gamma': 0.1} Test_auc_score: 0.626620 (0.013955) Train_auc_score: 0.693868 (0.007171)\n","With following parameter: {'gamma': 0.2} Test_auc_score: 0.626620 (0.013955) Train_auc_score: 0.693868 (0.007171)\n","With following parameter: {'gamma': 0.3} Test_auc_score: 0.626620 (0.013955) Train_auc_score: 0.693868 (0.007171)\n","With following parameter: {'gamma': 0.4} Test_auc_score: 0.626620 (0.013955) Train_auc_score: 0.693868 (0.007171)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"_9xCmnMMGaMb","colab_type":"text"},"source":["#### Tune subsample and colsample_bytree"]},{"cell_type":"code","metadata":{"id":"irm_OIzzEokY","colab_type":"code","outputId":"57d67ae7-00fa-4572-b90e-14e399ba85de","executionInfo":{"status":"ok","timestamp":1585922537597,"user_tz":-330,"elapsed":37529,"user":{"displayName":"Abhishek Keshari","photoUrl":"","userId":"08321311573619930656"}},"colab":{"base_uri":"https://localhost:8080/","height":498}},"source":["model = XGBClassifier(objective='binary:logistic',n_estimators=327,max_depth=1,min_child_weight=4,gamma=0.0)\n","param_test1 = {\n"," 'subsample':[i/10.0 for i in range(6,10)],\n"," 'colsample_bytree':[i/10.0 for i in range(6,10)]\n","}\n","grid_search = GridSearchCV(estimator = model, param_grid = param_test1, scoring='roc_auc',return_train_score=True,verbose=1,n_jobs=4, cv=3)\n","grid_result = grid_search.fit(temp[predictors],temp[target])\n","\n","grid_search_result(grid_result)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Fitting 3 folds for each of 16 candidates, totalling 48 fits\n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=4)]: Using backend LokyBackend with 4 concurrent workers.\n","/usr/local/lib/python3.6/dist-packages/joblib/externals/loky/process_executor.py:706: UserWarning: A worker stopped while some jobs were given to the executor. This can be caused by a too short worker timeout or by a memory leak.\n","  \"timeout or by a memory leak.\", UserWarning\n","[Parallel(n_jobs=4)]: Done  48 out of  48 | elapsed: 46.1min finished\n","/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:235: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:268: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"},{"output_type":"stream","text":["Best: 0.628406 using {'colsample_bytree': 0.7, 'subsample': 0.6}\n","With following parameter: {'colsample_bytree': 0.6, 'subsample': 0.6} Test_auc_score: 0.627089 (0.015159) Train_auc_score: 0.696971 (0.006662)\n","With following parameter: {'colsample_bytree': 0.6, 'subsample': 0.7} Test_auc_score: 0.627767 (0.014784) Train_auc_score: 0.696455 (0.006742)\n","With following parameter: {'colsample_bytree': 0.6, 'subsample': 0.8} Test_auc_score: 0.626991 (0.014408) Train_auc_score: 0.695673 (0.007087)\n","With following parameter: {'colsample_bytree': 0.6, 'subsample': 0.9} Test_auc_score: 0.625978 (0.013701) Train_auc_score: 0.695034 (0.006841)\n","With following parameter: {'colsample_bytree': 0.7, 'subsample': 0.6} Test_auc_score: 0.628406 (0.015962) Train_auc_score: 0.697006 (0.006644)\n","With following parameter: {'colsample_bytree': 0.7, 'subsample': 0.7} Test_auc_score: 0.627961 (0.016335) Train_auc_score: 0.696500 (0.006798)\n","With following parameter: {'colsample_bytree': 0.7, 'subsample': 0.8} Test_auc_score: 0.626868 (0.014672) Train_auc_score: 0.695766 (0.006870)\n","With following parameter: {'colsample_bytree': 0.7, 'subsample': 0.9} Test_auc_score: 0.626852 (0.013507) Train_auc_score: 0.695021 (0.006843)\n","With following parameter: {'colsample_bytree': 0.8, 'subsample': 0.6} Test_auc_score: 0.627700 (0.018033) Train_auc_score: 0.696949 (0.006705)\n","With following parameter: {'colsample_bytree': 0.8, 'subsample': 0.7} Test_auc_score: 0.627511 (0.015894) Train_auc_score: 0.696457 (0.006859)\n","With following parameter: {'colsample_bytree': 0.8, 'subsample': 0.8} Test_auc_score: 0.626119 (0.014881) Train_auc_score: 0.695717 (0.007035)\n","With following parameter: {'colsample_bytree': 0.8, 'subsample': 0.9} Test_auc_score: 0.626243 (0.014203) Train_auc_score: 0.695135 (0.007003)\n","With following parameter: {'colsample_bytree': 0.9, 'subsample': 0.6} Test_auc_score: 0.628209 (0.017727) Train_auc_score: 0.697135 (0.006649)\n","With following parameter: {'colsample_bytree': 0.9, 'subsample': 0.7} Test_auc_score: 0.627544 (0.016390) Train_auc_score: 0.696513 (0.006823)\n","With following parameter: {'colsample_bytree': 0.9, 'subsample': 0.8} Test_auc_score: 0.626485 (0.014598) Train_auc_score: 0.695672 (0.006997)\n","With following parameter: {'colsample_bytree': 0.9, 'subsample': 0.9} Test_auc_score: 0.627072 (0.014002) Train_auc_score: 0.695157 (0.006968)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"rsrZT423GfEX","colab_type":"text"},"source":["#### Tuning Regularization Parameters"]},{"cell_type":"code","metadata":{"id":"pWjwApmbIoBK","colab_type":"code","outputId":"a5f85cca-cccf-4c2f-f54e-231481023de8","executionInfo":{"status":"ok","timestamp":1585922680816,"user_tz":-330,"elapsed":122734,"user":{"displayName":"Abhishek Keshari","photoUrl":"","userId":"08321311573619930656"}},"colab":{"base_uri":"https://localhost:8080/","height":267}},"source":["model = XGBClassifier(objective='binary:logistic', n_estimators=11, max_depth=3, min_child_weight=10,gamma=0.0,colsample_bytree=0.7,subsample=0.6)\n","param_test1 = {\n"," 'reg_alpha':[1e-5, 1e-2, 0.1, 1, 100]\n","}\n","grid_search = GridSearchCV(estimator = model, param_grid = param_test1, scoring='roc_auc',return_train_score=True,verbose=1,n_jobs=4, cv=3)\n","grid_result = grid_search.fit(temp[predictors],temp[target])\n","\n","grid_search_result(grid_result)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Fitting 3 folds for each of 5 candidates, totalling 15 fits\n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=4)]: Using backend LokyBackend with 4 concurrent workers.\n","[Parallel(n_jobs=4)]: Done  15 out of  15 | elapsed:  1.6min finished\n","/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:235: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:268: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"},{"output_type":"stream","text":["Best: 0.625682 using {'reg_alpha': 0.01}\n","With following parameter: {'reg_alpha': 1e-05} Test_auc_score: 0.625682 (0.010506) Train_auc_score: 0.664060 (0.005686)\n","With following parameter: {'reg_alpha': 0.01} Test_auc_score: 0.625682 (0.010506) Train_auc_score: 0.664062 (0.005686)\n","With following parameter: {'reg_alpha': 0.1} Test_auc_score: 0.624546 (0.009449) Train_auc_score: 0.664156 (0.005642)\n","With following parameter: {'reg_alpha': 1} Test_auc_score: 0.624251 (0.009308) Train_auc_score: 0.663310 (0.005571)\n","With following parameter: {'reg_alpha': 100} Test_auc_score: 0.586680 (0.025794) Train_auc_score: 0.615527 (0.004895)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"B8QtsbiJGigd","colab_type":"text"},"source":["#### Tuning Learning Rate"]},{"cell_type":"code","metadata":{"id":"xCO3t80SIn-d","colab_type":"code","outputId":"a3bb5bf3-bfd6-4c44-89f5-10a8b1ecc4c4","executionInfo":{"status":"ok","timestamp":1585923561769,"user_tz":-330,"elapsed":107707,"user":{"displayName":"Abhishek Keshari","photoUrl":"","userId":"08321311573619930656"}},"colab":{"base_uri":"https://localhost:8080/","height":250}},"source":["model = XGBClassifier(objective='binary:logistic', n_estimators=11, max_depth=3, min_child_weight=10,gamma=0.0,colsample_bytree=0.9,subsample=0.85, reg_alpha=0.01)\n","param_test1 = {\n"," 'learning_rate':[0.05, 0.1, 0.5, 1]\n","}\n","grid_search = GridSearchCV(estimator = model, param_grid = param_test1, scoring='roc_auc',return_train_score=True,verbose=1,n_jobs=4, cv=3)\n","grid_result = grid_search.fit(temp[predictors],temp[target])\n","\n","grid_search_result(grid_result)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Fitting 3 folds for each of 4 candidates, totalling 12 fits\n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=4)]: Using backend LokyBackend with 4 concurrent workers.\n","[Parallel(n_jobs=4)]: Done  12 out of  12 | elapsed:  1.4min finished\n","/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:235: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:268: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"},{"output_type":"stream","text":["Best: 0.632394 using {'learning_rate': 0.1}\n","With following parameter: {'learning_rate': 0.05} Test_auc_score: 0.630322 (0.009301) Train_auc_score: 0.657031 (0.006162)\n","With following parameter: {'learning_rate': 0.1} Test_auc_score: 0.632394 (0.009106) Train_auc_score: 0.660371 (0.006258)\n","With following parameter: {'learning_rate': 0.5} Test_auc_score: 0.602408 (0.028975) Train_auc_score: 0.691107 (0.007197)\n","With following parameter: {'learning_rate': 1} Test_auc_score: 0.573533 (0.023673) Train_auc_score: 0.698595 (0.009947)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"p0gYwP-rkc3i","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}